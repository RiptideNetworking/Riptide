<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RiptideNetworking</name>
    </assembly>
    <members>
        <member name="T:Riptide.Client">
            <summary>A client that can connect to a <see cref="T:Riptide.Server"/>.</summary>
        </member>
        <member name="E:Riptide.Client.Connected">
            <summary>Invoked when a connection to the server is established.</summary>
        </member>
        <member name="E:Riptide.Client.ConnectionFailed">
            <summary>Invoked when a connection to the server fails to be established.</summary>
            <remarks>This occurs when a connection request fails, either because no server is listening on the on the given host address, or because something (firewall, antivirus, no/poor internet access, etc.) is preventing the connection.</remarks>
        </member>
        <member name="E:Riptide.Client.MessageReceived">
            <summary>Invoked when a message is received.</summary>
        </member>
        <member name="E:Riptide.Client.Disconnected">
            <summary>Invoked when disconnected from the server.</summary>
        </member>
        <member name="E:Riptide.Client.ClientConnected">
            <summary>Invoked when a client connects.</summary>
        </member>
        <member name="E:Riptide.Client.ClientDisconnected">
            <summary>Invoked when a client disconnects.</summary>
        </member>
        <member name="P:Riptide.Client.Id">
            <summary>The client's numeric ID.</summary>
        </member>
        <member name="P:Riptide.Client.RTT">
            <inheritdoc cref="P:Riptide.Connection.RTT"/>
        </member>
        <member name="P:Riptide.Client.SmoothRTT">
            <summary><inheritdoc cref="P:Riptide.Connection.SmoothRTT"/></summary>
            <remarks>This value is slower to accurately represent lasting changes in latency than <see cref="P:Riptide.Client.RTT"/>, but it is less susceptible to changing drastically due to significant—but temporary—jumps in latency.</remarks>
        </member>
        <member name="P:Riptide.Client.IsNotConnected">
            <summary>Whether or not the client is currently <i>not</i> connected nor trying to connect.</summary>
        </member>
        <member name="P:Riptide.Client.IsConnecting">
            <summary>Whether or not the client is currently in the process of connecting.</summary>
        </member>
        <member name="P:Riptide.Client.IsConnected">
            <summary>Whether or not the client is currently connected.</summary>
        </member>
        <member name="T:Riptide.Client.MessageHandler">
            <summary>Encapsulates a method that handles a message from a server.</summary>
            <param name="message">The message that was received.</param>
        </member>
        <member name="F:Riptide.Client.connection">
            <summary>The client's connection to a server.</summary>
        </member>
        <member name="F:Riptide.Client.connectionAttempts">
            <summary>How many connection attempts have been made so far.</summary>
        </member>
        <member name="F:Riptide.Client.maxConnectionAttempts">
            <summary>How many connection attempts to make before giving up.</summary>
        </member>
        <member name="F:Riptide.Client.messageHandlers">
            <inheritdoc cref="F:Riptide.Server.messageHandlers"/>
        </member>
        <member name="F:Riptide.Client.transport">
            <summary>The underlying transport's client that is used for sending and receiving data.</summary>
        </member>
        <member name="F:Riptide.Client.connectBytes">
            <summary>Custom data to include when connecting.</summary>
        </member>
        <member name="M:Riptide.Client.#ctor(Riptide.Transports.IClient,System.String)">
            <inheritdoc cref="M:Riptide.Server.#ctor(Riptide.Transports.IServer,System.String)"/>
        </member>
        <member name="M:Riptide.Client.#ctor(System.String)">
            <inheritdoc cref="M:Riptide.Server.#ctor(System.String)"/>
        </member>
        <member name="M:Riptide.Client.ChangeTransport(Riptide.Transports.IClient)">
            <summary>Disconnects the client if it's connected and swaps out the transport it's using.</summary>
            <param name="newTransport">The new transport to use for sending and receiving data.</param>
            <remarks>This method does not automatically reconnect to the server. To continue communicating with the server, <see cref="M:Riptide.Client.Connect(System.String,System.Int32,System.Byte,Riptide.Message)"/> must be called again.</remarks>
        </member>
        <member name="M:Riptide.Client.Connect(System.String,System.Int32,System.Byte,Riptide.Message)">
            <summary>Attempts to connect to a server at the given host address.</summary>
            <param name="hostAddress">The host address to connect to.</param>
            <param name="maxConnectionAttempts">How many connection attempts to make before giving up.</param>
            <param name="messageHandlerGroupId">The ID of the group of message handler methods to use when building <see cref="F:Riptide.Client.messageHandlers"/>.</param>
            <param name="message">A message containing data that should be sent to the server with the connection attempt. Use <see cref="M:Riptide.Message.Create"/> to get an empty message instance.</param>
            <remarks>Riptide's default transport expects the host address to consist of an IP and port, separated by a colon. For example: <c>127.0.0.1:7777</c>. If you are using a different transport, check the relevant documentation for what information it requires in the host address.</remarks>
            <returns><see langword="true"/> if a connection attempt will be made. <see langword="false"/> if an issue occurred (such as <paramref name="hostAddress"/> being in an invalid format) and a connection attempt will <i>not</i> be made.</returns>
        </member>
        <member name="M:Riptide.Client.SubToTransportEvents">
            <summary>Subscribes appropriate methods to the transport's events.</summary>
        </member>
        <member name="M:Riptide.Client.UnsubFromTransportEvents">
            <summary>Unsubscribes methods from all of the transport's events.</summary>
        </member>
        <member name="M:Riptide.Client.CreateMessageHandlersDictionary(System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Client.Heartbeat">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Client.Tick">
            <summary>Polls the transport for received messages and then handles them.</summary>
        </member>
        <member name="M:Riptide.Client.Handle(Riptide.Message,Riptide.Transports.HeaderType,Riptide.Connection)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Client.Send(Riptide.Message,System.Boolean)">
            <summary>Sends a message to the server.</summary>
            <param name="message">The message to send.</param>
            <param name="shouldRelease">Whether or not to return the message to the pool after it is sent.</param>
            <remarks><inheritdoc cref="M:Riptide.Connection.Send(Riptide.Message,System.Boolean)"/></remarks>
        </member>
        <member name="M:Riptide.Client.Disconnect">
            <summary>Disconnects from the server.</summary>
        </member>
        <member name="M:Riptide.Client.LocalDisconnect(Riptide.DisconnectReason,System.String)">
            <summary>Cleans up the local side of the connection.</summary>
            <param name="reason">The reason why the client has disconnected.</param>
            <param name="customMessage">An optional custom message to display for the disconnection reason. Only used when <paramref name="reason"/> is set to <see cref="F:Riptide.DisconnectReason.kicked"/>.</param>
        </member>
        <member name="M:Riptide.Client.TransportConnected(System.Object,System.EventArgs)">
            <summary>What to do when the transport establishes a connection.</summary>
        </member>
        <member name="M:Riptide.Client.TransportConnectionFailed(System.Object,System.EventArgs)">
            <summary>What to do when the transport fails to connect.</summary>
        </member>
        <member name="M:Riptide.Client.TransportDisconnected(System.Object,Riptide.Transports.DisconnectedEventArgs)">
            <summary>What to do when the transport disconnects.</summary>
        </member>
        <member name="M:Riptide.Client.OnConnected">
            <summary>Invokes the <see cref="E:Riptide.Client.Connected"/> event.</summary>
        </member>
        <member name="M:Riptide.Client.OnConnectionFailed">
            <summary>Invokes the <see cref="E:Riptide.Client.ConnectionFailed"/> event.</summary>
        </member>
        <member name="M:Riptide.Client.OnMessageReceived(Riptide.Message)">
            <summary>Invokes the <see cref="E:Riptide.Client.MessageReceived"/> event and initiates handling of the received message.</summary>
            <param name="message">The received message.</param>
        </member>
        <member name="M:Riptide.Client.OnDisconnected(Riptide.DisconnectReason,System.String)">
            <summary>Invokes the <see cref="E:Riptide.Client.Disconnected"/> event.</summary>
            <param name="reason">The reason for the disconnection.</param>
            <param name="customMessage">The custom message to display for the disconnection reason.</param>
        </member>
        <member name="M:Riptide.Client.OnClientConnected(System.UInt16)">
            <summary>Invokes the <see cref="E:Riptide.Client.ClientConnected"/> event.</summary>
            <param name="clientId">The numeric ID of the client that connected.</param>
        </member>
        <member name="M:Riptide.Client.OnClientDisconnected(System.UInt16)">
            <summary>Invokes the <see cref="E:Riptide.Client.ClientDisconnected"/> event.</summary>
            <param name="clientId">The numeric ID of the client that disconnected.</param>
        </member>
        <member name="T:Riptide.ConnectionState">
            <summary>The state of a connection.</summary>
        </member>
        <member name="F:Riptide.ConnectionState.notConnected">
            <summary>Not connected. No connection has been established or the connection has been closed.</summary>
        </member>
        <member name="F:Riptide.ConnectionState.connecting">
            <summary>Connecting. Still trying to establish a connection.</summary>
        </member>
        <member name="F:Riptide.ConnectionState.connected">
            <summary>Connected. A connection has been established successfully.</summary>
        </member>
        <member name="T:Riptide.Connection">
            <summary>Represents a connection to a <see cref="T:Riptide.Server"/> or <see cref="T:Riptide.Client"/>.</summary>
        </member>
        <member name="P:Riptide.Connection.Id">
            <summary>The connection's numeric ID.</summary>
        </member>
        <member name="P:Riptide.Connection.IsNotConnected">
            <summary>Whether or not the connection is currently <i>not</i> connected nor trying to connect.</summary>
        </member>
        <member name="P:Riptide.Connection.IsConnecting">
            <summary>Whether or not the connection is currently in the process of connecting.</summary>
        </member>
        <member name="P:Riptide.Connection.IsConnected">
            <summary>Whether or not the connection is currently connected.</summary>
        </member>
        <member name="P:Riptide.Connection.RTT">
            <summary>The round trip time (ping) of the connection, in milliseconds. -1 if not calculated yet.</summary>
        </member>
        <member name="P:Riptide.Connection.SmoothRTT">
            <summary>The smoothed round trip time (ping) of the connection, in milliseconds. -1 if not calculated yet.</summary>
            <remarks>This value is slower to accurately represent lasting changes in latency than <see cref="P:Riptide.Connection.RTT"/>, but it is less susceptible to changing drastically due to significant—but temporary—jumps in latency.</remarks>
        </member>
        <member name="P:Riptide.Connection.Peer">
            <summary>The local peer this connection is associated with.</summary>
        </member>
        <member name="P:Riptide.Connection.HasTimedOut">
            <summary>Whether or not the connection has timed out.</summary>
        </member>
        <member name="P:Riptide.Connection.PendingMessages">
            <summary>The currently pending reliably sent messages whose delivery has not been acknowledged yet. Stored by sequence ID.</summary>
        </member>
        <member name="P:Riptide.Connection.LastReceivedSeqId">
            <summary>The sequence ID of the latest message that we want to acknowledge.</summary>
        </member>
        <member name="P:Riptide.Connection.AcksBitfield">
            <summary>Messages that we have received and want to acknowledge.</summary>
        </member>
        <member name="P:Riptide.Connection.DuplicateFilterBitfield">
            <summary>Messages that we have received whose sequence IDs no longer fall into <see cref="P:Riptide.Connection.AcksBitfield"/>'s range. Used to improve duplicate message filtering capabilities.</summary>
        </member>
        <member name="P:Riptide.Connection.LastAckedSeqId">
            <summary>The sequence ID of the latest message that we've received an ack for.</summary>
        </member>
        <member name="P:Riptide.Connection.AckedMessagesBitfield">
            <summary>Messages that we sent which have been acknoweledged.</summary>
        </member>
        <member name="F:Riptide.Connection.LeftBit">
            <summary>A <see cref="T:System.UInt16"/> with the left-most bit set to 1.</summary>
        </member>
        <member name="P:Riptide.Connection.NextSequenceId">
            <summary>The next sequence ID to use.</summary>
        </member>
        <member name="F:Riptide.Connection.state">
            <summary>The connection's current state.</summary>
        </member>
        <member name="F:Riptide.Connection.lastHeartbeat">
            <summary>The time at which the last heartbeat was received from the other end.</summary>
        </member>
        <member name="F:Riptide.Connection.lastPingId">
            <summary>The ID of the last ping that was sent.</summary>
        </member>
        <member name="F:Riptide.Connection.pendingPingId">
            <summary>The ID of the currently pending ping.</summary>
        </member>
        <member name="F:Riptide.Connection.pendingPingStopwatch">
            <summary>The stopwatch that tracks the time since the currently pending ping was sent.</summary>
        </member>
        <member name="M:Riptide.Connection.#ctor">
            <summary>Initializes the connection.</summary>
        </member>
        <member name="M:Riptide.Connection.ResetTimeout">
            <summary>Resets the connection's timeout time.</summary>
        </member>
        <member name="M:Riptide.Connection.Send(Riptide.Message,System.Boolean)">
            <summary>Sends a message.</summary>
            <param name="message">The message to send.</param>
            <param name="shouldRelease">Whether or not to return the message to the pool after it is sent.</param>
            <remarks>
              If you intend to continue using the message instance after calling this method, you <i>must</i> set <paramref name="shouldRelease"/>
              to <see langword="false"/>. <see cref="M:Riptide.Message.Release"/> can be used to manually return the message to the pool at a later time.
            </remarks>
        </member>
        <member name="M:Riptide.Connection.Send(System.Byte[],System.Int32)">
            <summary>Sends data.</summary>
            <param name="dataBuffer">The array containing the data.</param>
            <param name="amount">The number of bytes in the array which should be sent.</param>
        </member>
        <member name="M:Riptide.Connection.ReliableHandle(System.UInt16)">
            <summary>Updates acks and determines whether the message is a duplicate.</summary>
            <param name="sequenceId">The message's sequence ID.</param>
            <returns>Whether or not the message should be handled.</returns>
        </member>
        <member name="M:Riptide.Connection.LocalDisconnect">
            <summary>Cleans up the local side of the connection.</summary>
        </member>
        <member name="M:Riptide.Connection.UpdateAcksBitfield(System.Int32)">
            <summary>Updates the acks bitfield and determines whether or not to handle the message.</summary>
            <param name="sequenceGap">The gap between the newly received sequence ID and the previously last received sequence ID.</param>
            <returns>Whether or not the message should be handled, based on whether or not it's a duplicate.</returns>
        </member>
        <member name="M:Riptide.Connection.UpdateDuplicateFilterBitfield(System.Int32)">
            <summary>Updates the duplicate filter bitfield and determines whether or not to handle the message.</summary>
            <param name="sequenceGap">The gap between the newly received sequence ID and the previously last received sequence ID.</param>
            <returns>Whether or not the message should be handled, based on whether or not it's a duplicate.</returns>
        </member>
        <member name="M:Riptide.Connection.UpdateReceivedAcks(System.UInt16,System.UInt16)">
            <summary>Updates which messages we've received acks for.</summary>
            <param name="remoteLastReceivedSeqId">The latest sequence ID that the other end has received.</param>
            <param name="remoteAcksBitField">A redundant list of sequence IDs that the other end has (or has not) received.</param>
        </member>
        <member name="M:Riptide.Connection.CheckMessageAckStatus(System.UInt16,System.UInt16)">
            <summary>Check the ack status of the given sequence ID.</summary>
            <param name="sequenceId">The sequence ID whose ack status to check.</param>
            <param name="bit">The bit corresponding to the sequence ID's position in the bit field.</param>
        </member>
        <member name="M:Riptide.Connection.AckMessage(System.UInt16)">
            <summary>Immediately marks the <see cref="T:Riptide.PendingMessage"/> of a given sequence ID as delivered.</summary>
            <param name="seqId">The sequence ID that was acknowledged.</param>
        </member>
        <member name="M:Riptide.Connection.SendAck(System.UInt16)">
            <summary>Sends an ack message for the given sequence ID.</summary>
            <param name="forSeqId">The sequence ID to acknowledge.</param>
        </member>
        <member name="M:Riptide.Connection.HandleAck(Riptide.Message)">
            <summary>Handles an ack message.</summary>
            <param name="message">The ack message to handle.</param>
        </member>
        <member name="M:Riptide.Connection.HandleAckExtra(Riptide.Message)">
            <summary>Handles an ack message for a sequence ID other than the last received one.</summary>
            <param name="message">The ack message to handle.</param>
        </member>
        <member name="M:Riptide.Connection.SendWelcome">
            <summary>Sends a welcome message.</summary>
        </member>
        <member name="M:Riptide.Connection.HandleWelcomeResponse(Riptide.Message)">
            <summary>Handles a welcome message on the server.</summary>
            <param name="message">The welcome message to handle.</param>
        </member>
        <member name="M:Riptide.Connection.HandleHeartbeat(Riptide.Message)">
            <summary>Handles a heartbeat message.</summary>
            <param name="message">The heartbeat message to handle.</param>
        </member>
        <member name="M:Riptide.Connection.RespondHeartbeat(System.Byte)">
            <summary>Sends a heartbeat message.</summary>
        </member>
        <member name="M:Riptide.Connection.HandleWelcome(Riptide.Message)">
            <summary>Handles a welcome message on the client.</summary>
            <param name="message">The welcome message to handle.</param>
        </member>
        <member name="M:Riptide.Connection.RespondWelcome">
            <summary>Sends a welcome response message.</summary>
        </member>
        <member name="M:Riptide.Connection.SendHeartbeat">
            <summary>Sends a heartbeat message.</summary>
        </member>
        <member name="M:Riptide.Connection.HandleHeartbeatResponse(Riptide.Message)">
            <summary>Handles a heartbeat message.</summary>
            <param name="message">The heartbeat message to handle.</param>
        </member>
        <member name="T:Riptide.ServerClientConnectedEventArgs">
            <summary>Contains event data for when a client connects to the server.</summary>
        </member>
        <member name="F:Riptide.ServerClientConnectedEventArgs.Client">
            <summary>The newly connected client.</summary>
        </member>
        <member name="M:Riptide.ServerClientConnectedEventArgs.#ctor(Riptide.Connection)">
            <summary>Initializes event data.</summary>
            <param name="client">The newly connected client.</param>
        </member>
        <member name="T:Riptide.ServerMessageReceivedEventArgs">
            <summary>Contains event data for when the server receives a message from a client.</summary>
        </member>
        <member name="F:Riptide.ServerMessageReceivedEventArgs.FromClient">
            <summary>The client from which the message was received.</summary>
        </member>
        <member name="F:Riptide.ServerMessageReceivedEventArgs.MessageId">
            <summary>The ID of the message.</summary>
        </member>
        <member name="F:Riptide.ServerMessageReceivedEventArgs.Message">
            <summary>The received message.</summary>
        </member>
        <member name="M:Riptide.ServerMessageReceivedEventArgs.#ctor(Riptide.Connection,System.UInt16,Riptide.Message)">
            <summary>Initializes event data.</summary>
            <param name="fromClient">The client from which the message was received.</param>
            <param name="messageId">The ID of the message.</param>
            <param name="message">The received message.</param>
        </member>
        <member name="T:Riptide.ClientDisconnectedEventArgs">
            <summary>Contains event data for when a client disconnects from the server.</summary>
        </member>
        <member name="F:Riptide.ClientDisconnectedEventArgs.Id">
            <summary>The numeric ID of the client that disconnected.</summary>
        </member>
        <member name="M:Riptide.ClientDisconnectedEventArgs.#ctor(System.UInt16)">
            <summary>Initializes event data.</summary>
            <param name="id">The numeric ID of the client that disconnected.</param>
        </member>
        <member name="T:Riptide.ClientConnectedEventArgs">
            <summary>Contains event data for when a new client connects.</summary>
        </member>
        <member name="F:Riptide.ClientConnectedEventArgs.Id">
            <summary>The numeric ID of the newly connected client.</summary>
        </member>
        <member name="M:Riptide.ClientConnectedEventArgs.#ctor(System.UInt16)">
            <summary>Initializes event data.</summary>
            <param name="id">The numeric ID of the newly connected client.</param>
        </member>
        <member name="T:Riptide.ClientMessageReceivedEventArgs">
            <summary>Contains event data for when the client receives a message from the server.</summary>
        </member>
        <member name="F:Riptide.ClientMessageReceivedEventArgs.MessageId">
            <summary>The ID of the message.</summary>
        </member>
        <member name="F:Riptide.ClientMessageReceivedEventArgs.Message">
            <summary>The received message.</summary>
        </member>
        <member name="M:Riptide.ClientMessageReceivedEventArgs.#ctor(System.UInt16,Riptide.Message)">
            <summary>Initializes event data.</summary>
            <param name="messageId">The ID of the message.</param>
            <param name="message">The received message.</param>
        </member>
        <member name="T:Riptide.DisconnectedEventArgs">
            <summary>Contains event data for when the client disconnects from a server.</summary>
        </member>
        <member name="F:Riptide.DisconnectedEventArgs.Reason">
            <summary>The reason for the disconnection.</summary>
        </member>
        <member name="F:Riptide.DisconnectedEventArgs.CustomMessage">
            <summary>The custom reason included with the disconnection information (if any).</summary>
        </member>
        <member name="M:Riptide.DisconnectedEventArgs.#ctor(Riptide.DisconnectReason,System.String)">
            <summary>Initializes event data.</summary>
            <param name="reason">The reason for the disconnection.</param>
            <param name="customMessage">The custom reason included with the disconnection information (if any).</param>
        </member>
        <member name="T:Riptide.InsufficientCapacityException">
            <summary>The exception that is thrown when a <see cref="T:Riptide.Message"/> does not contain enough unread bytes to add a certain value.</summary>
        </member>
        <member name="F:Riptide.InsufficientCapacityException.RiptideMessage">
            <summary>The message with insufficient remaining capacity.</summary>
        </member>
        <member name="F:Riptide.InsufficientCapacityException.TypeName">
            <summary>The name of the type which could not be added to the message.</summary>
        </member>
        <member name="F:Riptide.InsufficientCapacityException.RequiredBytes">
            <summary>The number of available bytes the type requires in order to be added successfully.</summary>
        </member>
        <member name="M:Riptide.InsufficientCapacityException.#ctor">
            <summary>Initializes a new <see cref="T:Riptide.InsufficientCapacityException"/> instance.</summary>
        </member>
        <member name="M:Riptide.InsufficientCapacityException.#ctor(System.String)">
            <summary>Initializes a new <see cref="T:Riptide.InsufficientCapacityException"/> instance with a specified error message.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Riptide.InsufficientCapacityException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new <see cref="T:Riptide.InsufficientCapacityException"/> instance with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. If <paramref name="inner"/> is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Riptide.InsufficientCapacityException.#ctor(Riptide.Message,System.String,System.Int32)">
            <summary>Initializes a new <see cref="T:Riptide.InsufficientCapacityException"/> instance and constructs an error message from the given information.</summary>
            <param name="message">The message with insufficient remaining capacity.</param>
            <param name="typeName">The name of the type which could not be added to the message.</param>
            <param name="requiredBytes">The number of available bytes required for the type to be added successfully.</param>
        </member>
        <member name="M:Riptide.InsufficientCapacityException.#ctor(Riptide.Message,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>Initializes a new <see cref="T:Riptide.InsufficientCapacityException"/> instance and constructs an error message from the given information.</summary>
            <param name="message">The message with insufficient remaining capacity.</param>
            <param name="arrayLength">The length of the array which could not be added to the message.</param>
            <param name="typeName">The name of the array's type.</param>
            <param name="requiredBytes">The number of available bytes required for a single element of the array to be added successfully.</param>
            <param name="totalRequiredBytes">The number of available bytes required for the entire array to be added successfully. If left as -1, this will be set to <paramref name="arrayLength"/> * <paramref name="requiredBytes"/>.</param>
        </member>
        <member name="M:Riptide.InsufficientCapacityException.GetErrorMessage(Riptide.Message,System.String,System.Int32)">
            <summary>Constructs the error message from the given information.</summary>
            <returns>The error message.</returns>
        </member>
        <member name="M:Riptide.InsufficientCapacityException.GetErrorMessage(Riptide.Message,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>Constructs the error message from the given information.</summary>
            <returns>The error message.</returns>
        </member>
        <member name="T:Riptide.NonStaticHandlerException">
            <summary>The exception that is thrown when a method with a <see cref="T:Riptide.MessageHandlerAttribute"/> is not marked as <see langword="static"/>.</summary>
        </member>
        <member name="F:Riptide.NonStaticHandlerException.DeclaringType">
            <summary>The type containing the handler method.</summary>
        </member>
        <member name="F:Riptide.NonStaticHandlerException.HandlerMethodName">
            <summary>The name of the handler method.</summary>
        </member>
        <member name="M:Riptide.NonStaticHandlerException.#ctor">
            <summary>Initializes a new <see cref="T:Riptide.NonStaticHandlerException"/> instance.</summary>
        </member>
        <member name="M:Riptide.NonStaticHandlerException.#ctor(System.String)">
            <summary>Initializes a new <see cref="T:Riptide.NonStaticHandlerException"/> instance with a specified error message.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Riptide.NonStaticHandlerException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new <see cref="T:Riptide.NonStaticHandlerException"/> instance with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. If <paramref name="inner"/> is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Riptide.NonStaticHandlerException.#ctor(System.Type,System.String)">
            <summary>Initializes a new <see cref="T:Riptide.NonStaticHandlerException"/> instance and constructs an error message from the given information.</summary>
            <param name="declaringType">The type containing the handler method.</param>
            <param name="handlerMethodName">The name of the handler method.</param>
        </member>
        <member name="M:Riptide.NonStaticHandlerException.GetErrorMessage(System.Type,System.String)">
            <summary>Constructs the error message from the given information.</summary>
            <returns>The error message.</returns>
        </member>
        <member name="T:Riptide.InvalidHandlerSignatureException">
            <summary>The exception that is thrown when a method with a <see cref="T:Riptide.MessageHandlerAttribute"/> does not have an acceptable message handler method signature (either <see cref="T:Riptide.Server.MessageHandler"/> or <see cref="T:Riptide.Client.MessageHandler"/>).</summary>
        </member>
        <member name="F:Riptide.InvalidHandlerSignatureException.DeclaringType">
            <summary>The type containing the handler method.</summary>
        </member>
        <member name="F:Riptide.InvalidHandlerSignatureException.HandlerMethodName">
            <summary>The name of the handler method.</summary>
        </member>
        <member name="M:Riptide.InvalidHandlerSignatureException.#ctor">
            <summary>Initializes a new <see cref="T:Riptide.InvalidHandlerSignatureException"/> instance.</summary>
        </member>
        <member name="M:Riptide.InvalidHandlerSignatureException.#ctor(System.String)">
            <summary>Initializes a new <see cref="T:Riptide.InvalidHandlerSignatureException"/> instance with a specified error message.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Riptide.InvalidHandlerSignatureException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new <see cref="T:Riptide.InvalidHandlerSignatureException"/> instance with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. If <paramref name="inner"/> is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Riptide.InvalidHandlerSignatureException.#ctor(System.Type,System.String)">
            <summary>Initializes a new <see cref="T:Riptide.InvalidHandlerSignatureException"/> instance and constructs an error message from the given information.</summary>
            <param name="declaringType">The type containing the handler method.</param>
            <param name="handlerMethodName">The name of the handler method.</param>
        </member>
        <member name="M:Riptide.InvalidHandlerSignatureException.GetErrorMessage(System.Type,System.String)">
            <summary>Constructs the error message from the given information.</summary>
            <returns>The error message.</returns>
        </member>
        <member name="T:Riptide.DuplicateHandlerException">
            <summary>The exception that is thrown when multiple methods with <see cref="T:Riptide.MessageHandlerAttribute"/>s are set to handle messages with the same ID <i>and</i> have the same method signature.</summary>
        </member>
        <member name="F:Riptide.DuplicateHandlerException.Id">
            <summary>The message ID with multiple handler methods.</summary>
        </member>
        <member name="F:Riptide.DuplicateHandlerException.DeclaringType1">
            <summary>The type containing the first handler method.</summary>
        </member>
        <member name="F:Riptide.DuplicateHandlerException.HandlerMethodName1">
            <summary>The name of the first handler method.</summary>
        </member>
        <member name="F:Riptide.DuplicateHandlerException.DeclaringType2">
            <summary>The type containing the second handler method.</summary>
        </member>
        <member name="F:Riptide.DuplicateHandlerException.HandlerMethodName2">
            <summary>The name of the second handler method.</summary>
        </member>
        <member name="M:Riptide.DuplicateHandlerException.#ctor">
            <summary>Initializes a new <see cref="T:Riptide.DuplicateHandlerException"/> instance with a specified error message.</summary>
        </member>
        <member name="M:Riptide.DuplicateHandlerException.#ctor(System.String)">
            <summary>Initializes a new <see cref="T:Riptide.DuplicateHandlerException"/> instance with a specified error message.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Riptide.DuplicateHandlerException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new <see cref="T:Riptide.DuplicateHandlerException"/> instance with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. If <paramref name="inner"/> is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Riptide.DuplicateHandlerException.#ctor(System.UInt16,System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>Initializes a new <see cref="T:Riptide.DuplicateHandlerException"/> instance and constructs an error message from the given information.</summary>
            <param name="id">The message ID with multiple handler methods.</param>
            <param name="method1">The first handler method's info.</param>
            <param name="method2">The second handler method's info.</param>
        </member>
        <member name="M:Riptide.DuplicateHandlerException.GetErrorMessage(System.UInt16,System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>Constructs the error message from the given information.</summary>
            <returns>The error message.</returns>
        </member>
        <member name="T:Riptide.IMessageSerializable">
            <summary>Represents a type that can be added to and retrieved from messages using the <see cref="M:Riptide.Message.AddSerializable``1(``0)"/> and <see cref="M:Riptide.Message.GetSerializable``1"/> methods.</summary>
        </member>
        <member name="M:Riptide.IMessageSerializable.Serialize(Riptide.Message)">
            <summary>Adds the type to the message.</summary>
            <param name="message">The message to add the type to.</param>
        </member>
        <member name="M:Riptide.IMessageSerializable.Deserialize(Riptide.Message)">
            <summary>Retrieves the type from the message.</summary>
            <param name="message">The message to retrieve the type from.</param>
        </member>
        <member name="T:Riptide.MessageSendMode">
            <summary>The send mode of a <see cref="T:Riptide.Message"/>.</summary>
        </member>
        <member name="F:Riptide.MessageSendMode.unreliable">
            <summary>Unreliable send mode.</summary>
        </member>
        <member name="F:Riptide.MessageSendMode.reliable">
            <summary>Reliable send mode.</summary>
        </member>
        <member name="T:Riptide.Message">
            <summary>Provides functionality for converting data to bytes and vice versa.</summary>
        </member>
        <member name="F:Riptide.Message.HeaderSize">
            <summary>The number of bytes required for a message's header.</summary>
            <remarks>
                <para>1 byte for the actual header; 2 bytes for the message ID.</para>
                <b>NOTE:</b> Various transports may add additional bytes when sending messages, so this value may not reflect the true size of the header that is actually sent. For example, Riptide's default RUDP transport inserts an extra 2 bytes for the message's sequence ID when sending reliable messages, but this is not (and should not be) reflected in this value.
            </remarks>
        </member>
        <member name="P:Riptide.Message.MaxSize">
            <summary>The maximum number of bytes that a message can contain, including the <see cref="F:Riptide.Message.HeaderSize"/>.</summary>
        </member>
        <member name="P:Riptide.Message.MaxPayloadSize">
            <summary>The maximum number of bytes of payload data that a message can contain. This value represents how many bytes can be added to a message <i>on top of</i> the <see cref="F:Riptide.Message.HeaderSize"/>.</summary>
        </member>
        <member name="P:Riptide.Message.InstancesPerPeer">
            <summary>How many messages to add to the pool for each <see cref="T:Riptide.Server"/> or <see cref="T:Riptide.Client"/> instance that is started.</summary>
            <remarks>Changes will not affect <see cref="T:Riptide.Server"/> and <see cref="T:Riptide.Client"/> instances which are already running until they are restarted.</remarks>
        </member>
        <member name="F:Riptide.Message.pool">
            <summary>A pool of reusable message instances.</summary>
        </member>
        <member name="P:Riptide.Message.SendMode">
            <summary>The message's send mode.</summary>
        </member>
        <member name="P:Riptide.Message.MaxSendAttempts">
            <summary>How often to try sending the message before giving up.</summary>
            <remarks>The default RUDP transport only uses this when sending messages with their <see cref="P:Riptide.Message.SendMode"/> set to <see cref="F:Riptide.MessageSendMode.reliable"/>. Other transports may ignore this property entirely.</remarks>
        </member>
        <member name="P:Riptide.Message.UnreadLength">
            <summary>The length in bytes of the unread data contained in the message.</summary>
        </member>
        <member name="P:Riptide.Message.WrittenLength">
            <summary>The length in bytes of the data that has been written to the message.</summary>
        </member>
        <member name="P:Riptide.Message.UnwrittenLength">
            <summary>How many more bytes can be written into the packet.</summary>
        </member>
        <member name="P:Riptide.Message.Bytes">
            <summary>The message's data.</summary>
        </member>
        <member name="F:Riptide.Message.writePos">
            <summary>The position in the byte array that the next bytes will be written to.</summary>
        </member>
        <member name="F:Riptide.Message.readPos">
            <summary>The position in the byte array that the next bytes will be read from.</summary>
        </member>
        <member name="M:Riptide.Message.#ctor(System.Int32)">
            <summary>Initializes a reusable <see cref="T:Riptide.Message"/> instance.</summary>
            <param name="maxSize">The maximum amount of bytes the message can contain.</param>
        </member>
        <member name="M:Riptide.Message.TrimPool">
            <summary>Trims the message pool to a more appropriate size for how many <see cref="T:Riptide.Server"/> and/or <see cref="T:Riptide.Client"/> instances are currently running.</summary>
        </member>
        <member name="M:Riptide.Message.Create">
            <summary>Gets a usable message instance.</summary>
            <returns>A message instance ready to be used.</returns>
        </member>
        <member name="M:Riptide.Message.Create(Riptide.MessageSendMode,System.UInt16,System.Int32,System.Boolean)">
            <summary>Gets a message instance that can be used for sending.</summary>
            <param name="sendMode">The mode in which the message should be sent.</param>
            <param name="id">The message ID.</param>
            <param name="maxSendAttempts">How often to try sending the message before giving up.</param>
            <param name="shouldAutoRelay">Whether or not <see cref="T:Riptide.Server"/> instances should automatically relay this message to all other clients. This has no effect when <see cref="P:Riptide.Server.AllowAutoMessageRelay"/> is set to <see langword="false"/> and does not affect how clients handle messages.</param>
            <returns>A message instance ready to be used for sending.</returns>
        </member>
        <member name="M:Riptide.Message.Create(Riptide.MessageSendMode,System.Enum,System.Int32,System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.Create(Riptide.MessageSendMode,System.UInt16,System.Int32,System.Boolean)"/>
            <remarks>NOTE: <paramref name="id"/> will be cast to a <see cref="T:System.UInt16"/>. You should ensure that its value never exceeds that of <see cref="F:System.UInt16.MaxValue"/>, otherwise you'll encounter unexpected behaviour when handling messages.</remarks>
        </member>
        <member name="M:Riptide.Message.Create(Riptide.Transports.HeaderType,System.Int32)">
            <summary>Gets a message instance that can be used for sending.</summary>
            <param name="messageHeader">The message's header type.</param>
            <param name="maxSendAttempts">How often to try sending the message before giving up.</param>
            <returns>A message instance ready to be used for sending.</returns>
        </member>
        <member name="M:Riptide.Message.CreateRaw">
            <summary>Gets a message instance directly from the pool without doing any extra setup.</summary>
            <remarks>As this message instance is returned straight from the pool, it will contain all previous data and settings. Using this instance without preparing it properly will likely result in unexpected behaviour.</remarks>
            <returns>A message instance.</returns>
        </member>
        <member name="M:Riptide.Message.RetrieveFromPool">
            <summary>Retrieves a message instance from the pool. If none is available, a new instance is created.</summary>
            <returns>A message instance ready to be used for sending or handling.</returns>
        </member>
        <member name="M:Riptide.Message.Release">
            <summary>Returns the message instance to the internal pool so it can be reused.</summary>
        </member>
        <member name="M:Riptide.Message.PrepareForUse">
            <summary>Prepares the message to be used.</summary>
            <returns>The message, ready to be used.</returns>
        </member>
        <member name="M:Riptide.Message.PrepareForUse(Riptide.Transports.HeaderType,System.Int32)">
            <summary>Prepares the message to be used for sending.</summary>
            <param name="messageHeader">The header of the message.</param>
            <param name="maxSendAttempts">How often to try sending the message before giving up.</param>
            <returns>The message, ready to be used for sending.</returns>
        </member>
        <member name="M:Riptide.Message.PrepareForUse(Riptide.Transports.HeaderType,System.UInt16)">
            <summary>Prepares the message to be used for handling.</summary>
            <param name="messageHeader">The header of the message.</param>
            <param name="contentLength">The number of bytes that this message contains and which can be retrieved.</param>
            <returns>The message, ready to be used for handling.</returns>
        </member>
        <member name="M:Riptide.Message.SetReadWritePos(System.UInt16,System.UInt16)">
            <summary>Sets the message's read and write position.</summary>
            <param name="newReadPos">The new read position.</param>
            <param name="newWritePos">The new write position.</param>
        </member>
        <member name="M:Riptide.Message.SetHeader(Riptide.Transports.HeaderType)">
            <summary>Sets the message's header byte to the given <paramref name="messageHeader"/> and determines the appropriate <see cref="T:Riptide.MessageSendMode"/>.</summary>
            <param name="messageHeader">The header to use for this message.</param>
        </member>
        <member name="M:Riptide.Message.AddByte(System.Byte)">
            <summary>Adds a single <see cref="T:System.Byte"/> to the message.</summary>
            <param name="value">The <see cref="T:System.Byte"/> to add.</param>
            <returns>The message that the <see cref="T:System.Byte"/> was added to.</returns>
        </member>
        <member name="M:Riptide.Message.AddSByte(System.SByte)">
            <summary>Adds a single <see cref="T:System.SByte"/> to the message.</summary>
            <param name="value">The <see cref="T:System.SByte"/> to add.</param>
            <returns>The message that the <see cref="T:System.SByte"/> was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetByte">
            <summary>Retrieves a single <see cref="T:System.Byte"/> from the message.</summary>
            <returns>The <see cref="T:System.Byte"/> that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetSByte">
            <summary>Retrieves a single <see cref="T:System.SByte"/> from the message.</summary>
            <returns>The <see cref="T:System.SByte"/> that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.AddBytes(System.Byte[],System.Boolean)">
            <summary>Adds a <see cref="T:System.Byte"/> array to the message.</summary>
            <param name="array">The array to add.</param>
            <param name="includeLength">Whether or not to include the length of the array in the message.</param>
            <returns>The message that the array was added to.</returns>
        </member>
        <member name="M:Riptide.Message.AddSBytes(System.SByte[],System.Boolean)">
            <summary>Adds an <see cref="T:System.SByte"/> array to the message.</summary>
            <param name="array">The array to add.</param>
            <param name="includeLength">Whether or not to include the length of the array in the message.</param>
            <returns>The message that the array was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetBytes">
            <summary>Retrieves a <see cref="T:System.Byte"/> array from the message.</summary>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetBytes(System.Int32)">
            <summary>Retrieves a <see cref="T:System.Byte"/> array from the message.</summary>
            <param name="amount">The amount of bytes to retrieve.</param>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetBytes(System.Int32,System.Byte[],System.Int32)">
            <summary>Populates a <see cref="T:System.Byte"/> array with bytes retrieved from the message.</summary>
            <param name="amount">The amount of bytes to retrieve.</param>
            <param name="intoArray">The array to populate.</param>
            <param name="startIndex">The position at which to start populating the array.</param>
        </member>
        <member name="M:Riptide.Message.GetSBytes">
            <summary>Retrieves an <see cref="T:System.SByte"/> array from the message.</summary>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetSBytes(System.Int32)">
            <summary>Retrieves an <see cref="T:System.SByte"/> array from the message.</summary>
            <param name="amount">The amount of sbytes to retrieve.</param>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetSBytes(System.Int32,System.SByte[],System.Int32)">
            <summary>Populates a <see cref="T:System.SByte"/> array with bytes retrieved from the message.</summary>
            <param name="amount">The amount of sbytes to retrieve.</param>
            <param name="intArray">The array to populate.</param>
            <param name="startIndex">The position at which to start populating <paramref name="intArray"/>.</param>
        </member>
        <member name="M:Riptide.Message.ReadBytes(System.Int32,System.Byte[],System.Int32)">
            <summary>Reads a number of bytes from the message and writes them into the given array.</summary>
            <param name="amount">The amount of bytes to read.</param>
            <param name="intoArray">The array to write the bytes into.</param>
            <param name="startIndex">The position at which to start writing into the array.</param>
        </member>
        <member name="M:Riptide.Message.ReadSBytes(System.Int32,System.SByte[],System.Int32)">
            <summary>Reads a number of sbytes from the message and writes them into the given array.</summary>
            <param name="amount">The amount of sbytes to read.</param>
            <param name="intoArray">The array to write the sbytes into.</param>
            <param name="startIndex">The position at which to start writing into the array.</param>
        </member>
        <member name="M:Riptide.Message.AddBool(System.Boolean)">
            <summary>Adds a <see cref="T:System.Boolean"/> to the message.</summary>
            <param name="value">The <see cref="T:System.Boolean"/> to add.</param>
            <returns>The message that the <see cref="T:System.Boolean"/> was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetBool">
            <summary>Retrieves a <see cref="T:System.Boolean"/> from the message.</summary>
            <returns>The <see cref="T:System.Boolean"/> that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.AddBools(System.Boolean[],System.Boolean)">
            <summary>Adds a <see cref="T:System.Boolean"/> array to the message.</summary>
            <param name="array">The array to add.</param>
            <param name="includeLength">Whether or not to include the length of the array in the message.</param>
            <returns>The message that the array was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetBools">
            <summary>Retrieves a <see cref="T:System.Boolean"/> array from the message.</summary>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetBools(System.Int32)">
            <summary>Retrieves a <see cref="T:System.Boolean"/> array from the message.</summary>
            <param name="amount">The amount of bools to retrieve.</param>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetBools(System.Int32,System.Boolean[],System.Int32)">
            <summary>Populates a <see cref="T:System.Boolean"/> array with bools retrieved from the message.</summary>
            <param name="amount">The amount of bools to retrieve.</param>
            <param name="intoArray">The array to populate.</param>
            <param name="startIndex">The position at which to start populating the array.</param>
        </member>
        <member name="M:Riptide.Message.ReadBools(System.Int32,System.Boolean[],System.Int32)">
            <summary>Reads a number of bools from the message and writes them into the given array.</summary>
            <param name="byteAmount">The number of bytes the bools are being stored in.</param>
            <param name="intoArray">The array to write the bools into.</param>
            <param name="startIndex">The position at which to start writing into the array.</param>
        </member>
        <member name="M:Riptide.Message.AddShort(System.Int16)">
            <summary>Adds a <see cref="T:System.Int16"/> to the message.</summary>
            <param name="value">The <see cref="T:System.Int16"/> to add.</param>
            <returns>The message that the <see cref="T:System.Int16"/> was added to.</returns>
        </member>
        <member name="M:Riptide.Message.AddUShort(System.UInt16)">
            <summary>Adds a <see cref="T:System.UInt16"/> to the message.</summary>
            <param name="value">The <see cref="T:System.UInt16"/> to add.</param>
            <returns>The message that the <see cref="T:System.UInt16"/> was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetShort">
            <summary>Retrieves a <see cref="T:System.Int16"/> from the message.</summary>
            <returns>The <see cref="T:System.Int16"/> that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetUShort">
            <summary>Retrieves a <see cref="T:System.UInt16"/> from the message.</summary>
            <returns>The <see cref="T:System.UInt16"/> that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.AddShorts(System.Int16[],System.Boolean)">
            <summary>Adds a <see cref="T:System.Int16"/> array to the message.</summary>
            <param name="array">The array to add.</param>
            <param name="includeLength">Whether or not to include the length of the array in the message.</param>
            <returns>The message that the array was added to.</returns>
        </member>
        <member name="M:Riptide.Message.AddUShorts(System.UInt16[],System.Boolean)">
            <summary>Adds a <see cref="T:System.UInt16"/> array to the message.</summary>
            <param name="array">The array to add.</param>
            <param name="includeLength">Whether or not to include the length of the array in the message.</param>
            <returns>The message that the array was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetShorts">
            <summary>Retrieves a <see cref="T:System.Int16"/> array from the message.</summary>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetShorts(System.Int32)">
            <summary>Retrieves a <see cref="T:System.Int16"/> array from the message.</summary>
            <param name="amount">The amount of shorts to retrieve.</param>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetShorts(System.Int32,System.Int16[],System.Int32)">
            <summary>Populates a <see cref="T:System.Int16"/> array with shorts retrieved from the message.</summary>
            <param name="amount">The amount of shorts to retrieve.</param>
            <param name="intoArray">The array to populate.</param>
            <param name="startIndex">The position at which to start populating the array.</param>
        </member>
        <member name="M:Riptide.Message.GetUShorts">
            <summary>Retrieves a <see cref="T:System.UInt16"/> array from the message.</summary>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetUShorts(System.Int32)">
            <summary>Retrieves a <see cref="T:System.UInt16"/> array from the message.</summary>
            <param name="amount">The amount of ushorts to retrieve.</param>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetUShorts(System.Int32,System.UInt16[],System.Int32)">
            <summary>Populates a <see cref="T:System.UInt16"/> array with ushorts retrieved from the message.</summary>
            <param name="amount">The amount of ushorts to retrieve.</param>
            <param name="intoArray">The array to populate.</param>
            <param name="startIndex">The position at which to start populating the array.</param>
        </member>
        <member name="M:Riptide.Message.ReadShorts(System.Int32,System.Int16[],System.Int32)">
            <summary>Reads a number of shorts from the message and writes them into the given array.</summary>
            <param name="amount">The amount of shorts to read.</param>
            <param name="intoArray">The array to write the shorts into.</param>
            <param name="startIndex">The position at which to start writing into the array.</param>
        </member>
        <member name="M:Riptide.Message.ReadUShorts(System.Int32,System.UInt16[],System.Int32)">
            <summary>Reads a number of ushorts from the message and writes them into the given array.</summary>
            <param name="amount">The amount of ushorts to read.</param>
            <param name="intoArray">The array to write the ushorts into.</param>
            <param name="startIndex">The position at which to start writing into the array.</param>
        </member>
        <member name="M:Riptide.Message.AddInt(System.Int32)">
            <summary>Adds an <see cref="T:System.Int32"/> to the message.</summary>
            <param name="value">The <see cref="T:System.Int32"/> to add.</param>
            <returns>The message that the <see cref="T:System.Int32"/> was added to.</returns>
        </member>
        <member name="M:Riptide.Message.AddUInt(System.UInt32)">
            <summary>Adds a <see cref="T:System.UInt32"/> to the message.</summary>
            <param name="value">The <see cref="T:System.UInt32"/> to add.</param>
            <returns>The message that the <see cref="T:System.UInt32"/> was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetInt">
            <summary>Retrieves an <see cref="T:System.Int32"/> from the message.</summary>
            <returns>The <see cref="T:System.Int32"/> that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetUInt">
            <summary>Retrieves a <see cref="T:System.UInt32"/> from the message.</summary>
            <returns>The <see cref="T:System.UInt32"/> that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.AddInts(System.Int32[],System.Boolean)">
            <summary>Adds an <see cref="T:System.Int32"/> array message.</summary>
            <param name="array">The array to add.</param>
            <param name="includeLength">Whether or not to include the length of the array in the message.</param>
            <returns>The message that the array was added to.</returns>
        </member>
        <member name="M:Riptide.Message.AddUInts(System.UInt32[],System.Boolean)">
            <summary>Adds a <see cref="T:System.UInt32"/> array to the message.</summary>
            <param name="array">The array to add.</param>
            <param name="includeLength">Whether or not to include the length of the array in the message.</param>
            <returns>The message that the array was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetInts">
            <summary>Retrieves an <see cref="T:System.Int32"/> array from the message.</summary>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetInts(System.Int32)">
            <summary>Retrieves an <see cref="T:System.Int32"/> array from the message.</summary>
            <param name="amount">The amount of ints to retrieve.</param>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetInts(System.Int32,System.Int32[],System.Int32)">
            <summary>Populates an <see cref="T:System.Int32"/> array with ints retrieved from the message.</summary>
            <param name="amount">The amount of ints to retrieve.</param>
            <param name="intoArray">The array to populate.</param>
            <param name="startIndex">The position at which to start populating the array.</param>
        </member>
        <member name="M:Riptide.Message.GetUInts">
            <summary>Retrieves a <see cref="T:System.UInt32"/> array from the message.</summary>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetUInts(System.Int32)">
            <summary>Retrieves a <see cref="T:System.UInt32"/> array from the message.</summary>
            <param name="amount">The amount of uints to retrieve.</param>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetUInts(System.Int32,System.UInt32[],System.Int32)">
            <summary>Populates a <see cref="T:System.UInt32"/> array with uints retrieved from the message.</summary>
            <param name="amount">The amount of uints to retrieve.</param>
            <param name="intoArray">The array to populate.</param>
            <param name="startIndex">The position at which to start populating the array.</param>
        </member>
        <member name="M:Riptide.Message.ReadInts(System.Int32,System.Int32[],System.Int32)">
            <summary>Reads a number of ints from the message and writes them into the given array.</summary>
            <param name="amount">The amount of ints to read.</param>
            <param name="intoArray">The array to write the ints into.</param>
            <param name="startIndex">The position at which to start writing into the array.</param>
        </member>
        <member name="M:Riptide.Message.ReadUInts(System.Int32,System.UInt32[],System.Int32)">
            <summary>Reads a number of uints from the message and writes them into the given array.</summary>
            <param name="amount">The amount of uints to read.</param>
            <param name="intoArray">The array to write the uints into.</param>
            <param name="startIndex">The position at which to start writing into the array.</param>
        </member>
        <member name="M:Riptide.Message.AddLong(System.Int64)">
            <summary>Adds a <see cref="T:System.Int64"/> to the message.</summary>
            <param name="value">The <see cref="T:System.Int64"/> to add.</param>
            <returns>The message that the <see cref="T:System.Int64"/> was added to.</returns>
        </member>
        <member name="M:Riptide.Message.AddULong(System.UInt64)">
            <summary>Adds a <see cref="T:System.UInt64"/> to the message.</summary>
            <param name="value">The <see cref="T:System.UInt64"/> to add.</param>
            <returns>The message that the <see cref="T:System.UInt64"/> was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetLong">
            <summary>Retrieves a <see cref="T:System.Int64"/> from the message.</summary>
            <returns>The <see cref="T:System.Int64"/> that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetULong">
            <summary>Retrieves a <see cref="T:System.UInt64"/> from the message.</summary>
            <returns>The <see cref="T:System.UInt64"/> that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.AddLongs(System.Int64[],System.Boolean)">
            <summary>Adds a <see cref="T:System.Int64"/> array to the message.</summary>
            <param name="array">The array to add.</param>
            <param name="includeLength">Whether or not to include the length of the array in the message.</param>
            <returns>The message that the array was added to.</returns>
        </member>
        <member name="M:Riptide.Message.AddULongs(System.UInt64[],System.Boolean)">
            <summary>Adds a <see cref="T:System.UInt64"/> array to the message.</summary>
            <param name="array">The array to add.</param>
            <param name="includeLength">Whether or not to include the length of the array in the message.</param>
            <returns>The message that the array was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetLongs">
            <summary>Retrieves a <see cref="T:System.Int64"/> array from the message.</summary>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetLongs(System.Int32)">
            <summary>Retrieves a <see cref="T:System.Int64"/> array from the message.</summary>
            <param name="amount">The amount of longs to retrieve.</param>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetLongs(System.Int32,System.Int64[],System.Int32)">
            <summary>Populates a <see cref="T:System.Int64"/> array with longs retrieved from the message.</summary>
            <param name="amount">The amount of longs to retrieve.</param>
            <param name="intoArray">The array to populate.</param>
            <param name="startIndex">The position at which to start populating the array.</param>
        </member>
        <member name="M:Riptide.Message.GetULongs">
            <summary>Retrieves a <see cref="T:System.UInt64"/> array from the message.</summary>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetULongs(System.Int32)">
            <summary>Retrieves a <see cref="T:System.UInt64"/> array from the message.</summary>
            <param name="amount">The amount of ulongs to retrieve.</param>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetULongs(System.Int32,System.UInt64[],System.Int32)">
            <summary>Populates a <see cref="T:System.UInt64"/> array with ulongs retrieved from the message.</summary>
            <param name="amount">The amount of ulongs to retrieve.</param>
            <param name="intoArray">The array to populate.</param>
            <param name="startIndex">The position at which to start populating the array.</param>
        </member>
        <member name="M:Riptide.Message.ReadLongs(System.Int32,System.Int64[],System.Int32)">
            <summary>Reads a number of longs from the message and writes them into the given array.</summary>
            <param name="amount">The amount of longs to read.</param>
            <param name="intoArray">The array to write the longs into.</param>
            <param name="startIndex">The position at which to start writing into the array.</param>
        </member>
        <member name="M:Riptide.Message.ReadULongs(System.Int32,System.UInt64[],System.Int32)">
            <summary>Reads a number of ulongs from the message and writes them into the given array.</summary>
            <param name="amount">The amount of ulongs to read.</param>
            <param name="intoArray">The array to write the ulongs into.</param>
            <param name="startIndex">The position at which to start writing into the array.</param>
        </member>
        <member name="M:Riptide.Message.AddFloat(System.Single)">
            <summary>Adds a <see cref="T:System.Single"/> to the message.</summary>
            <param name="value">The <see cref="T:System.Single"/> to add.</param>
            <returns>The message that the <see cref="T:System.Single"/> was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetFloat">
            <summary>Retrieves a <see cref="T:System.Single"/> from the message.</summary>
            <returns>The <see cref="T:System.Single"/> that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.AddFloats(System.Single[],System.Boolean)">
            <summary>Adds a <see cref="T:System.Single"/> array to the message.</summary>
            <param name="array">The array to add.</param>
            <param name="includeLength">Whether or not to include the length of the array in the message.</param>
            <returns>The message that the array was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetFloats">
            <summary>Retrieves a <see cref="T:System.Single"/> array from the message.</summary>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetFloats(System.Int32)">
            <summary>Retrieves a <see cref="T:System.Single"/> array from the message.</summary>
            <param name="amount">The amount of floats to retrieve.</param>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetFloats(System.Int32,System.Single[],System.Int32)">
            <summary>Populates a <see cref="T:System.Single"/> array with floats retrieved from the message.</summary>
            <param name="amount">The amount of floats to retrieve.</param>
            <param name="intoArray">The array to populate.</param>
            <param name="startIndex">The position at which to start populating the array.</param>
        </member>
        <member name="M:Riptide.Message.ReadFloats(System.Int32,System.Single[],System.Int32)">
            <summary>Reads a number of floats from the message and writes them into the given array.</summary>
            <param name="amount">The amount of floats to read.</param>
            <param name="intoArray">The array to write the floats into.</param>
            <param name="startIndex">The position at which to start writing into the array.</param>
        </member>
        <member name="M:Riptide.Message.AddDouble(System.Double)">
            <summary>Adds a <see cref="T:System.Double"/> to the message.</summary>
            <param name="value">The <see cref="T:System.Double"/> to add.</param>
            <returns>The message that the <see cref="T:System.Double"/> was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetDouble">
            <summary>Retrieves a <see cref="T:System.Double"/> from the message.</summary>
            <returns>The <see cref="T:System.Double"/> that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.AddDoubles(System.Double[],System.Boolean)">
            <summary>Adds a <see cref="T:System.Double"/> array to the message.</summary>
            <param name="array">The array to add.</param>
            <param name="includeLength">Whether or not to include the length of the array in the message.</param>
            <returns>The message that the array was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetDoubles">
            <summary>Retrieves a <see cref="T:System.Double"/> array from the message.</summary>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetDoubles(System.Int32)">
            <summary>Retrieves a <see cref="T:System.Double"/> array from the message.</summary>
            <param name="amount">The amount of doubles to retrieve.</param>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetDoubles(System.Int32,System.Double[],System.Int32)">
            <summary>Populates a <see cref="T:System.Double"/> array with doubles retrieved from the message.</summary>
            <param name="amount">The amount of doubles to retrieve.</param>
            <param name="intoArray">The array to populate.</param>
            <param name="startIndex">The position at which to start populating the array.</param>
        </member>
        <member name="M:Riptide.Message.ReadDoubles(System.Int32,System.Double[],System.Int32)">
            <summary>Reads a number of doubles from the message and writes them into the given array.</summary>
            <param name="amount">The amount of doubles to read.</param>
            <param name="intoArray">The array to write the doubles into.</param>
            <param name="startIndex">The position at which to start writing into the array.</param>
        </member>
        <member name="M:Riptide.Message.AddString(System.String)">
            <summary>Adds a <see cref="T:System.String"/> to the message.</summary>
            <param name="value">The <see cref="T:System.String"/> to add.</param>
            <returns>The message that the <see cref="T:System.String"/> was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetString">
            <summary>Retrieves a <see cref="T:System.String"/> from the message.</summary>
            <returns>The <see cref="T:System.String"/> that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.AddStrings(System.String[],System.Boolean)">
            <summary>Adds a <see cref="T:System.String"/> array to the message.</summary>
            <param name="array">The array to add.</param>
            <param name="includeLength">Whether or not to include the length of the array in the message.</param>
            <returns>The message that the array was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetStrings">
            <summary>Retrieves a <see cref="T:System.String"/> array from the message.</summary>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetStrings(System.Int32)">
            <summary>Retrieves a <see cref="T:System.String"/> array from the message.</summary>
            <param name="amount">The amount of strings to retrieve.</param>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetStrings(System.Int32,System.String[],System.Int32)">
            <summary>Populates a <see cref="T:System.String"/> array with strings retrieved from the message.</summary>
            <param name="amount">The amount of strings to retrieve.</param>
            <param name="intoArray">The array to populate.</param>
            <param name="startIndex">The position at which to start populating the array.</param>
        </member>
        <member name="F:Riptide.Message.OneByteLengthThreshold">
            <summary>The maximum number of elements an array can contain where the length still fits into a single byte.</summary>
        </member>
        <member name="F:Riptide.Message.TwoByteLengthThreshold">
            <summary>The maximum number of elements an array can contain where the length still fits into two byte2.</summary>
        </member>
        <member name="M:Riptide.Message.AddArrayLength(System.Int32)">
            <summary>Adds the length of an array to the message, using either 1 or 2 bytes depending on how large the array is. Does not support arrays with more than 32,767 elements.</summary>
            <param name="length">The length of the array.</param>
        </member>
        <member name="M:Riptide.Message.GetArrayLength">
            <summary>Retrieves the length of an array from the message, using either 1 or 2 bytes depending on how large the array is.</summary>
            <returns>The length of the array.</returns>
        </member>
        <member name="M:Riptide.Message.AddSerializable``1(``0)">
            <summary>Adds a serializable to the message.</summary>
            <param name="value">The serializable to add.</param>
            <returns>The message that the serializable was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetSerializable``1">
            <summary>Retrieves a serializable from the message.</summary>
            <returns>The serializable that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.AddSerializables``1(``0[],System.Boolean)">
            <summary>Adds an array of serializables to the message.</summary>
            <param name="array">The array to add.</param>
            <param name="includeLength">Whether or not to include the length of the array in the message.</param>
            <returns>The message that the array was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetSerializables``1">
            <summary>Retrieves an array of serializables from the message.</summary>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetSerializables``1(System.Int32)">
            <summary>Retrieves an array of serializables from the message.</summary>
            <param name="amount">The amount of serializables to retrieve.</param>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetSerializables``1(System.Int32,``0[],System.Int32)">
            <summary>Populates an array of serializables retrieved from the message.</summary>
            <param name="amount">The amount of serializables to retrieve.</param>
            <param name="intoArray">The array to populate.</param>
            <param name="startIndex">The position at which to start populating the array.</param>
        </member>
        <member name="M:Riptide.Message.ReadSerializables``1(System.Int32,``0[],System.Int32)">
            <summary>Reads a number of serializables from the message and writes them into the given array.</summary>
            <param name="amount">The amount of serializables to read.</param>
            <param name="intArray">The array to write the serializables into.</param>
            <param name="startIndex">The position at which to start writing into <paramref name="intArray"/>.</param>
        </member>
        <member name="M:Riptide.Message.Add(System.Byte)">
            <inheritdoc cref="M:Riptide.Message.AddByte(System.Byte)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddByte(System.Byte)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.SByte)">
            <inheritdoc cref="M:Riptide.Message.AddSByte(System.SByte)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddSByte(System.SByte)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddBool(System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddBool(System.Boolean)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.Int16)">
            <inheritdoc cref="M:Riptide.Message.AddShort(System.Int16)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddShort(System.Int16)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.UInt16)">
            <inheritdoc cref="M:Riptide.Message.AddUShort(System.UInt16)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddUShort(System.UInt16)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.Int32)">
            <inheritdoc cref="M:Riptide.Message.AddInt(System.Int32)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddInt(System.Int32)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.UInt32)">
            <inheritdoc cref="M:Riptide.Message.AddUInt(System.UInt32)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddUInt(System.UInt32)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.Int64)">
            <inheritdoc cref="M:Riptide.Message.AddLong(System.Int64)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddLong(System.Int64)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.UInt64)">
            <inheritdoc cref="M:Riptide.Message.AddULong(System.UInt64)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddULong(System.UInt64)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.Single)">
            <inheritdoc cref="M:Riptide.Message.AddFloat(System.Single)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddFloat(System.Single)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.Double)">
            <inheritdoc cref="M:Riptide.Message.AddDouble(System.Double)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddDouble(System.Double)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.String)">
            <inheritdoc cref="M:Riptide.Message.AddString(System.String)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddString(System.String)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add``1(``0)">
            <inheritdoc cref="M:Riptide.Message.AddSerializable``1(``0)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddSerializable``1(``0)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.Byte[],System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddBytes(System.Byte[],System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddBytes(System.Byte[],System.Boolean)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.SByte[],System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddSBytes(System.SByte[],System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddSBytes(System.SByte[],System.Boolean)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.Boolean[],System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddBools(System.Boolean[],System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddBools(System.Boolean[],System.Boolean)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.Int16[],System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddShorts(System.Int16[],System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddShorts(System.Int16[],System.Boolean)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.UInt16[],System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddUShorts(System.UInt16[],System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddUShorts(System.UInt16[],System.Boolean)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.Int32[],System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddInts(System.Int32[],System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddInts(System.Int32[],System.Boolean)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.UInt32[],System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddUInts(System.UInt32[],System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddUInts(System.UInt32[],System.Boolean)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.Int64[],System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddLongs(System.Int64[],System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddLongs(System.Int64[],System.Boolean)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.UInt64[],System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddULongs(System.UInt64[],System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddULongs(System.UInt64[],System.Boolean)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.Single[],System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddFloats(System.Single[],System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddFloats(System.Single[],System.Boolean)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.Double[],System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddDoubles(System.Double[],System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddDoubles(System.Double[],System.Boolean)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.String[],System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddStrings(System.String[],System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddStrings(System.String[],System.Boolean)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add``1(``0[],System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddSerializables``1(``0[],System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddSerializables``1(``0[],System.Boolean)"/>.</remarks>
        </member>
        <member name="F:Riptide.Message.ByteName">
            <summary>The name of a <see cref="T:System.Byte"/> value.</summary>
        </member>
        <member name="F:Riptide.Message.SByteName">
            <summary>The name of a <see cref="T:System.SByte"/> value.</summary>
        </member>
        <member name="F:Riptide.Message.BoolName">
            <summary>The name of a <see cref="T:System.Boolean"/> value.</summary>
        </member>
        <member name="F:Riptide.Message.ShortName">
            <summary>The name of a <see cref="T:System.Int16"/> value.</summary>
        </member>
        <member name="F:Riptide.Message.UShortName">
            <summary>The name of a <see cref="T:System.UInt16"/> value.</summary>
        </member>
        <member name="F:Riptide.Message.IntName">
            <summary>The name of an <see cref="T:System.Int32"/> value.</summary>
        </member>
        <member name="F:Riptide.Message.UIntName">
            <summary>The name of a <see cref="T:System.UInt32"/> value.</summary>
        </member>
        <member name="F:Riptide.Message.LongName">
            <summary>The name of a <see cref="T:System.Int64"/> value.</summary>
        </member>
        <member name="F:Riptide.Message.ULongName">
            <summary>The name of a <see cref="T:System.UInt64"/> value.</summary>
        </member>
        <member name="F:Riptide.Message.FloatName">
            <summary>The name of a <see cref="T:System.Single"/> value.</summary>
        </member>
        <member name="F:Riptide.Message.DoubleName">
            <summary>The name of a <see cref="T:System.Double"/> value.</summary>
        </member>
        <member name="F:Riptide.Message.StringName">
            <summary>The name of a <see cref="T:System.String"/> value.</summary>
        </member>
        <member name="F:Riptide.Message.ArrayLengthName">
            <summary>The name of an array length value.</summary>
        </member>
        <member name="M:Riptide.Message.NotEnoughBytesError(System.String,System.String)">
            <summary>Constructs an error message for when a message contains insufficient unread bytes to retrieve a certain value.</summary>
            <param name="valueName">The name of the value type for which the retrieval attempt failed.</param>
            <param name="defaultReturn">Text describing the value which will be returned.</param>
            <returns>The error message.</returns>
        </member>
        <member name="M:Riptide.Message.NotEnoughBytesError(System.Int32,System.String)">
            <summary>Constructs an error message for when a message contains insufficient unread bytes to retrieve an array of values.</summary>
            <param name="arrayLength">The expected length of the array.</param>
            <param name="valueName">The name of the value type for which the retrieval attempt failed.</param>
            <returns>The error message.</returns>
        </member>
        <member name="M:Riptide.Message.ArrayNotLongEnoughError(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>Constructs an error message for when a number of retrieved values do not fit inside the bounds of the provided array.</summary>
            <param name="amount">The number of values being retrieved.</param>
            <param name="arrayLength">The length of the provided array.</param>
            <param name="startIndex">The position in the array at which to begin writing values.</param>
            <param name="valueName">The name of the value type which is being retrieved.</param>
            <param name="pluralValueName">The name of the value type in plural form. If left empty, this will be set to <paramref name="valueName"/> with an <c>s</c> appended to it.</param>
            <returns>The error message.</returns>
        </member>
        <member name="T:Riptide.MessageHandlerAttribute">
            <summary>Specifies a method as the message handler for messages with the given ID.</summary>
            <remarks>
              <para>
                In order for a method to qualify as a message handler, it <i>must</i> match a valid message handler method signature. <see cref="T:Riptide.Server"/>s
                will only use methods marked with this attribute if they match the <see cref="T:Riptide.Server.MessageHandler"/> signature, and <see cref="T:Riptide.Client"/>s
                will only use methods marked with this attribute if they match the <see cref="T:Riptide.Client.MessageHandler"/> signature.
              </para>
              <para>
                Methods marked with this attribute which match neither of the valid message handler signatures will not be used by <see cref="T:Riptide.Server"/>s
                or <see cref="T:Riptide.Client"/>s and will cause warnings at runtime.
              </para>
              <para>
                If you want a <see cref="T:Riptide.Server"/> or <see cref="T:Riptide.Client"/> to only use a subset of all message handler methods, you can do so by setting up
                custom message handler groups. Simply set the group ID in the <see cref="M:Riptide.MessageHandlerAttribute.#ctor(System.UInt16,System.Byte)"/> constructor and pass the
                same value to the <see cref="M:Riptide.Server.Start(System.UInt16,System.UInt16,System.Byte)"/> or <see cref="M:Riptide.Client.Connect(System.String,System.Int32,System.Byte,Riptide.Message)"/> method. This
                will make that <see cref="T:Riptide.Server"/> or <see cref="T:Riptide.Client"/> only use message handlers which have the same group ID.
              </para>
            </remarks>
        </member>
        <member name="F:Riptide.MessageHandlerAttribute.MessageId">
            <summary>The ID of the message type which this method is meant to handle.</summary>
        </member>
        <member name="F:Riptide.MessageHandlerAttribute.GroupId">
            <summary>The ID of the group of message handlers which this method belongs to.</summary>
        </member>
        <member name="M:Riptide.MessageHandlerAttribute.#ctor(System.UInt16,System.Byte)">
            <summary>Initializes a new instance of the <see cref="T:Riptide.MessageHandlerAttribute"/> class with the <paramref name="messageId"/> and <paramref name="groupId"/> values.</summary>
            <param name="messageId">The ID of the message type which this method is meant to handle.</param>
            <param name="groupId">The ID of the group of message handlers which this method belongs to.</param>
            <remarks>
              <see cref="T:Riptide.Server"/>s will only use this method if its signature matches the <see cref="T:Riptide.Server.MessageHandler"/> signature.
              <see cref="T:Riptide.Client"/>s will only use this method if its signature matches the <see cref="T:Riptide.Client.MessageHandler"/> signature.
              This method will be ignored if its signature matches neither of the valid message handler signatures.
            </remarks>
        </member>
        <member name="T:Riptide.DisconnectReason">
            <summary>The reason for a disconnection.</summary>
        </member>
        <member name="F:Riptide.DisconnectReason.neverConnected">
            <summary>No connection was ever established.</summary>
        </member>
        <member name="F:Riptide.DisconnectReason.transportError">
            <summary>The active transport detected a problem with the connection.</summary>
        </member>
        <member name="F:Riptide.DisconnectReason.timedOut">
            <summary>The connection timed out.</summary>
            <remarks>
              This also acts as the fallback reason—if a client disconnects and the message containing the <i>real</i> reason is lost
              in transmission, it can't be resent as the connection will have already been closed. As a result, the other end will time
              out the connection after a short period of time and this will be used as the reason.
            </remarks>
        </member>
        <member name="F:Riptide.DisconnectReason.kicked">
            <summary>The client was forcibly disconnected by the server.</summary>
        </member>
        <member name="F:Riptide.DisconnectReason.serverStopped">
            <summary>The server shut down.</summary>
        </member>
        <member name="F:Riptide.DisconnectReason.disconnected">
            <summary>The disconnection was initiated by the client.</summary>
        </member>
        <member name="T:Riptide.Peer">
            <summary>Provides base functionality for <see cref="T:Riptide.Server"/> and <see cref="T:Riptide.Client"/>.</summary>
        </member>
        <member name="F:Riptide.Peer.LogName">
            <summary>The name to use when logging messages via <see cref="T:Riptide.Utils.RiptideLogger"/>.</summary>
        </member>
        <member name="P:Riptide.Peer.TimeoutTime">
            <summary>The time (in milliseconds) after which to disconnect if no heartbeats are received.</summary>
        </member>
        <member name="P:Riptide.Peer.HeartbeatInterval">
            <summary>The interval (in milliseconds) at which to send and expect heartbeats to be received.</summary>
            <remarks>Changes to this value will only take effect after the next heartbeat is executed.</remarks>
        </member>
        <member name="P:Riptide.Peer.ActiveCount">
            <summary>The number of currently active <see cref="T:Riptide.Server"/> and <see cref="T:Riptide.Client"/> instances.</summary>
        </member>
        <member name="P:Riptide.Peer.CurrentTime">
            <summary>The current time.</summary>
        </member>
        <member name="F:Riptide.Peer.ReasonNeverConnected">
            <summary>The text to log when disconnected due to <see cref="F:Riptide.DisconnectReason.neverConnected"/>.</summary>
        </member>
        <member name="F:Riptide.Peer.ReasonTransportError">
            <summary>The text to log when disconnected due to <see cref="F:Riptide.DisconnectReason.transportError"/>.</summary>
        </member>
        <member name="F:Riptide.Peer.ReasonTimedOut">
            <summary>The text to log when disconnected due to <see cref="F:Riptide.DisconnectReason.timedOut"/>.</summary>
        </member>
        <member name="F:Riptide.Peer.ReasonKicked">
            <summary>The text to log when disconnected due to <see cref="F:Riptide.DisconnectReason.kicked"/>.</summary>
        </member>
        <member name="F:Riptide.Peer.ReasonServerStopped">
            <summary>The text to log when disconnected due to <see cref="F:Riptide.DisconnectReason.serverStopped"/>.</summary>
        </member>
        <member name="F:Riptide.Peer.ReasonDisconnected">
            <summary>The text to log when disconnected due to <see cref="F:Riptide.DisconnectReason.disconnected"/>.</summary>
        </member>
        <member name="F:Riptide.Peer.ReasonUnknown">
            <summary>The text to log when disconnected due to an unknown reason.</summary>
        </member>
        <member name="F:Riptide.Peer.time">
            <summary>A stopwatch used to track how much time has passed.</summary>
        </member>
        <member name="F:Riptide.Peer.messagesToHandle">
            <summary>Received messages which need to be handled.</summary>
        </member>
        <member name="F:Riptide.Peer.eventQueue">
            <summary>A queue of events to execute, ordered by how soon they need to be executed.</summary>
        </member>
        <member name="M:Riptide.Peer.#ctor(System.String)">
            <summary>Initializes the peer.</summary>
            <param name="logName">The name to use when logging messages via <see cref="T:Riptide.Utils.RiptideLogger"/>.</param>
        </member>
        <member name="M:Riptide.Peer.FindMessageHandlers">
            <summary>Retrieves methods marked with <see cref="T:Riptide.MessageHandlerAttribute"/>.</summary>
            <returns>An array containing message handler methods.</returns>
        </member>
        <member name="M:Riptide.Peer.CreateMessageHandlersDictionary(System.Byte)">
            <summary>Builds a dictionary of message IDs and their corresponding message handler methods.</summary>
            <param name="messageHandlerGroupId">The ID of the group of message handler methods to include in the dictionary.</param>
        </member>
        <member name="M:Riptide.Peer.StartTime">
            <summary>Starts tracking how much time has passed.</summary>
        </member>
        <member name="M:Riptide.Peer.StopTime">
            <summary>Stops tracking how much time has passed.</summary>
        </member>
        <member name="M:Riptide.Peer.Heartbeat">
            <summary>Beats the heart.</summary>
        </member>
        <member name="M:Riptide.Peer.Tick">
            <summary>Checks if it's time for any delayed events to be invoked and invokes them.</summary>
        </member>
        <member name="M:Riptide.Peer.ExecuteLater(System.Int64,Riptide.Utils.DelayedEvent)">
            <summary>Sets up a delayed event to be executed after the given time has passed.</summary>
            <param name="inMS">How long from now to execute the delayed event, in milliseconds.</param>
            <param name="delayedEvent">The delayed event to execute later.</param>
        </member>
        <member name="M:Riptide.Peer.HandleMessages">
            <summary>Handles all queued messages.</summary>
        </member>
        <member name="M:Riptide.Peer.HandleData(System.Object,Riptide.Transports.DataReceivedEventArgs)">
            <summary>Handles data received by the transport.</summary>
        </member>
        <member name="M:Riptide.Peer.Handle(Riptide.Message,Riptide.Transports.HeaderType,Riptide.Connection)">
            <summary>Handles a message.</summary>
            <param name="message">The message to handle.</param>
            <param name="messageHeader">The message's header type.</param>
            <param name="connection">The connection which the message was received on.</param>
        </member>
        <member name="M:Riptide.Peer.IncreaseActiveCount">
            <summary>Increases <see cref="P:Riptide.Peer.ActiveCount"/>. For use when a new <see cref="T:Riptide.Server"/> or <see cref="T:Riptide.Client"/> is started.</summary>
        </member>
        <member name="M:Riptide.Peer.DecreaseActiveCount">
            <summary>Decreases <see cref="P:Riptide.Peer.ActiveCount"/>. For use when a <see cref="T:Riptide.Server"/> or <see cref="T:Riptide.Client"/> is stopped.</summary>
        </member>
        <member name="T:Riptide.MessageToHandle">
            <summary>Stores information about a message that needs to be handled.</summary>
        </member>
        <member name="F:Riptide.MessageToHandle.Message">
            <summary>The message that needs to be handled.</summary>
        </member>
        <member name="F:Riptide.MessageToHandle.MessageHeader">
            <summary>The message's header type.</summary>
        </member>
        <member name="F:Riptide.MessageToHandle.FromConnection">
            <summary>The connection on which the message was received.</summary>
        </member>
        <member name="M:Riptide.MessageToHandle.#ctor(Riptide.Message,Riptide.Transports.HeaderType,Riptide.Connection)">
            <summary>Handles initialization.</summary>
            <param name="message">The message that needs to be handled.</param>
            <param name="messageHeader">The message's header type.</param>
            <param name="fromConnection">The connection on which the message was received.</param>
        </member>
        <member name="T:Riptide.PendingMessage">
            <summary>Represents a currently pending reliably sent message whose delivery has not been acknowledged yet.</summary>
        </member>
        <member name="P:Riptide.PendingMessage.LastSendTime">
            <summary>The time of the latest send attempt.</summary>
        </member>
        <member name="F:Riptide.PendingMessage.RetryTimeMultiplier">
            <summary>The multiplier used to determine how long to wait before resending a pending message.</summary>
        </member>
        <member name="F:Riptide.PendingMessage.pool">
            <summary>A pool of reusable <see cref="T:Riptide.PendingMessage"/> instances.</summary>
        </member>
        <member name="F:Riptide.PendingMessage.connection">
            <summary>The <see cref="T:Riptide.Connection"/> to use to send (and resend) the pending message.</summary>
        </member>
        <member name="F:Riptide.PendingMessage.sequenceId">
            <summary>The sequence ID of the message.</summary>
        </member>
        <member name="F:Riptide.PendingMessage.data">
            <summary>The contents of the message.</summary>
        </member>
        <member name="F:Riptide.PendingMessage.writtenLength">
            <summary>The length in bytes of the data that has been written to the message.</summary>
        </member>
        <member name="F:Riptide.PendingMessage.maxSendAttempts">
            <summary>How often to try sending the message before giving up.</summary>
        </member>
        <member name="F:Riptide.PendingMessage.sendAttempts">
            <summary>How many send attempts have been made so far.</summary>
        </member>
        <member name="F:Riptide.PendingMessage.wasCleared">
            <summary>Whether the pending message has been cleared or not.</summary>
        </member>
        <member name="M:Riptide.PendingMessage.#ctor">
            <summary>Handles initial setup.</summary>
        </member>
        <member name="M:Riptide.PendingMessage.CreateAndSend(System.UInt16,Riptide.Message,Riptide.Connection)">
            <summary>Retrieves a <see cref="T:Riptide.PendingMessage"/> instance, initializes it and then sends it.</summary>
            <param name="sequenceId">The sequence ID of the message.</param>
            <param name="message">The message that is being sent reliably.</param>
            <param name="connection">The <see cref="T:Riptide.Connection"/> to use to send (and resend) the pending message.</param>
        </member>
        <member name="M:Riptide.PendingMessage.RetrieveFromPool">
            <summary>Retrieves a <see cref="T:Riptide.PendingMessage"/> instance from the pool. If none is available, a new instance is created.</summary>
            <returns>A <see cref="T:Riptide.PendingMessage"/> instance.</returns>
        </member>
        <member name="M:Riptide.PendingMessage.Release">
            <summary>Returns the <see cref="T:Riptide.PendingMessage"/> instance to the pool so it can be reused.</summary>
        </member>
        <member name="M:Riptide.PendingMessage.RetrySend">
            <summary>Resends the message.</summary>
        </member>
        <member name="M:Riptide.PendingMessage.TrySend">
            <summary>Attempts to send the message.</summary>
        </member>
        <member name="M:Riptide.PendingMessage.Clear(System.Boolean)">
            <summary>Clears the message.</summary>
            <param name="shouldRemoveFromDictionary">Whether or not to remove the message from <see cref="P:Riptide.Connection.PendingMessages"/>.</param>
        </member>
        <member name="T:Riptide.Server">
            <summary>A server that can accept connections from <see cref="T:Riptide.Client"/>s.</summary>
        </member>
        <member name="E:Riptide.Server.ClientConnected">
            <summary>Invoked when a client connects.</summary>
        </member>
        <member name="E:Riptide.Server.MessageReceived">
            <summary>Invoked when a message is received.</summary>
        </member>
        <member name="E:Riptide.Server.ClientDisconnected">
            <summary>Invoked when a client disconnects.</summary>
        </member>
        <member name="P:Riptide.Server.IsRunning">
            <summary>Whether or not the server is currently running.</summary>
        </member>
        <member name="P:Riptide.Server.Port">
            <summary>The local port that the server is running on.</summary>
        </member>
        <member name="P:Riptide.Server.MaxClientCount">
            <summary>The maximum number of concurrent connections.</summary>
        </member>
        <member name="P:Riptide.Server.ClientCount">
            <summary>The number of currently connected clients.</summary>
        </member>
        <member name="P:Riptide.Server.Clients">
            <summary>An array of all the currently connected clients.</summary>
            <remarks>The position of each <see cref="T:Riptide.Connection"/> instance in the array does <i>not</i> correspond to that client's numeric ID (except by coincidence).</remarks>
        </member>
        <member name="P:Riptide.Server.AllowAutoMessageRelay">
            <summary>Whether or not to allow messages to be automatically sent to all other connected clients.</summary>
            <remarks>This should never be enabled if you want to maintain server authority, as it theoretically allows hacked clients to tell your <see cref="T:Riptide.Server"/> instance to automatically distribute any message to other clients. However, it's extremely handy when building client-authoritative games where the <see cref="T:Riptide.Server"/> instance acts mostly as a relay and is directly forwarding most messages to other clients anyways.</remarks>
        </member>
        <member name="T:Riptide.Server.MessageHandler">
            <summary>Encapsulates a method that handles a message from a client.</summary>
            <param name="fromClientId">The numeric ID of the client from whom the message was received.</param>
            <param name="message">The message that was received.</param>
        </member>
        <member name="T:Riptide.Server.ConnectionAttemptHandler">
            <summary>Encapsulates a method that determines whether or not to accept a client's connection attempt.</summary>
        </member>
        <member name="F:Riptide.Server.DoAcceptClient">
            <summary>An optional method which determines whether or not to accept a client's connection attempt.</summary>
            <remarks>The <see cref="T:Riptide.Connection"/> parameter is the pending connection and the <see cref="T:Riptide.Message"/> parameter is a message containing any additional data the client included with the connection attempt.</remarks>
        </member>
        <member name="F:Riptide.Server.clients">
            <summary>Currently connected clients.</summary>
        </member>
        <member name="F:Riptide.Server.timedOutClients">
            <summary>Clients that have timed out and need to be removed from <see cref="F:Riptide.Server.clients"/>.</summary>
        </member>
        <member name="F:Riptide.Server.messageHandlers">
            <summary>Methods used to handle messages, accessible by their corresponding message IDs.</summary>
        </member>
        <member name="F:Riptide.Server.transport">
            <summary>The underlying transport's server that is used for sending and receiving data.</summary>
        </member>
        <member name="F:Riptide.Server.availableClientIds">
            <summary>All currently unused client IDs.</summary>
        </member>
        <member name="M:Riptide.Server.#ctor(Riptide.Transports.IServer,System.String)">
            <summary>Handles initial setup.</summary>
            <param name="transport">The transport to use for sending and receiving data.</param>
            <param name="logName">The name to use when logging messages via <see cref="T:Riptide.Utils.RiptideLogger"/>.</param>
        </member>
        <member name="M:Riptide.Server.#ctor(System.String)">
            <summary>Handles initial setup using the built-in UDP transport.</summary>
            <param name="logName">The name to use when logging messages via <see cref="T:Riptide.Utils.RiptideLogger"/>.</param>
        </member>
        <member name="M:Riptide.Server.ChangeTransport(Riptide.Transports.IServer)">
            <summary>Stops the server if it's running and swaps out the transport it's using.</summary>
            <param name="newTransport">The new underlying transport server to use for sending and receiving data.</param>
            <remarks>This method does not automatically restart the server. To continue accepting connections, <see cref="M:Riptide.Server.Start(System.UInt16,System.UInt16,System.Byte)"/> must be called again.</remarks>
        </member>
        <member name="M:Riptide.Server.Start(System.UInt16,System.UInt16,System.Byte)">
            <summary>Starts the server.</summary>
            <param name="port">The local port on which to start the server.</param>
            <param name="maxClientCount">The maximum number of concurrent connections to allow.</param>
            <param name="messageHandlerGroupId">The ID of the group of message handler methods to use when building <see cref="F:Riptide.Server.messageHandlers"/>.</param>
        </member>
        <member name="M:Riptide.Server.SubToTransportEvents">
            <summary>Subscribes appropriate methods to the transport's events.</summary>
        </member>
        <member name="M:Riptide.Server.UnsubFromTransportEvents">
            <summary>Unsubscribes methods from all of the transport's events.</summary>
        </member>
        <member name="M:Riptide.Server.CreateMessageHandlersDictionary(System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Server.HandleConnectionAttempt(System.Object,Riptide.Transports.ConnectedEventArgs)">
            <summary>Handles an incoming connection attempt.</summary>
        </member>
        <member name="M:Riptide.Server.HandleConnect(Riptide.Connection,Riptide.Message)">
            <summary>Handles a connect message.</summary>
            <param name="connection">The client that sent the connect message.</param>
            <param name="connectMessage">The connect message.</param>
        </member>
        <member name="M:Riptide.Server.Heartbeat">
            <summary>Checks if clients have timed out.</summary>
        </member>
        <member name="M:Riptide.Server.Tick">
            <summary>Polls the transport for received messages and then handles them.</summary>
        </member>
        <member name="M:Riptide.Server.Handle(Riptide.Message,Riptide.Transports.HeaderType,Riptide.Connection)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Server.Send(Riptide.Message,System.UInt16,System.Boolean)">
            <summary>Sends a message to a given client.</summary>
            <param name="message">The message to send.</param>
            <param name="toClient">The numeric ID of the client to send the message to.</param>
            <param name="shouldRelease">Whether or not to return the message to the pool after it is sent.</param>
            <remarks><inheritdoc cref="M:Riptide.Connection.Send(Riptide.Message,System.Boolean)"/></remarks>
        </member>
        <member name="M:Riptide.Server.Send(Riptide.Message,Riptide.Connection,System.Boolean)">
            <summary>Sends a message to a given client.</summary>
            <param name="message">The message to send.</param>
            <param name="toClient">The client to send the message to.</param>
            <param name="shouldRelease">Whether or not to return the message to the pool after it is sent.</param>
            <remarks><inheritdoc cref="M:Riptide.Connection.Send(Riptide.Message,System.Boolean)"/></remarks>
        </member>
        <member name="M:Riptide.Server.SendToAll(Riptide.Message,System.Boolean)">
            <summary>Sends a message to all connected clients.</summary>
            <param name="message">The message to send.</param>
            <param name="shouldRelease">Whether or not to return the message to the pool after it is sent.</param>
            <remarks><inheritdoc cref="M:Riptide.Connection.Send(Riptide.Message,System.Boolean)"/></remarks>
        </member>
        <member name="M:Riptide.Server.SendToAll(Riptide.Message,System.UInt16,System.Boolean)">
            <summary>Sends a message to all connected clients except the given one.</summary>
            <param name="message">The message to send.</param>
            <param name="exceptToClientId">The numeric ID of the client to <i>not</i> send the message to.</param>
            <param name="shouldRelease">Whether or not to return the message to the pool after it is sent.</param>
            <remarks><inheritdoc cref="M:Riptide.Connection.Send(Riptide.Message,System.Boolean)"/></remarks>
        </member>
        <member name="M:Riptide.Server.TryGetClient(System.UInt16,Riptide.Connection@)">
            <summary>Retrieves the client with the given ID, if a client with that ID is currently connected.</summary>
            <param name="id">The ID of the client to retrieve.</param>
            <param name="client">The retrieved client.</param>
            <returns><see langword="true"/> if a client with the given ID was connected; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Riptide.Server.DisconnectClient(System.UInt16,System.String)">
            <summary>Disconnects a specific client.</summary>
            <param name="id">The numeric ID of the client to disconnect.</param>
            <param name="customMessage">An optional custom message (if any) to inform the client why it was disconnected.</param>
        </member>
        <member name="M:Riptide.Server.DisconnectClient(Riptide.Connection,System.String)">
            <summary>Disconnects the given client.</summary>
            <param name="client">The client to disconnect.</param>
            <param name="customMessage">An optional custom message (if any) to inform the client why it was disconnected.</param>
        </member>
        <member name="M:Riptide.Server.LocalDisconnect(Riptide.Connection,Riptide.DisconnectReason,System.String)">
            <summary>Cleans up the local side of the given connection.</summary>
            <param name="client">The client to disconnect.</param>
            <param name="reason">The reason why the client is being disconnected.</param>
            <param name="customMessage">An optional custom message to display for the disconnection reason. Only used when <paramref name="reason"/> is set to <see cref="F:Riptide.DisconnectReason.kicked"/>.</param>
        </member>
        <member name="M:Riptide.Server.TransportDisconnected(System.Object,Riptide.Transports.DisconnectedEventArgs)">
            <summary>What to do when the transport disconnects a client.</summary>
        </member>
        <member name="M:Riptide.Server.Stop">
            <summary>Stops the server.</summary>
        </member>
        <member name="M:Riptide.Server.InitializeClientIds">
            <summary>Initializes available client IDs.</summary>
        </member>
        <member name="M:Riptide.Server.GetAvailableClientId">
            <summary>Retrieves an available client ID.</summary>
            <returns>The client ID. 0 if none were available.</returns>
        </member>
        <member name="M:Riptide.Server.SendDisconnect(Riptide.Connection,Riptide.DisconnectReason,System.String)">
            <summary>Sends a disconnect message.</summary>
            <param name="client">The client to send the disconnect message to.</param>
            <param name="reason">Why the client is being disconnected.</param>
            <param name="customMessage">A custom message which is used to inform clients why they were disconnected.</param>
        </member>
        <member name="M:Riptide.Server.SendClientConnected(Riptide.Connection)">
            <summary>Sends a client connected message.</summary>
            <param name="newClient">The newly connected client.</param>
        </member>
        <member name="M:Riptide.Server.SendClientDisconnected(System.UInt16)">
            <summary>Sends a client disconnected message.</summary>
            <param name="id">The numeric ID of the client that disconnected.</param>
        </member>
        <member name="M:Riptide.Server.OnClientConnected(Riptide.Connection)">
            <summary>Invokes the <see cref="E:Riptide.Server.ClientConnected"/> event.</summary>
            <param name="client">The newly connected client.</param>
        </member>
        <member name="M:Riptide.Server.OnMessageReceived(Riptide.Message,Riptide.Connection)">
            <summary>Invokes the <see cref="E:Riptide.Server.MessageReceived"/> event and initiates handling of the received message.</summary>
            <param name="message">The received message.</param>
            <param name="fromConnection">The client from which the message was received.</param>
        </member>
        <member name="M:Riptide.Server.OnClientDisconnected(System.UInt16)">
            <summary>Invokes the <see cref="E:Riptide.Server.ClientDisconnected"/> event.</summary>
            <param name="clientId">The numeric ID of the client that disconnected.</param>
        </member>
        <member name="T:Riptide.Transports.ConnectedEventArgs">
            <summary>Contains event data for when a server's transport successfully establishes a connection to a client.</summary>
        </member>
        <member name="F:Riptide.Transports.ConnectedEventArgs.Connection">
            <summary>The newly established connection.</summary>
        </member>
        <member name="M:Riptide.Transports.ConnectedEventArgs.#ctor(Riptide.Connection)">
            <summary>Initializes event data.</summary>
            <param name="connection">The newly established connection.</param>
        </member>
        <member name="T:Riptide.Transports.DataReceivedEventArgs">
            <summary>Contains event data for when a server's or client's transport receives data.</summary>
        </member>
        <member name="F:Riptide.Transports.DataReceivedEventArgs.DataBuffer">
            <summary>An array containing the received data.</summary>
        </member>
        <member name="F:Riptide.Transports.DataReceivedEventArgs.Amount">
            <summary>The number of bytes that were received.</summary>
        </member>
        <member name="F:Riptide.Transports.DataReceivedEventArgs.FromConnection">
            <summary>The connection which the data was received from.</summary>
        </member>
        <member name="M:Riptide.Transports.DataReceivedEventArgs.#ctor(System.Byte[],System.Int32,Riptide.Connection)">
            <summary>Initializes event data.</summary>
            <param name="dataBuffer">An array containing the received data.</param>
            <param name="amount">The number of bytes that were received.</param>
            <param name="fromConnection">The connection which the data was received from.</param>
        </member>
        <member name="T:Riptide.Transports.DisconnectedEventArgs">
            <summary>Contains event data for when a server's or client's transport initiates or detects a disconnection.</summary>
        </member>
        <member name="F:Riptide.Transports.DisconnectedEventArgs.Connection">
            <summary>The closed connection.</summary>
        </member>
        <member name="F:Riptide.Transports.DisconnectedEventArgs.Reason">
            <summary>The reason for the disconnection.</summary>
        </member>
        <member name="M:Riptide.Transports.DisconnectedEventArgs.#ctor(Riptide.Connection,Riptide.DisconnectReason)">
            <summary>Initializes event data.</summary>
            <param name="connection">The closed connection.</param>
            <param name="reason">The reason for the disconnection.</param>
        </member>
        <member name="T:Riptide.Transports.IClient">
            <summary>Defines methods, properties, and events which every transport's client must implement.</summary>
        </member>
        <member name="E:Riptide.Transports.IClient.Connected">
            <summary>Invoked when a connection is established at the transport level.</summary>
        </member>
        <member name="E:Riptide.Transports.IClient.ConnectionFailed">
            <summary>Invoked when a connection attempt fails at the transport level.</summary>
        </member>
        <member name="M:Riptide.Transports.IClient.Connect(System.String,Riptide.Connection@,System.String@)">
            <summary>Starts the transport and attempts to connect to the given host address.</summary>
            <param name="hostAddress">The host address to connect to.</param>
            <param name="connection">The pending connection. <see langword="null"/> if an issue occurred.</param>
            <param name="connectError">The error message associated with the issue that occurred, if any.</param>
            <returns><see langword="true"/> if a connection attempt will be made. <see langword="false"/> if an issue occurred (such as <paramref name="hostAddress"/> being in an invalid format) and a connection attempt will <i>not</i> be made.</returns>
        </member>
        <member name="M:Riptide.Transports.IClient.Disconnect">
            <summary>Closes the connection to the server.</summary>
        </member>
        <member name="T:Riptide.Transports.HeaderType">
            <summary>The header type of a <see cref="T:Riptide.Message"/>.</summary>
        </member>
        <member name="F:Riptide.Transports.HeaderType.unreliable">
            <summary>An unreliable user message.</summary>
        </member>
        <member name="F:Riptide.Transports.HeaderType.unreliableAutoRelay">
            <summary>An unreliable user message which servers should automatically relay to all other clients.</summary>
        </member>
        <member name="F:Riptide.Transports.HeaderType.ack">
            <summary>An internal unreliable ack message.</summary>
        </member>
        <member name="F:Riptide.Transports.HeaderType.ackExtra">
            <summary>An internal unreliable ack message, used when acknowledging a sequence ID other than the last received one.</summary>
        </member>
        <member name="F:Riptide.Transports.HeaderType.connect">
            <summary>An internal unreliable connect message.</summary>
        </member>
        <member name="F:Riptide.Transports.HeaderType.heartbeat">
            <summary>An internal unreliable heartbeat message.</summary>
        </member>
        <member name="F:Riptide.Transports.HeaderType.disconnect">
            <summary>An internal unreliable disconnect message.</summary>
        </member>
        <member name="F:Riptide.Transports.HeaderType.reliable">
            <summary>A reliable user message.</summary>
        </member>
        <member name="F:Riptide.Transports.HeaderType.reliableAutoRelay">
            <summary>A reliable user message which servers should automatically relay to all other clients.</summary>
        </member>
        <member name="F:Riptide.Transports.HeaderType.welcome">
            <summary>An internal reliable welcome message.</summary>
        </member>
        <member name="F:Riptide.Transports.HeaderType.clientConnected">
            <summary>An internal reliable client connected message.</summary>
        </member>
        <member name="F:Riptide.Transports.HeaderType.clientDisconnected">
            <summary>An internal reliable client disconnected message.</summary>
        </member>
        <member name="T:Riptide.Transports.IPeer">
            <summary>Defines methods, properties, and events which every transport's server <i>and</i> client must implement.</summary>
        </member>
        <member name="E:Riptide.Transports.IPeer.DataReceived">
            <summary>Invoked when data is received by the transport.</summary>
        </member>
        <member name="E:Riptide.Transports.IPeer.Disconnected">
            <summary>Invoked when a disconnection is initiated or detected by the transport.</summary>
        </member>
        <member name="M:Riptide.Transports.IPeer.Tick">
            <summary>Initiates handling of any received messages.</summary>
        </member>
        <member name="T:Riptide.Transports.IServer">
            <summary>Defines methods, properties, and events which every transport's server must implement.</summary>
        </member>
        <member name="E:Riptide.Transports.IServer.Connected">
            <summary>Invoked when a connection is established at the transport level.</summary>
        </member>
        <member name="P:Riptide.Transports.IServer.Port">
            <inheritdoc cref="P:Riptide.Server.Port"/>
        </member>
        <member name="M:Riptide.Transports.IServer.Start(System.UInt16)">
            <summary>Starts the transport and begins listening for incoming connections.</summary>
            <param name="port">The local port on which to listen for connections.</param>
        </member>
        <member name="M:Riptide.Transports.IServer.Close(Riptide.Connection)">
            <summary>Closes an active connection.</summary>
            <param name="connection">The connection to close.</param>
        </member>
        <member name="M:Riptide.Transports.IServer.Shutdown">
            <summary>Closes all existing connections and stops listening for new connections.</summary>
        </member>
        <member name="T:Riptide.Transports.Udp.UdpClient">
            <summary>A client which can connect to a <see cref="T:Riptide.Transports.Udp.UdpServer"/>.</summary>
        </member>
        <member name="E:Riptide.Transports.Udp.UdpClient.Connected">
            <inheritdoc/>
        </member>
        <member name="E:Riptide.Transports.Udp.UdpClient.ConnectionFailed">
            <inheritdoc/>
        </member>
        <member name="E:Riptide.Transports.Udp.UdpClient.DataReceived">
            <inheritdoc/>
        </member>
        <member name="F:Riptide.Transports.Udp.UdpClient.udpConnection">
            <summary>The connection to the server.</summary>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpClient.#ctor(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpClient.Connect(System.String,Riptide.Connection@,System.String@)">
            <inheritdoc/>
            <remarks>Expects the host address to consist of an IP and port, separated by a colon. For example: <c>127.0.0.1:7777</c>.</remarks>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpClient.ParseHostAddress(System.String,System.Net.IPAddress@,System.UInt16@)">
            <summary>Parses <paramref name="hostAddress"/> into <paramref name="ip"/> and <paramref name="port"/>, if possible.</summary>
            <param name="hostAddress">The host address to parse.</param>
            <param name="ip">The retrieved IP.</param>
            <param name="port">The retrieved port.</param>
            <returns>Whether or not <paramref name="hostAddress"/> was in a valid format.</returns>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpClient.Disconnect">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpClient.OnConnected">
            <summary>Invokes the <see cref="E:Riptide.Transports.Udp.UdpClient.Connected"/> event.</summary>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpClient.OnConnectionFailed">
            <summary>Invokes the <see cref="E:Riptide.Transports.Udp.UdpClient.ConnectionFailed"/> event.</summary>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpClient.OnDataReceived(System.Byte[],System.Int32,System.Net.IPEndPoint)">
            <inheritdoc/>
        </member>
        <member name="T:Riptide.Transports.Udp.UdpConnection">
            <summary>Represents a connection to a <see cref="T:Riptide.Transports.Udp.UdpServer"/> or <see cref="T:Riptide.Transports.Udp.UdpClient"/>.</summary>
        </member>
        <member name="F:Riptide.Transports.Udp.UdpConnection.RemoteEndPoint">
            <summary>The endpoint representing the other end of the connection.</summary>
        </member>
        <member name="F:Riptide.Transports.Udp.UdpConnection.peer">
            <summary>The local peer this connection is associated with.</summary>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpConnection.#ctor(System.Net.IPEndPoint,Riptide.Transports.Udp.UdpPeer)">
            <summary>Initializes the connection.</summary>
            <param name="remoteEndPoint">The endpoint representing the other end of the connection.</param>
            <param name="peer">The local peer this connection is associated with.</param>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpConnection.Send(System.Byte[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpConnection.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpConnection.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpConnection.Equals(Riptide.Transports.Udp.UdpConnection)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpConnection.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Riptide.Transports.Udp.UdpPeer">
            <summary>Provides base send &#38; receive functionality for <see cref="T:Riptide.Transports.Udp.UdpServer"/> and <see cref="T:Riptide.Transports.Udp.UdpClient"/>.</summary>
        </member>
        <member name="E:Riptide.Transports.Udp.UdpPeer.Disconnected">
            <inheritdoc cref="E:Riptide.Transports.IPeer.Disconnected"/>
        </member>
        <member name="F:Riptide.Transports.Udp.UdpPeer.DefaultSocketBufferSize">
            <summary>The default size used for the socket's send and receive buffers.</summary>
        </member>
        <member name="F:Riptide.Transports.Udp.UdpPeer.MinSocketBufferSize">
            <summary>The minimum size that may be used for the socket's send and receive buffers.</summary>
        </member>
        <member name="F:Riptide.Transports.Udp.UdpPeer.ReceivePollingTime">
            <summary>How long to wait for a packet, in microseconds.</summary>
        </member>
        <member name="F:Riptide.Transports.Udp.UdpPeer.socketBufferSize">
            <summary>The size to use for the socket's send and receive buffers.</summary>
        </member>
        <member name="F:Riptide.Transports.Udp.UdpPeer.receivedData">
            <summary>The array that incoming data is received into.</summary>
        </member>
        <member name="F:Riptide.Transports.Udp.UdpPeer.socket">
            <summary>The socket to use for sending and receiving.</summary>
        </member>
        <member name="F:Riptide.Transports.Udp.UdpPeer.isRunning">
            <summary>Whether or not the transport is running.</summary>
        </member>
        <member name="F:Riptide.Transports.Udp.UdpPeer.remoteEndPoint">
            <summary>A reusable endpoint.</summary>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpPeer.#ctor(System.Int32)">
            <summary>Initializes the transport.</summary>
            <param name="socketBufferSize">How big the socket's send and receive buffers should be.</param>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpPeer.Tick">
            <inheritdoc cref="M:Riptide.Transports.IPeer.Tick"/>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpPeer.OpenSocket(System.UInt16)">
            <summary>Opens the socket and starts the transport.</summary>
            <param name="port">The port to bind the socket to.</param>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpPeer.CloseSocket">
            <summary>Closes the socket and stops the transport.</summary>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpPeer.Receive">
            <summary>Polls the socket and checks if any data was received.</summary>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpPeer.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)">
            <summary>Sends data to a given endpoint.</summary>
            <param name="dataBuffer">The array containing the data.</param>
            <param name="numBytes">The number of bytes in the array which should be sent.</param>
            <param name="toEndPoint">The endpoint to send the data to.</param>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpPeer.OnDataReceived(System.Byte[],System.Int32,System.Net.IPEndPoint)">
            <summary>Handles received data.</summary>
            <param name="dataBuffer">A byte array containing the received data.</param>
            <param name="amount">The number of bytes in <paramref name="dataBuffer"/> used by the received data.</param>
            <param name="fromEndPoint">The endpoint from which the data was received.</param>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpPeer.OnDisconnected(Riptide.Connection,Riptide.DisconnectReason)">
            <summary>Invokes the <see cref="E:Riptide.Transports.Udp.UdpPeer.Disconnected"/> event.</summary>
            <param name="connection">The closed connection.</param>
            <param name="reason">The reason for the disconnection.</param>
        </member>
        <member name="T:Riptide.Transports.Udp.UdpServer">
            <summary>A server which can accept connections from <see cref="T:Riptide.Transports.Udp.UdpClient"/>s.</summary>
        </member>
        <member name="E:Riptide.Transports.Udp.UdpServer.Connected">
            <inheritdoc/>
        </member>
        <member name="E:Riptide.Transports.Udp.UdpServer.DataReceived">
            <inheritdoc/>
        </member>
        <member name="P:Riptide.Transports.Udp.UdpServer.Port">
            <inheritdoc/>
        </member>
        <member name="F:Riptide.Transports.Udp.UdpServer.connections">
            <summary>The currently open connections, accessible by their endpoints.</summary>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpServer.#ctor(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpServer.Start(System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpServer.HandleConnectionAttempt(Riptide.Transports.Udp.UdpConnection)">
            <summary>Decides what to do with a connection attempt.</summary>
            <param name="connection">The connection to accept or reject.</param>
            <returns>Whether or not the connection attempt was a new connection.</returns>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpServer.Close(Riptide.Connection)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpServer.Shutdown">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpServer.OnConnected(Riptide.Connection)">
            <summary>Invokes the <see cref="E:Riptide.Transports.Udp.UdpServer.Connected"/> event.</summary>
            <param name="connection">The successfully established connection.</param>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpServer.OnDataReceived(System.Byte[],System.Int32,System.Net.IPEndPoint)">
            <inheritdoc/>
        </member>
        <member name="T:Riptide.Experimental.TcpTransport.TcpClient">
            <summary>A client which can connect to a <see cref="T:Riptide.Experimental.TcpTransport.TcpServer"/>.</summary>
        </member>
        <member name="E:Riptide.Experimental.TcpTransport.TcpClient.Connected">
            <inheritdoc/>
        </member>
        <member name="E:Riptide.Experimental.TcpTransport.TcpClient.ConnectionFailed">
            <inheritdoc/>
        </member>
        <member name="E:Riptide.Experimental.TcpTransport.TcpClient.DataReceived">
            <inheritdoc/>
        </member>
        <member name="F:Riptide.Experimental.TcpTransport.TcpClient.tcpConnection">
            <summary>The connection to the server.</summary>
        </member>
        <member name="M:Riptide.Experimental.TcpTransport.TcpClient.Connect(System.String,Riptide.Connection@,System.String@)">
            <inheritdoc/>
            <remarks>Expects the host address to consist of an IP and port, separated by a colon. For example: <c>127.0.0.1:7777</c>.</remarks>
        </member>
        <member name="M:Riptide.Experimental.TcpTransport.TcpClient.ParseHostAddress(System.String,System.Net.IPAddress@,System.UInt16@)">
            <summary>Parses <paramref name="hostAddress"/> into <paramref name="ip"/> and <paramref name="port"/>, if possible.</summary>
            <param name="hostAddress">The host address to parse.</param>
            <param name="ip">The retrieved IP.</param>
            <param name="port">The retrieved port.</param>
            <returns>Whether or not <paramref name="hostAddress"/> was in a valid format.</returns>
        </member>
        <member name="M:Riptide.Experimental.TcpTransport.TcpClient.Tick">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Experimental.TcpTransport.TcpClient.Disconnect">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Experimental.TcpTransport.TcpClient.OnConnected">
            <summary>Invokes the <see cref="E:Riptide.Experimental.TcpTransport.TcpClient.Connected"/> event.</summary>
        </member>
        <member name="M:Riptide.Experimental.TcpTransport.TcpClient.OnConnectionFailed">
            <summary>Invokes the <see cref="E:Riptide.Experimental.TcpTransport.TcpClient.ConnectionFailed"/> event.</summary>
        </member>
        <member name="M:Riptide.Experimental.TcpTransport.TcpClient.OnDataReceived(System.Int32,Riptide.Experimental.TcpTransport.TcpConnection)">
            <inheritdoc/>
        </member>
        <member name="T:Riptide.Experimental.TcpTransport.TcpConnection">
            <summary>Represents a connection to a <see cref="T:Riptide.Experimental.TcpTransport.TcpServer"/> or <see cref="T:Riptide.Experimental.TcpTransport.TcpClient"/>.</summary>
        </member>
        <member name="F:Riptide.Experimental.TcpTransport.TcpConnection.RemoteEndPoint">
            <summary>The endpoint representing the other end of the connection.</summary>
        </member>
        <member name="F:Riptide.Experimental.TcpTransport.TcpConnection.socket">
            <summary>The socket to use for sending and receiving.</summary>
        </member>
        <member name="F:Riptide.Experimental.TcpTransport.TcpConnection.peer">
            <summary>The local peer this connection is associated with.</summary>
        </member>
        <member name="F:Riptide.Experimental.TcpTransport.TcpConnection.sizeBytes">
            <summary>An array to receive message size values into.</summary>
        </member>
        <member name="F:Riptide.Experimental.TcpTransport.TcpConnection.nextMessageSize">
            <summary>The size of the next message to be received.</summary>
        </member>
        <member name="M:Riptide.Experimental.TcpTransport.TcpConnection.#ctor(System.Net.Sockets.Socket,System.Net.IPEndPoint,Riptide.Experimental.TcpTransport.TcpPeer)">
            <summary>Initializes the connection.</summary>
            <param name="socket">The socket to use for sending and receiving.</param>
            <param name="remoteEndPoint">The endpoint representing the other end of the connection.</param>
            <param name="peer">The local peer this connection is associated with.</param>
        </member>
        <member name="M:Riptide.Experimental.TcpTransport.TcpConnection.Send(System.Byte[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Experimental.TcpTransport.TcpConnection.Receive">
            <summary>Polls the socket and checks if any data was received.</summary>
        </member>
        <member name="M:Riptide.Experimental.TcpTransport.TcpConnection.TryReceiveMessage(System.Int32@)">
            <summary>Receives a message, if all of its data is ready to be received.</summary>
            <param name="receivedByteCount">How many bytes were received.</param>
            <returns>Whether or not all of the message's data was ready to be received.</returns>
        </member>
        <member name="M:Riptide.Experimental.TcpTransport.TcpConnection.Close">
            <summary>Closes the connection.</summary>
        </member>
        <member name="M:Riptide.Experimental.TcpTransport.TcpConnection.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Experimental.TcpTransport.TcpConnection.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Experimental.TcpTransport.TcpConnection.Equals(Riptide.Experimental.TcpTransport.TcpConnection)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Experimental.TcpTransport.TcpConnection.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Riptide.Experimental.TcpTransport.TcpPeer">
            <summary>Provides base send &#38; receive functionality for <see cref="T:Riptide.Experimental.TcpTransport.TcpServer"/> and <see cref="T:Riptide.Experimental.TcpTransport.TcpClient"/>.</summary>
        </member>
        <member name="E:Riptide.Experimental.TcpTransport.TcpPeer.Disconnected">
            <inheritdoc cref="E:Riptide.Transports.IPeer.Disconnected"/>
        </member>
        <member name="F:Riptide.Experimental.TcpTransport.TcpPeer.ReceiveBuffer">
            <summary>An array that incoming data is received into.</summary>
        </member>
        <member name="F:Riptide.Experimental.TcpTransport.TcpPeer.SendBuffer">
            <summary>An array that outgoing data is sent out of.</summary>
        </member>
        <member name="F:Riptide.Experimental.TcpTransport.TcpPeer.DefaultSocketBufferSize">
            <summary>The default size used for the socket's send and receive buffers.</summary>
        </member>
        <member name="F:Riptide.Experimental.TcpTransport.TcpPeer.socketBufferSize">
            <summary>The size to use for the socket's send and receive buffers.</summary>
        </member>
        <member name="F:Riptide.Experimental.TcpTransport.TcpPeer.socket">
            <summary>The main socket, either used for listening for connections or for sending and receiving data.</summary>
        </member>
        <member name="F:Riptide.Experimental.TcpTransport.TcpPeer.MinSocketBufferSize">
            <summary>The minimum size that may be used for the socket's send and receive buffers.</summary>
        </member>
        <member name="M:Riptide.Experimental.TcpTransport.TcpPeer.#ctor(System.Int32)">
            <summary>Initializes the transport.</summary>
            <param name="socketBufferSize">How big the socket's send and receive buffers should be.</param>
        </member>
        <member name="M:Riptide.Experimental.TcpTransport.TcpPeer.OnDataReceived(System.Int32,Riptide.Experimental.TcpTransport.TcpConnection)">
            <summary>Handles received data.</summary>
            <param name="amount">The number of bytes that were received.</param>
            <param name="fromConnection">The connection from which the data was received.</param>
        </member>
        <member name="M:Riptide.Experimental.TcpTransport.TcpPeer.OnDisconnected(Riptide.Connection,Riptide.DisconnectReason)">
            <summary>Invokes the <see cref="E:Riptide.Experimental.TcpTransport.TcpPeer.Disconnected"/> event.</summary>
            <param name="connection">The closed connection.</param>
            <param name="reason">The reason for the disconnection.</param>
        </member>
        <member name="T:Riptide.Experimental.TcpTransport.TcpServer">
            <summary>A server which can accept connections from <see cref="T:Riptide.Experimental.TcpTransport.TcpClient"/>s.</summary>
        </member>
        <member name="E:Riptide.Experimental.TcpTransport.TcpServer.Connected">
            <inheritdoc/>
        </member>
        <member name="E:Riptide.Experimental.TcpTransport.TcpServer.DataReceived">
            <inheritdoc/>
        </member>
        <member name="P:Riptide.Experimental.TcpTransport.TcpServer.Port">
            <inheritdoc/>
        </member>
        <member name="P:Riptide.Experimental.TcpTransport.TcpServer.MaxPendingConnections">
            <summary>The maximum number of pending connections to allow at any given time.</summary>
        </member>
        <member name="F:Riptide.Experimental.TcpTransport.TcpServer.isRunning">
            <summary>Whether or not the server is running.</summary>
        </member>
        <member name="F:Riptide.Experimental.TcpTransport.TcpServer.connections">
            <summary>The currently open connections, accessible by their endpoints.</summary>
        </member>
        <member name="F:Riptide.Experimental.TcpTransport.TcpServer.closedConnections">
            <summary>Connections that need to be closed.</summary>
        </member>
        <member name="M:Riptide.Experimental.TcpTransport.TcpServer.#ctor(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Experimental.TcpTransport.TcpServer.Start(System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Experimental.TcpTransport.TcpServer.StartListening(System.UInt16)">
            <summary>Starts listening for connections on the given port.</summary>
            <param name="port">The port to listen on.</param>
        </member>
        <member name="M:Riptide.Experimental.TcpTransport.TcpServer.Tick">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Experimental.TcpTransport.TcpServer.Accept">
            <summary>Accepts any pending connections.</summary>
        </member>
        <member name="M:Riptide.Experimental.TcpTransport.TcpServer.StopListening">
            <summary>Stops listening for connections.</summary>
        </member>
        <member name="M:Riptide.Experimental.TcpTransport.TcpServer.Close(Riptide.Connection)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Experimental.TcpTransport.TcpServer.Shutdown">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Experimental.TcpTransport.TcpServer.OnConnected(Riptide.Connection)">
            <summary>Invokes the <see cref="E:Riptide.Experimental.TcpTransport.TcpServer.Connected"/> event.</summary>
            <param name="connection">The successfully established connection.</param>
        </member>
        <member name="M:Riptide.Experimental.TcpTransport.TcpServer.OnDataReceived(System.Int32,Riptide.Experimental.TcpTransport.TcpConnection)">
            <inheritdoc/>
        </member>
        <member name="T:Riptide.Utils.ActionQueue">
            <summary>Provides functionality for queueing methods for later execution from a chosen thread.</summary>
        </member>
        <member name="F:Riptide.Utils.ActionQueue.LogName">
            <summary>The name to use when logging messages via <see cref="T:Riptide.Utils.RiptideLogger"/>.</summary>
        </member>
        <member name="M:Riptide.Utils.ActionQueue.#ctor(System.String)">
            <summary>Handles initial setup.</summary>
            <param name="logName">The name to use when logging messages via <see cref="T:Riptide.Utils.RiptideLogger"/>.</param>
        </member>
        <member name="M:Riptide.Utils.ActionQueue.Add(System.Action)">
            <summary>Adds an action to the queue.</summary>
            <param name="action">The action to be added to the queue.</param>
        </member>
        <member name="M:Riptide.Utils.ActionQueue.ExecuteAll">
            <summary>Executes all actions in the queue on the calling thread.</summary>
            <remarks>This method should only be called from a single thread in the application.</remarks>
        </member>
        <member name="M:Riptide.Utils.ActionQueue.Clear">
            <summary>Clears all actions in the queue without executing them.</summary>
        </member>
        <member name="T:Riptide.Utils.Converter">
            <summary>Provides functionality for converting bytes to various value types and vice versa.</summary>
        </member>
        <member name="M:Riptide.Utils.Converter.FromShort(System.Int16,System.Byte[],System.Int32)">
            <summary>Converts a given <see cref="T:System.Int16"/> to bytes and writes them into the given array.</summary>
            <param name="value">The <see cref="T:System.Int16"/> to convert.</param>
            <param name="array">The array to write the bytes into.</param>
            <param name="startIndex">The position in the array at which to write the bytes.</param>
        </member>
        <member name="M:Riptide.Utils.Converter.FromUShort(System.UInt16,System.Byte[],System.Int32)">
            <summary>Converts a given <see cref="T:System.UInt16"/> to bytes and writes them into the given array.</summary>
            <param name="value">The <see cref="T:System.UInt16"/> to convert.</param>
            <param name="array">The array to write the bytes into.</param>
            <param name="startIndex">The position in the array at which to write the bytes.</param>
        </member>
        <member name="M:Riptide.Utils.Converter.ToShort(System.Byte[],System.Int32)">
            <summary>Converts the 2 bytes in the array at <paramref name="startIndex"/> to a <see cref="T:System.Int16"/>.</summary>
            <param name="array">The array to read the bytes from.</param>
            <param name="startIndex">The position in the array at which to read the bytes.</param>
            <returns>The converted <see cref="T:System.Int16"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.Converter.ToUShort(System.Byte[],System.Int32)">
            <summary>Converts the 2 bytes in the array at <paramref name="startIndex"/> to a <see cref="T:System.UInt16"/>.</summary>
            <param name="array">The array to read the bytes from.</param>
            <param name="startIndex">The position in the array at which to read the bytes.</param>
            <returns>The converted <see cref="T:System.UInt16"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.Converter.FromInt(System.Int32,System.Byte[],System.Int32)">
            <summary>Converts a given <see cref="T:System.Int32"/> to bytes and writes them into the given array.</summary>
            <param name="value">The <see cref="T:System.Int32"/> to convert.</param>
            <param name="array">The array to write the bytes into.</param>
            <param name="startIndex">The position in the array at which to write the bytes.</param>
        </member>
        <member name="M:Riptide.Utils.Converter.FromUInt(System.UInt32,System.Byte[],System.Int32)">
            <summary>Converts a given <see cref="T:System.UInt32"/> to bytes and writes them into the given array.</summary>
            <param name="value">The <see cref="T:System.UInt32"/> to convert.</param>
            <param name="array">The array to write the bytes into.</param>
            <param name="startIndex">The position in the array at which to write the bytes.</param>
        </member>
        <member name="M:Riptide.Utils.Converter.ToInt(System.Byte[],System.Int32)">
            <summary>Converts the 4 bytes in the array at <paramref name="startIndex"/> to a <see cref="T:System.Int32"/>.</summary>
            <param name="array">The array to read the bytes from.</param>
            <param name="startIndex">The position in the array at which to read the bytes.</param>
            <returns>The converted <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.Converter.ToUInt(System.Byte[],System.Int32)">
            <summary>Converts the 4 bytes in the array at <paramref name="startIndex"/> to a <see cref="T:System.UInt32"/>.</summary>
            <param name="array">The array to read the bytes from.</param>
            <param name="startIndex">The position in the array at which to read the bytes.</param>
            <returns>The converted <see cref="T:System.UInt32"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.Converter.FromLong(System.Int64,System.Byte[],System.Int32)">
            <summary>Converts a given <see cref="T:System.Int64"/> to bytes and writes them into the given array.</summary>
            <param name="value">The <see cref="T:System.Int64"/> to convert.</param>
            <param name="array">The array to write the bytes into.</param>
            <param name="startIndex">The position in the array at which to write the bytes.</param>
        </member>
        <member name="M:Riptide.Utils.Converter.FromULong(System.UInt64,System.Byte[],System.Int32)">
            <summary>Converts a given <see cref="T:System.UInt64"/> to bytes and writes them into the given array.</summary>
            <param name="value">The <see cref="T:System.UInt64"/> to convert.</param>
            <param name="array">The array to write the bytes into.</param>
            <param name="startIndex">The position in the array at which to write the bytes.</param>
        </member>
        <member name="M:Riptide.Utils.Converter.ToLong(System.Byte[],System.Int32)">
            <summary>Converts the 8 bytes in the array at <paramref name="startIndex"/> to a <see cref="T:System.Int64"/>.</summary>
            <param name="array">The array to read the bytes from.</param>
            <param name="startIndex">The position in the array at which to read the bytes.</param>
            <returns>The converted <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.Converter.ToULong(System.Byte[],System.Int32)">
            <summary>Converts the 8 bytes in the array at <paramref name="startIndex"/> to a <see cref="T:System.UInt64"/>.</summary>
            <param name="array">The array to read the bytes from.</param>
            <param name="startIndex">The position in the array at which to read the bytes.</param>
            <returns>The converted <see cref="T:System.UInt64"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.Converter.FromFloat(System.Single,System.Byte[],System.Int32)">
            <summary>Converts a given <see cref="T:System.Single"/> to bytes and writes them into the given array.</summary>
            <param name="value">The <see cref="T:System.Single"/> to convert.</param>
            <param name="array">The array to write the bytes into.</param>
            <param name="startIndex">The position in the array at which to write the bytes.</param>
        </member>
        <member name="M:Riptide.Utils.Converter.ToFloat(System.Byte[],System.Int32)">
            <summary>Converts the 4 bytes in the array at <paramref name="startIndex"/> to a <see cref="T:System.Single"/>.</summary>
            <param name="array">The array to read the bytes from.</param>
            <param name="startIndex">The position in the array at which to read the bytes.</param>
            <returns>The converted <see cref="T:System.Single"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.Converter.FromDouble(System.Double,System.Byte[],System.Int32)">
            <summary>Converts a given <see cref="T:System.Double"/> to bytes and writes them into the given array.</summary>
            <param name="value">The <see cref="T:System.Double"/> to convert.</param>
            <param name="array">The array to write the bytes into.</param>
            <param name="startIndex">The position in the array at which to write the bytes.</param>
        </member>
        <member name="M:Riptide.Utils.Converter.ToDouble(System.Byte[],System.Int32)">
            <summary>Converts the 8 bytes in the array at <paramref name="startIndex"/> to a <see cref="T:System.Double"/>.</summary>
            <param name="array">The array to read the bytes from.</param>
            <param name="startIndex">The position in the array at which to read the bytes.</param>
            <returns>The converted <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="T:Riptide.Utils.DelayedEvent">
            <summary>Executes an action when invoked.</summary>
        </member>
        <member name="M:Riptide.Utils.DelayedEvent.Invoke">
            <summary>Executes the action.</summary>
        </member>
        <member name="T:Riptide.Utils.PendingMessageResendEvent">
            <summary>Resends a <see cref="T:Riptide.PendingMessage"/> when invoked.</summary>
        </member>
        <member name="F:Riptide.Utils.PendingMessageResendEvent.message">
            <summary>The message to resend.</summary>
        </member>
        <member name="F:Riptide.Utils.PendingMessageResendEvent.initiatedAtTime">
            <summary>The time at which the resend event was queued.</summary>
        </member>
        <member name="M:Riptide.Utils.PendingMessageResendEvent.#ctor(Riptide.PendingMessage,System.Int64)">
            <summary>Initializes the event.</summary>
            <param name="message">The message to resend.</param>
            <param name="initiatedAtTime">The time at which the resend event was queued.</param>
        </member>
        <member name="M:Riptide.Utils.PendingMessageResendEvent.Invoke">
            <inheritdoc/>
        </member>
        <member name="T:Riptide.Utils.HeartbeatEvent">
            <summary>Executes a heartbeat when invoked.</summary>
        </member>
        <member name="F:Riptide.Utils.HeartbeatEvent.peer">
            <summary>The peer whose heart to beat.</summary>
        </member>
        <member name="M:Riptide.Utils.HeartbeatEvent.#ctor(Riptide.Peer)">
            <summary>Initializes the event.</summary>
            <param name="peer">The peer whose heart to beat.</param>
        </member>
        <member name="M:Riptide.Utils.HeartbeatEvent.Invoke">
            <inheritdoc/>
        </member>
        <member name="T:Riptide.Utils.Extensions">
            <summary>Contains extension methods for various classes.</summary>
        </member>
        <member name="M:Riptide.Utils.Extensions.ToStringBasedOnIPFormat(System.Net.IPEndPoint)">
            <summary>Takes the <see cref="T:System.Net.IPEndPoint"/>'s IP address and port number and converts it to a string, accounting for whether the address is an IPv4 or IPv6 address.</summary>
            <returns>A string containing the IP address and port number of the endpoint.</returns>
        </member>
        <member name="T:Riptide.Utils.Helper">
            <summary>Contains miscellaneous helper methods.</summary>
        </member>
        <member name="M:Riptide.Utils.Helper.CorrectForm(System.Int32,System.String,System.String)">
            <summary>Determines whether <paramref name="singular"/> or <paramref name="plural"/> form should be used based on the <paramref name="amount"/>.</summary>
            <param name="amount">The amount that <paramref name="singular"/> and <paramref name="plural"/> refer to.</param>
            <param name="singular">The singular form.</param>
            <param name="plural">The plural form.</param>
            <returns><paramref name="singular"/> if <paramref name="amount"/> is 1; otherwise <paramref name="plural"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.Helper.GetSequenceGap(System.UInt16,System.UInt16)">
            <summary>Calculates the signed gap between sequence IDs, accounting for wrapping.</summary>
            <param name="seqId1">The new sequence ID.</param>
            <param name="seqId2">The previous sequence ID.</param>
            <returns>The signed gap between the two given sequence IDs. A positive gap means <paramref name="seqId1"/> is newer than <paramref name="seqId2"/>. A negative gap means <paramref name="seqId1"/> is older than <paramref name="seqId2"/>.</returns>
        </member>
        <member name="T:Riptide.Utils.BroadcastMode">
            <summary>Defines broadcast modes.</summary>
        </member>
        <member name="F:Riptide.Utils.BroadcastMode.none">
            <summary>Not currently broadcasting or listening for broadcasts.</summary>
        </member>
        <member name="F:Riptide.Utils.BroadcastMode.broadcasting">
            <summary>Currently broadcasting.</summary>
        </member>
        <member name="F:Riptide.Utils.BroadcastMode.listening">
            <summary>Currently listening for broadcasts.</summary>
        </member>
        <member name="T:Riptide.Utils.LanDiscovery">
            <summary>Provides functionality for discovering game hosts over LAN.</summary>
        </member>
        <member name="E:Riptide.Utils.LanDiscovery.HostDiscovered">
            <summary>Invoked when a host is found on the LAN.</summary>
        </member>
        <member name="P:Riptide.Utils.LanDiscovery.UniqueKey">
            <summary>This app's unique key, used to determine whether to handle or ignore received data.</summary>
        </member>
        <member name="P:Riptide.Utils.LanDiscovery.Mode">
            <summary>The current broadcast mode.</summary>
        </member>
        <member name="P:Riptide.Utils.LanDiscovery.BroadcastPort">
            <summary>The port to send broadcasts to/listen for broadcasts on.</summary>
        </member>
        <member name="P:Riptide.Utils.LanDiscovery.HostIP">
            <summary>The IP to broadcast.</summary>
        </member>
        <member name="P:Riptide.Utils.LanDiscovery.HostPort">
            <summary>The port to broadcast.</summary>
        </member>
        <member name="F:Riptide.Utils.LanDiscovery.localIPAdress">
            <summary>The current machine's local IP.</summary>
        </member>
        <member name="F:Riptide.Utils.LanDiscovery.subnetMask">
            <summary>The subnet mask for <see cref="F:Riptide.Utils.LanDiscovery.localIPAdress"/>.</summary>
        </member>
        <member name="F:Riptide.Utils.LanDiscovery.broadcastEndPoint">
            <summary>The endpoint to which to send data in order to broadcast it to all machines on the LAN.</summary>
        </member>
        <member name="F:Riptide.Utils.LanDiscovery.socket">
            <summary>The socket used to send and listen for broadcasted data.</summary>
        </member>
        <member name="F:Riptide.Utils.LanDiscovery.endPoint">
            <summary>A reusable <see cref="T:System.Net.EndPoint"/> instance.</summary>
        </member>
        <member name="F:Riptide.Utils.LanDiscovery.broadcastSendBytes">
            <summary>The array used to broadcast data.</summary>
        </member>
        <member name="F:Riptide.Utils.LanDiscovery.broadcastReceiveBytes">
            <summary>The array into which broadcasted data is received.</summary>
        </member>
        <member name="F:Riptide.Utils.LanDiscovery.actionQueue">
            <summary>The <see cref="T:Riptide.Utils.ActionQueue"/> to use when invoking events.</summary>
        </member>
        <member name="M:Riptide.Utils.LanDiscovery.#ctor(System.Int64,System.UInt16)">
            <summary>Handles initial setup.</summary>
            <param name="uniqueKey">This app's unique key, used to determine whether to handle or ignore received data.</param>
            <param name="broadcastPort">The port to send broadcasts to/listen for broadcasts on.</param>
        </member>
        <member name="M:Riptide.Utils.LanDiscovery.SendBroadcast">
            <summary>Sends a broadcast to all machines on the LAN.</summary>
        </member>
        <member name="M:Riptide.Utils.LanDiscovery.SendBroadcastResponse(System.Net.IPEndPoint)">
            <summary>Sends a response to a broadcast.</summary>
            <param name="toEndPoint">The endpoint to send the response to.</param>
        </member>
        <member name="M:Riptide.Utils.LanDiscovery.StartListening">
            <summary>Begins listening for broadcasted data.</summary>
        </member>
        <member name="M:Riptide.Utils.LanDiscovery.ReceiveCallback(System.IAsyncResult)">
            <summary>Receives data.</summary>
        </member>
        <member name="M:Riptide.Utils.LanDiscovery.Tick">
            <summary>Initiates execution of any queued event invocations.</summary>
            <remarks>This should generally be called from within a regularly executed update loop (like FixedUpdate in Unity). Broadcasts will continue to discover hosts on the LAN in between calls, but the <see cref="E:Riptide.Utils.LanDiscovery.HostDiscovered"/> event won't be invoked until this method is executed.</remarks>
        </member>
        <member name="M:Riptide.Utils.LanDiscovery.SetBroadcastData">
            <summary>Sets the data that will be sent as part of a broadcast.</summary>
        </member>
        <member name="M:Riptide.Utils.LanDiscovery.SetBroadcastResponseData">
            <summary>Sets the data that will be sent in response to a broadcast.</summary>
        </member>
        <member name="M:Riptide.Utils.LanDiscovery.HandleBroadcastData(System.Int32)">
            <summary>Handles the data received as part of a broadcast.</summary>
            <param name="bytesReceived">The number of bytes that were received.</param>
        </member>
        <member name="M:Riptide.Utils.LanDiscovery.HandleBroadcastResponseData(System.Int32)">
            <summary>Handles the data received in response to a broadcast.</summary>
            <param name="bytesReceived">The number of bytes that were received.</param>
        </member>
        <member name="M:Riptide.Utils.LanDiscovery.Restart">
            <summary>Stops all broadcast activities and prepares this <see cref="T:Riptide.Utils.LanDiscovery"/> instance for reuse.</summary>
        </member>
        <member name="M:Riptide.Utils.LanDiscovery.Stop">
            <summary>Stops all broadcast activities.</summary>
        </member>
        <member name="M:Riptide.Utils.LanDiscovery.GetLocalIPAddress">
            <summary>Retrieves the current machine's local IP.</summary>
            <returns>The current machine's local IP.</returns>
        </member>
        <member name="M:Riptide.Utils.LanDiscovery.GetBroadcastAddress(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>Calculates the broadcast address, given an IP and its subnet mask.</summary>
            <param name="address">The IP to use.</param>
            <param name="subnetMask">The subnet mask to use.</param>
            <returns>The calculated broadcast address.</returns>
        </member>
        <member name="M:Riptide.Utils.LanDiscovery.GetSubnetMask(System.Net.IPAddress)">
            <summary>Takes an IP and retrieves its subnet mask.</summary>
            <param name="address">The IP for which to retrieve the subnet mask.</param>
            <returns>The retrieved subnet mask.</returns>
        </member>
        <member name="M:Riptide.Utils.LanDiscovery.OnHostDiscovered(System.Net.IPAddress,System.UInt16)">
            <summary>Invokes the <see cref="E:Riptide.Utils.LanDiscovery.HostDiscovered"/>.</summary>
            <param name="ip">The IP of the discovered host.</param>
            <param name="port">The port of the discovered host.</param>
        </member>
        <member name="T:Riptide.Utils.HostDiscoveredEventArgs">
            <summary>Contains event data for when a host is discovered on the LAN.</summary>
        </member>
        <member name="P:Riptide.Utils.HostDiscoveredEventArgs.HostIP">
            <summary>The IP of the discovered host.</summary>
        </member>
        <member name="P:Riptide.Utils.HostDiscoveredEventArgs.HostPort">
            <summary>The port of the discovered host.</summary>
        </member>
        <member name="M:Riptide.Utils.HostDiscoveredEventArgs.#ctor(System.Net.IPAddress,System.UInt16)">
            <summary>Initializes event data.</summary>
            <param name="hostIP">The IP of the discovered host.</param>
            <param name="hostPort">The port of the discovered host.</param>
        </member>
        <member name="T:Riptide.Utils.PriorityQueue`2">
            <summary>Represents a collection of items that have a value and a priority. On dequeue, the item with the lowest priority value is removed.</summary>
            <typeparam name="TElement">Specifies the type of elements in the queue.</typeparam>
            <typeparam name="TPriority">Specifies the type of priority associated with enqueued elements.</typeparam>
        </member>
        <member name="P:Riptide.Utils.PriorityQueue`2.Count">
            <summary>Gets the number of elements contained in the <see cref="T:Riptide.Utils.PriorityQueue`2"/>.</summary>
        </member>
        <member name="M:Riptide.Utils.PriorityQueue`2.Enqueue(`0,`1)">
            <summary>Adds the specified element and associated priority to the <see cref="T:Riptide.Utils.PriorityQueue`2"/>.</summary>
            <param name="element">The element to add.</param>
            <param name="priority">The priority with which to associate the new element.</param>
        </member>
        <member name="M:Riptide.Utils.PriorityQueue`2.Dequeue">
            <summary>Removes and returns the lowest priority element.</summary>
        </member>
        <member name="M:Riptide.Utils.PriorityQueue`2.PeekPriority">
            <summary>Returns the priority of the lowest priority element.</summary>
        </member>
        <member name="M:Riptide.Utils.PriorityQueue`2.Clear">
            <summary>Removes all elements from the <see cref="T:Riptide.Utils.PriorityQueue`2"/>.</summary>
        </member>
        <member name="T:Riptide.Utils.LogType">
            <summary>Defines log message types.</summary>
        </member>
        <member name="F:Riptide.Utils.LogType.debug">
            <summary>Logs that are used for investigation during development.</summary>
        </member>
        <member name="F:Riptide.Utils.LogType.info">
            <summary>Logs that provide general information about application flow.</summary>
        </member>
        <member name="F:Riptide.Utils.LogType.warning">
            <summary>Logs that highlight abnormal or unexpected events in the application flow.</summary>
        </member>
        <member name="F:Riptide.Utils.LogType.error">
            <summary>Logs that highlight problematic events in the application flow which will cause unexpected behavior if not planned for.</summary>
        </member>
        <member name="T:Riptide.Utils.RiptideLogger">
            <summary>Provides functionality for logging messages.</summary>
        </member>
        <member name="P:Riptide.Utils.RiptideLogger.IsDebugLoggingEnabled">
            <summary>Whether or not <see cref="F:Riptide.Utils.LogType.debug"/> messages will be logged.</summary>
        </member>
        <member name="P:Riptide.Utils.RiptideLogger.IsInfoLoggingEnabled">
            <summary>Whether or not <see cref="F:Riptide.Utils.LogType.info"/> messages will be logged.</summary>
        </member>
        <member name="P:Riptide.Utils.RiptideLogger.IsWarningLoggingEnabled">
            <summary>Whether or not <see cref="F:Riptide.Utils.LogType.warning"/> messages will be logged.</summary>
        </member>
        <member name="P:Riptide.Utils.RiptideLogger.IsErrorLoggingEnabled">
            <summary>Whether or not <see cref="F:Riptide.Utils.LogType.error"/> messages will be logged.</summary>
        </member>
        <member name="T:Riptide.Utils.RiptideLogger.LogMethod">
            <summary>Encapsulates a method used to log messages.</summary>
            <param name="log">The message to log.</param>
        </member>
        <member name="F:Riptide.Utils.RiptideLogger.logMethods">
            <summary>Log methods, accessible by their <see cref="T:Riptide.Utils.LogType"/></summary>
        </member>
        <member name="F:Riptide.Utils.RiptideLogger.includeTimestamps">
            <summary>Whether or not to include timestamps when logging messages.</summary>
        </member>
        <member name="F:Riptide.Utils.RiptideLogger.timestampFormat">
            <summary>The format to use for timestamps.</summary>
        </member>
        <member name="M:Riptide.Utils.RiptideLogger.Initialize(Riptide.Utils.RiptideLogger.LogMethod,System.Boolean,System.String)">
            <summary>Initializes <see cref="T:Riptide.Utils.RiptideLogger"/> with all log types enabled.</summary>
            <param name="logMethod">The method to use when logging all types of messages.</param>
            <param name="includeTimestamps">Whether or not to include timestamps when logging messages.</param>
            <param name="timestampFormat">The format to use for timestamps.</param>
        </member>
        <member name="M:Riptide.Utils.RiptideLogger.Initialize(Riptide.Utils.RiptideLogger.LogMethod,Riptide.Utils.RiptideLogger.LogMethod,Riptide.Utils.RiptideLogger.LogMethod,Riptide.Utils.RiptideLogger.LogMethod,System.Boolean,System.String)">
            <summary>Initializes <see cref="T:Riptide.Utils.RiptideLogger"/> with the supplied log methods.</summary>
            <param name="debugMethod">The method to use when logging debug messages. Set to <see langword="null"/> to disable debug logs.</param>
            <param name="infoMethod">The method to use when logging info messages. Set to <see langword="null"/> to disable info logs.</param>
            <param name="warningMethod">The method to use when logging warning messages. Set to <see langword="null"/> to disable warning logs.</param>
            <param name="errorMethod">The method to use when logging error messages. Set to <see langword="null"/> to disable error logs.</param>
            <param name="includeTimestamps">Whether or not to include timestamps when logging messages.</param>
            <param name="timestampFormat">The format to use for timestamps.</param>
        </member>
        <member name="M:Riptide.Utils.RiptideLogger.EnableLoggingFor(Riptide.Utils.LogType,Riptide.Utils.RiptideLogger.LogMethod)">
            <summary>Enables logging for messages of the given <see cref="T:Riptide.Utils.LogType"/>.</summary>
            <param name="logType">The type of message to enable logging for.</param>
            <param name="logMethod">The method to use when logging this type of message.</param>
        </member>
        <member name="M:Riptide.Utils.RiptideLogger.DisableLoggingFor(Riptide.Utils.LogType)">
            <summary>Disables logging for messages of the given <see cref="T:Riptide.Utils.LogType"/>.</summary>
            <param name="logType">The type of message to enable logging for.</param>
        </member>
        <member name="M:Riptide.Utils.RiptideLogger.Log(Riptide.Utils.LogType,System.String)">
            <summary>Logs a message.</summary>
            <param name="logType">The type of log message that is being logged.</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Riptide.Utils.RiptideLogger.Log(Riptide.Utils.LogType,System.String,System.String)">
            <summary>Logs a message.</summary>
            <param name="logType">The type of log message that is being logged.</param>
            <param name="logName">Who is logging this message.</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Riptide.Utils.RiptideLogger.GetTimestamp(System.DateTime)">
            <summary>Converts a <see cref="T:System.DateTime"/> object to a formatted timestamp string.</summary>
            <param name="time">The time to format.</param>
            <returns>The formatted timestamp.</returns>
        </member>
    </members>
</doc>
