<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RiptideNetworking</name>
    </assembly>
    <members>
        <member name="T:Riptide.Client">
            <summary>A client that can connect to a <see cref="T:Riptide.Server"/>.</summary>
        </member>
        <member name="E:Riptide.Client.Connected">
            <inheritdoc cref="E:Riptide.Transports.IClient.Connected"/>
        </member>
        <member name="E:Riptide.Client.ConnectionFailed">
            <inheritdoc cref="E:Riptide.Transports.IClient.ConnectionFailed"/>
        </member>
        <member name="E:Riptide.Client.MessageReceived">
            <inheritdoc cref="E:Riptide.Transports.IClient.MessageReceived"/>
        </member>
        <member name="E:Riptide.Client.Disconnected">
            <inheritdoc cref="E:Riptide.Transports.IClient.Disconnected"/>
        </member>
        <member name="E:Riptide.Client.ClientConnected">
            <inheritdoc cref="E:Riptide.Transports.IClient.ClientConnected"/>
        </member>
        <member name="E:Riptide.Client.ClientDisconnected">
            <inheritdoc cref="E:Riptide.Transports.IClient.ClientDisconnected"/>
        </member>
        <member name="P:Riptide.Client.Id">
            <inheritdoc cref="P:Riptide.Transports.IConnectionInfo.Id"/>
        </member>
        <member name="P:Riptide.Client.RTT">
            <inheritdoc cref="P:Riptide.Transports.IConnectionInfo.RTT"/>
        </member>
        <member name="P:Riptide.Client.SmoothRTT">
            <inheritdoc cref="P:Riptide.Transports.IConnectionInfo.SmoothRTT"/>
        </member>
        <member name="P:Riptide.Client.IsNotConnected">
            <inheritdoc cref="P:Riptide.Transports.IConnectionInfo.IsNotConnected"/>
        </member>
        <member name="P:Riptide.Client.IsConnecting">
            <inheritdoc cref="P:Riptide.Transports.IConnectionInfo.IsConnecting"/>
        </member>
        <member name="P:Riptide.Client.IsConnected">
            <inheritdoc cref="P:Riptide.Transports.IConnectionInfo.IsConnected"/>
        </member>
        <member name="T:Riptide.Client.MessageHandler">
            <summary>Encapsulates a method that handles a message from the server.</summary>
            <param name="message">The message that was received.</param>
        </member>
        <member name="F:Riptide.Client.messageHandlers">
            <summary>Methods used to handle messages, accessible by their corresponding message IDs.</summary>
        </member>
        <member name="F:Riptide.Client.client">
            <summary>The underlying client that is used for sending and receiving data.</summary>
        </member>
        <member name="M:Riptide.Client.#ctor(Riptide.Transports.IClient)">
            <summary>Handles initial setup.</summary>
            <param name="client">The underlying client that is used for sending and receiving data.</param>
        </member>
        <member name="M:Riptide.Client.#ctor(System.UInt16,System.UInt16,System.Byte,System.String)">
            <summary>Handles initial setup using the built-in RUDP transport.</summary>
            <param name="timeoutTime">The time (in milliseconds) after which to disconnect if there's no heartbeat from the server.</param>
            <param name="heartbeatInterval">The interval (in milliseconds) at which heartbeats should be sent to the server.</param>
            <param name="maxConnectionAttempts">How many connection attempts to make before giving up.</param>
            <param name="logName">The name to use when logging messages via <see cref="T:Riptide.Utils.RiptideLogger"/>.</param>
        </member>
        <member name="M:Riptide.Client.ChangeTransport(Riptide.Transports.IClient)">
            <summary>Disconnects the client if it's connected and swaps out the transport it's using.</summary>
            <param name="client">The underlying client that is used for managing the connection to the server.</param>
            <remarks>This method does not automatically reconnect to the server. To continue communicating with the server, <see cref="M:Riptide.Client.Connect(System.String,System.Byte,Riptide.Message)"/> will need to be called again.</remarks>
        </member>
        <member name="M:Riptide.Client.Connect(System.String,System.Byte,Riptide.Message)">
            <summary>Attempts to connect to the given host address.</summary>
            <param name="hostAddress">The host address to connect to.</param>
            <param name="messageHandlerGroupId">The ID of the group of message handler methods to use when building <see cref="F:Riptide.Client.messageHandlers"/>.</param>
            <param name="message">A message containing data that should be sent to the server with the connection attempt. Use <see cref="M:Riptide.Message.Create"/> to get an empty message instance.</param>
            <remarks>
              Riptide's default transport expects the host address to consist of an IP and port, separated by a colon. For example: <c>127.0.0.1:7777</c>.<br/>
              If you are using a different transport, check the relevant documentation for what information it requires in the host address.
            </remarks>
            <returns><see langword="true"/> if the <paramref name="hostAddress"/> was in a valid format; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Riptide.Client.CreateMessageHandlersDictionary(System.Reflection.Assembly,System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Client.Tick">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Client.Send(Riptide.Message,System.Boolean)">
            <inheritdoc cref="M:Riptide.Transports.IClient.Send(Riptide.Message,System.Boolean)"/>
        </member>
        <member name="M:Riptide.Client.Disconnect">
            <summary>Disconnects from the server.</summary>
        </member>
        <member name="M:Riptide.Client.LocalDisconnect">
            <summary>Cleans up local objects on disconnection.</summary>
        </member>
        <member name="M:Riptide.Client.OnConnected(System.Object,System.EventArgs)">
            <summary>Invokes the <see cref="E:Riptide.Client.Connected"/> event.</summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event args to invoke the event with.</param>
        </member>
        <member name="M:Riptide.Client.OnConnectionFailed(System.Object,System.EventArgs)">
            <summary>Invokes the <see cref="E:Riptide.Client.ConnectionFailed"/> event.</summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event args to invoke the event with.</param>
        </member>
        <member name="M:Riptide.Client.OnMessageReceived(System.Object,Riptide.ClientMessageReceivedEventArgs)">
            <summary>Invokes the <see cref="E:Riptide.Client.MessageReceived"/> event and initiates handling of the received message.</summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event args to invoke the event with.</param>
        </member>
        <member name="M:Riptide.Client.OnDisconnected(System.Object,Riptide.DisconnectedEventArgs)">
            <summary>Invokes the <see cref="E:Riptide.Client.Disconnected"/> event.</summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event args to invoke the event with.</param>
        </member>
        <member name="M:Riptide.Client.OnClientConnected(System.Object,Riptide.ClientConnectedEventArgs)">
            <summary>Invokes the <see cref="E:Riptide.Client.ClientConnected"/> event.</summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event args to invoke the event with.</param>
        </member>
        <member name="M:Riptide.Client.OnClientDisconnected(System.Object,Riptide.ClientDisconnectedEventArgs)">
            <summary>Invokes the <see cref="E:Riptide.Client.ClientDisconnected"/> event.</summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event args to invoke the event with.</param>
        </member>
        <member name="T:Riptide.DisconnectReason">
            <summary>The reason for a disconnection.</summary>
        </member>
        <member name="F:Riptide.DisconnectReason.timedOut">
            <summary>For when a client's connection times out. This also acts as the fallback reasonâ€”if a client disconnects and the message containing the <i>real</i> reason is lost in transmission, it can't
            be resent as the connection will have already been closed. As a result, the other end will time out the connection after a short period of time and this will be used as the reason.</summary>
        </member>
        <member name="F:Riptide.DisconnectReason.kicked">
            <summary>For when a client is forcibly disconnected by the server.</summary>
        </member>
        <member name="F:Riptide.DisconnectReason.serverStopped">
            <summary>For when the server shuts down.</summary>
        </member>
        <member name="F:Riptide.DisconnectReason.disconnected">
            <summary>For when a client voluntarily disconnects.</summary>
        </member>
        <member name="T:Riptide.Common">
            <summary>Contains shared functionality for <see cref="T:Riptide.Server"/> and <see cref="T:Riptide.Client"/>.</summary>
        </member>
        <member name="P:Riptide.Common.ActiveSocketCount">
            <summary>The number of currently active <see cref="T:Riptide.Server"/> and <see cref="T:Riptide.Client"/> instances.</summary>
        </member>
        <member name="M:Riptide.Common.IncreaseActiveSocketCount">
            <summary>Increases <see cref="P:Riptide.Common.ActiveSocketCount"/>. For use when a new <see cref="T:Riptide.Server"/> or <see cref="T:Riptide.Client"/> is started.</summary>
        </member>
        <member name="M:Riptide.Common.DecreaseActiveSocketCount">
            <summary>Decreases <see cref="P:Riptide.Common.ActiveSocketCount"/>. For use when a <see cref="T:Riptide.Server"/> or <see cref="T:Riptide.Client"/> is stopped.</summary>
        </member>
        <member name="M:Riptide.Common.CreateMessageHandlersDictionary(System.Reflection.Assembly,System.Byte)">
            <summary>Searches the given assembly for methods with the <see cref="T:Riptide.MessageHandlerAttribute"/> and adds them to the dictionary of handler methods.</summary>
            <param name="assembly">The assembly to search for methods with the <see cref="T:Riptide.MessageHandlerAttribute"/>.</param>
            <param name="messageHandlerGroupId">The ID of the group of message handler methods to use when building the message handlers dictionary.</param>
        </member>
        <member name="M:Riptide.Common.Tick">
            <inheritdoc cref="M:Riptide.Transports.ICommon.Tick"/>
        </member>
        <member name="T:Riptide.ServerClientConnectedEventArgs">
            <summary>Contains event data for when a client connects to the server.</summary>
        </member>
        <member name="P:Riptide.ServerClientConnectedEventArgs.Client">
            <summary>The newly connected client.</summary>
        </member>
        <member name="P:Riptide.ServerClientConnectedEventArgs.ConnectMessage">
            <summary>A message containing any custom data the client included when it connected.</summary>
        </member>
        <member name="M:Riptide.ServerClientConnectedEventArgs.#ctor(Riptide.Transports.IConnectionInfo,Riptide.Message)">
            <summary>Initializes event data.</summary>
            <param name="client">The newly connected client.</param>
            <param name="connectMessage">A message containing any custom data the client included when it connected.</param>
        </member>
        <member name="T:Riptide.ServerMessageReceivedEventArgs">
            <summary>Contains event data for when the server receives a message from a client.</summary>
        </member>
        <member name="P:Riptide.ServerMessageReceivedEventArgs.FromClientId">
            <summary>The client that the message was received from.</summary>
        </member>
        <member name="P:Riptide.ServerMessageReceivedEventArgs.MessageId">
            <summary>The ID of the message.</summary>
        </member>
        <member name="P:Riptide.ServerMessageReceivedEventArgs.Message">
            <summary>The message that was received.</summary>
        </member>
        <member name="M:Riptide.ServerMessageReceivedEventArgs.#ctor(System.UInt16,System.UInt16,Riptide.Message)">
            <summary>Initializes event data.</summary>
            <param name="fromClientId">The client that the message was received from.</param>
            <param name="messageId">The ID of the message.</param>
            <param name="message">The message that was received.</param>
        </member>
        <member name="T:Riptide.ClientDisconnectedEventArgs">
            <summary>Contains event data for when a client disconnects from the server.</summary>
        </member>
        <member name="P:Riptide.ClientDisconnectedEventArgs.Id">
            <summary>The numeric ID of the client that disconnected.</summary>
        </member>
        <member name="M:Riptide.ClientDisconnectedEventArgs.#ctor(System.UInt16)">
            <summary>Initializes event data.</summary>
            <param name="id">The numeric ID of the client that disconnected.</param>
        </member>
        <member name="T:Riptide.ClientConnectedEventArgs">
            <summary>Contains event data for when a new client connects.</summary>
        </member>
        <member name="P:Riptide.ClientConnectedEventArgs.Id">
            <summary>The numeric ID of the newly connected client.</summary>
        </member>
        <member name="M:Riptide.ClientConnectedEventArgs.#ctor(System.UInt16)">
            <summary>Initializes event data.</summary>
            <param name="id">The numeric ID of the newly connected client.</param>
        </member>
        <member name="T:Riptide.ClientMessageReceivedEventArgs">
            <summary>Contains event data for when the client receives a message from the server.</summary>
        </member>
        <member name="P:Riptide.ClientMessageReceivedEventArgs.MessageId">
            <summary>The ID of the message.</summary>
        </member>
        <member name="P:Riptide.ClientMessageReceivedEventArgs.Message">
            <summary>The message that was received.</summary>
        </member>
        <member name="M:Riptide.ClientMessageReceivedEventArgs.#ctor(System.UInt16,Riptide.Message)">
            <summary>Initializes event data.</summary>
            <param name="messageId">The ID of the message.</param>
            <param name="message">The message that was received.</param>
        </member>
        <member name="T:Riptide.DisconnectedEventArgs">
            <summary>Contains event data for when the client disconnects from a server.</summary>
        </member>
        <member name="P:Riptide.DisconnectedEventArgs.Reason">
            <summary>The reason for the disconnection.</summary>
        </member>
        <member name="P:Riptide.DisconnectedEventArgs.CustomMessage">
            <summary>The custom reason included with the disconnection information (if any).</summary>
        </member>
        <member name="M:Riptide.DisconnectedEventArgs.#ctor(Riptide.DisconnectReason,System.String)">
            <summary>Initializes event data.</summary>
            <param name="reason">The reason for the disconnection.</param>
            <param name="customMessage">The custom reason included with the disconnection information (if any).</param>
        </member>
        <member name="T:Riptide.InsufficientCapacityException">
            <summary>The exception that is thrown when a <see cref="T:Riptide.Message"/> does not contain enough unread bytes to add a certain value.</summary>
        </member>
        <member name="F:Riptide.InsufficientCapacityException.RiptideMessage">
            <summary>The message with insufficient remaining capacity.</summary>
        </member>
        <member name="F:Riptide.InsufficientCapacityException.TypeName">
            <summary>The name of the type which could not be added to the message.</summary>
        </member>
        <member name="F:Riptide.InsufficientCapacityException.RequiredBytes">
            <summary>The number of available bytes the type requires in order to be added successfully.</summary>
        </member>
        <member name="M:Riptide.InsufficientCapacityException.#ctor">
            <summary>Initializes a new <see cref="T:Riptide.InsufficientCapacityException"/> instance.</summary>
        </member>
        <member name="M:Riptide.InsufficientCapacityException.#ctor(System.String)">
            <summary>Initializes a new <see cref="T:Riptide.InsufficientCapacityException"/> instance with a specified error message.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Riptide.InsufficientCapacityException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new <see cref="T:Riptide.InsufficientCapacityException"/> instance with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. If <paramref name="inner"/> is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Riptide.InsufficientCapacityException.#ctor(Riptide.Message,System.String,System.Int32)">
            <summary>Initializes a new <see cref="T:Riptide.InsufficientCapacityException"/> instance and constructs an error message from the given information.</summary>
            <param name="message">The message with insufficient remaining capacity.</param>
            <param name="typeName">The name of the type which could not be added to the message.</param>
            <param name="requiredBytes">The number of available bytes required for the type to be added successfully.</param>
        </member>
        <member name="M:Riptide.InsufficientCapacityException.#ctor(Riptide.Message,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>Initializes a new <see cref="T:Riptide.InsufficientCapacityException"/> instance and constructs an error message from the given information.</summary>
            <param name="message">The message with insufficient remaining capacity.</param>
            <param name="arrayLength">The length of the array which could not be added to the message.</param>
            <param name="typeName">The name of the array's type.</param>
            <param name="requiredBytes">The number of available bytes required for a single element of the array to be added successfully.</param>
            <param name="totalRequiredBytes">The number of available bytes required for the entire array to be added successfully. If left as -1, this will be set to <paramref name="arrayLength"/> * <paramref name="requiredBytes"/>.</param>
        </member>
        <member name="M:Riptide.InsufficientCapacityException.GetErrorMessage(Riptide.Message,System.String,System.Int32)">
            <summary>Constructs the error message from the given information.</summary>
            <returns>The error message.</returns>
        </member>
        <member name="M:Riptide.InsufficientCapacityException.GetErrorMessage(Riptide.Message,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>Constructs the error message from the given information.</summary>
            <returns>The error message.</returns>
        </member>
        <member name="T:Riptide.NonStaticHandlerException">
            <summary>The exception that is thrown when a method with a <see cref="T:Riptide.MessageHandlerAttribute"/> is not marked as <see langword="static"/>.</summary>
        </member>
        <member name="F:Riptide.NonStaticHandlerException.DeclaringType">
            <summary>The type containing the handler method.</summary>
        </member>
        <member name="F:Riptide.NonStaticHandlerException.HandlerMethodName">
            <summary>The name of the handler method.</summary>
        </member>
        <member name="M:Riptide.NonStaticHandlerException.#ctor">
            <summary>Initializes a new <see cref="T:Riptide.NonStaticHandlerException"/> instance.</summary>
        </member>
        <member name="M:Riptide.NonStaticHandlerException.#ctor(System.String)">
            <summary>Initializes a new <see cref="T:Riptide.NonStaticHandlerException"/> instance with a specified error message.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Riptide.NonStaticHandlerException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new <see cref="T:Riptide.NonStaticHandlerException"/> instance with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. If <paramref name="inner"/> is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Riptide.NonStaticHandlerException.#ctor(System.Type,System.String)">
            <summary>Initializes a new <see cref="T:Riptide.NonStaticHandlerException"/> instance and constructs an error message from the given information.</summary>
            <param name="declaringType">The type containing the handler method.</param>
            <param name="handlerMethodName">The name of the handler method.</param>
        </member>
        <member name="M:Riptide.NonStaticHandlerException.GetErrorMessage(System.Type,System.String)">
            <summary>Constructs the error message from the given information.</summary>
            <returns>The error message.</returns>
        </member>
        <member name="T:Riptide.InvalidHandlerSignatureException">
            <summary>The exception that is thrown when a method with a <see cref="T:Riptide.MessageHandlerAttribute"/> does not have an acceptable message handler method signature (either <see cref="T:Riptide.Server.MessageHandler"/> or <see cref="T:Riptide.Client.MessageHandler"/>).</summary>
        </member>
        <member name="F:Riptide.InvalidHandlerSignatureException.DeclaringType">
            <summary>The type containing the handler method.</summary>
        </member>
        <member name="F:Riptide.InvalidHandlerSignatureException.HandlerMethodName">
            <summary>The name of the handler method.</summary>
        </member>
        <member name="M:Riptide.InvalidHandlerSignatureException.#ctor">
            <summary>Initializes a new <see cref="T:Riptide.InvalidHandlerSignatureException"/> instance.</summary>
        </member>
        <member name="M:Riptide.InvalidHandlerSignatureException.#ctor(System.String)">
            <summary>Initializes a new <see cref="T:Riptide.InvalidHandlerSignatureException"/> instance with a specified error message.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Riptide.InvalidHandlerSignatureException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new <see cref="T:Riptide.InvalidHandlerSignatureException"/> instance with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. If <paramref name="inner"/> is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Riptide.InvalidHandlerSignatureException.#ctor(System.Type,System.String)">
            <summary>Initializes a new <see cref="T:Riptide.InvalidHandlerSignatureException"/> instance and constructs an error message from the given information.</summary>
            <param name="declaringType">The type containing the handler method.</param>
            <param name="handlerMethodName">The name of the handler method.</param>
        </member>
        <member name="M:Riptide.InvalidHandlerSignatureException.GetErrorMessage(System.Type,System.String)">
            <summary>Constructs the error message from the given information.</summary>
            <returns>The error message.</returns>
        </member>
        <member name="T:Riptide.DuplicateHandlerException">
            <summary>The exception that is thrown when multiple methods with <see cref="T:Riptide.MessageHandlerAttribute"/>s are set to handle messages with the same ID <i>and</i> have the same method signature.</summary>
        </member>
        <member name="F:Riptide.DuplicateHandlerException.Id">
            <summary>The message ID with multiple handler methods.</summary>
        </member>
        <member name="F:Riptide.DuplicateHandlerException.DeclaringType1">
            <summary>The type containing the first handler method.</summary>
        </member>
        <member name="F:Riptide.DuplicateHandlerException.HandlerMethodName1">
            <summary>The name of the first handler method.</summary>
        </member>
        <member name="F:Riptide.DuplicateHandlerException.DeclaringType2">
            <summary>The type containing the second handler method.</summary>
        </member>
        <member name="F:Riptide.DuplicateHandlerException.HandlerMethodName2">
            <summary>The name of the second handler method.</summary>
        </member>
        <member name="M:Riptide.DuplicateHandlerException.#ctor">
            <summary>Initializes a new <see cref="T:Riptide.DuplicateHandlerException"/> instance with a specified error message.</summary>
        </member>
        <member name="M:Riptide.DuplicateHandlerException.#ctor(System.String)">
            <summary>Initializes a new <see cref="T:Riptide.DuplicateHandlerException"/> instance with a specified error message.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Riptide.DuplicateHandlerException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new <see cref="T:Riptide.DuplicateHandlerException"/> instance with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. If <paramref name="inner"/> is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Riptide.DuplicateHandlerException.#ctor(System.UInt16,System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>Initializes a new <see cref="T:Riptide.DuplicateHandlerException"/> instance and constructs an error message from the given information.</summary>
            <param name="id">The message ID with multiple handler methods.</param>
            <param name="method1">The first handler method's info.</param>
            <param name="method2">The second handler method's info.</param>
        </member>
        <member name="M:Riptide.DuplicateHandlerException.GetErrorMessage(System.UInt16,System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>Constructs the error message from the given information.</summary>
            <returns>The error message.</returns>
        </member>
        <member name="T:Riptide.IMessageSerializable">
            <summary>Represents an type that can be added to and retrieved from messages using the <see cref="M:Riptide.Message.AddSerializable``1(``0)"/> and <see cref="M:Riptide.Message.GetSerializable``1"/> methods.</summary>
        </member>
        <member name="M:Riptide.IMessageSerializable.Serialize(Riptide.Message)">
            <summary>Adds the type to the message.</summary>
            <param name="message">The message to add the type to.</param>
        </member>
        <member name="M:Riptide.IMessageSerializable.Deserialize(Riptide.Message)">
            <summary>Retrieves the type from the message.</summary>
            <param name="message">The message to retrieve the type from.</param>
        </member>
        <member name="T:Riptide.MessageSendMode">
            <summary>The send mode of a <see cref="T:Riptide.Message"/>.</summary>
        </member>
        <member name="F:Riptide.MessageSendMode.unreliable">
            <summary>Unreliable send mode.</summary>
        </member>
        <member name="F:Riptide.MessageSendMode.reliable">
            <summary>Reliable send mode.</summary>
        </member>
        <member name="T:Riptide.Message">
            <summary>Provides functionality for converting data to bytes and vice versa.</summary>
        </member>
        <member name="F:Riptide.Message.HeaderSize">
            <summary>The number of bytes required for a message's header.</summary>
            <remarks>
                <para>1 byte for the actual header; 2 bytes for the message ID.</para>
                <b>NOTE:</b> Various transports may add additional bytes when sending messages, so this value may not reflect the true size of the header that is actually sent. For example, Riptide's default RUDP transport inserts an extra 2 bytes for the message's sequence ID when sending reliable messages, but this is not (and should not be) reflected in this value.
            </remarks>
        </member>
        <member name="P:Riptide.Message.MaxSize">
            <summary>The maximum number of bytes that a message can contain, including the <see cref="F:Riptide.Message.HeaderSize"/>.</summary>
        </member>
        <member name="P:Riptide.Message.MaxPayloadSize">
            <summary>The maximum number of bytes of payload data that a message can contain. This value represents how many bytes can be added to a message <i>on top of</i> the <see cref="F:Riptide.Message.HeaderSize"/>.</summary>
        </member>
        <member name="P:Riptide.Message.InstancesPerSocket">
            <summary>How many messages to add to the pool for each <see cref="T:Riptide.Server"/> or <see cref="T:Riptide.Client"/> instance that is started.</summary>
            <remarks>Changes will not affect <see cref="T:Riptide.Server"/> and <see cref="T:Riptide.Client"/> instances which are already running until they are restarted.</remarks>
        </member>
        <member name="F:Riptide.Message.pool">
            <summary>A pool of reusable message instances.</summary>
        </member>
        <member name="P:Riptide.Message.SendMode">
            <summary>The message's send mode.</summary>
        </member>
        <member name="P:Riptide.Message.MaxSendAttempts">
            <summary>How often to try sending the message before giving up.</summary>
            <remarks>The default RUDP transport only uses this when sending messages with their <see cref="P:Riptide.Message.SendMode"/> set to <see cref="F:Riptide.MessageSendMode.reliable"/>. Other transports may ignore this property entirely.</remarks>
        </member>
        <member name="P:Riptide.Message.UnreadLength">
            <summary>The length in bytes of the unread data contained in the message.</summary>
        </member>
        <member name="P:Riptide.Message.WrittenLength">
            <summary>The length in bytes of the data that has been written to the message.</summary>
        </member>
        <member name="P:Riptide.Message.UnwrittenLength">
            <summary>How many more bytes can be written into the packet.</summary>
        </member>
        <member name="P:Riptide.Message.Bytes">
            <summary>The message's data.</summary>
        </member>
        <member name="F:Riptide.Message.writePos">
            <summary>The position in the byte array that the next bytes will be written to.</summary>
        </member>
        <member name="F:Riptide.Message.readPos">
            <summary>The position in the byte array that the next bytes will be read from.</summary>
        </member>
        <member name="M:Riptide.Message.#ctor(System.Int32)">
            <summary>Initializes a reusable <see cref="T:Riptide.Message"/> instance.</summary>
            <param name="maxSize">The maximum amount of bytes the message can contain.</param>
        </member>
        <member name="M:Riptide.Message.TrimPool">
            <summary>Trims the message pool to a more appropriate size for how many <see cref="T:Riptide.Server"/> and/or <see cref="T:Riptide.Client"/> instances are currently running.</summary>
        </member>
        <member name="M:Riptide.Message.Create">
            <summary>Gets a usable message instance.</summary>
            <returns>A message instance ready to be used.</returns>
        </member>
        <member name="M:Riptide.Message.Create(Riptide.MessageSendMode,System.UInt16,System.Int32,System.Boolean)">
            <summary>Gets a message instance that can be used for sending.</summary>
            <param name="sendMode">The mode in which the message should be sent.</param>
            <param name="id">The message ID.</param>
            <param name="maxSendAttempts">How often to try sending the message before giving up.</param>
            <param name="shouldAutoRelay">Whether or not <see cref="T:Riptide.Server"/> instances should automatically relay this message to all other clients. This has no effect when <see cref="P:Riptide.Server.AllowAutoMessageRelay"/> is set to <see langword="false"/> and does not affect how clients handle messages.</param>
            <returns>A message instance ready to be used for sending.</returns>
        </member>
        <member name="M:Riptide.Message.Create(Riptide.MessageSendMode,System.Enum,System.Int32,System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.Create(Riptide.MessageSendMode,System.UInt16,System.Int32,System.Boolean)"/>
            <remarks>NOTE: <paramref name="id"/> will be cast to a <see cref="T:System.UInt16"/>. You should ensure that its value never exceeds that of <see cref="F:System.UInt16.MaxValue"/>, otherwise you'll encounter unexpected behaviour when handling messages.</remarks>
        </member>
        <member name="M:Riptide.Message.Create(Riptide.Transports.HeaderType,System.Int32)">
            <summary>Gets a message instance that can be used for sending.</summary>
            <param name="messageHeader">The message's header type.</param>
            <param name="maxSendAttempts">How often to try sending the message before giving up.</param>
            <returns>A message instance ready to be used for sending.</returns>
        </member>
        <member name="M:Riptide.Message.CreateRaw">
            <summary>Gets a message instance directly from the pool without doing any extra setup.</summary>
            <remarks>As this message instance is returned straight from the pool, it will contain all previous data and settings. Using this instance without preparing it properly will likely result in unexpected behaviour.</remarks>
            <returns>A message instance.</returns>
        </member>
        <member name="M:Riptide.Message.RetrieveFromPool">
            <summary>Retrieves a message instance from the pool. If none is available, a new instance is created.</summary>
            <returns>A message instance ready to be used for sending or handling.</returns>
        </member>
        <member name="M:Riptide.Message.Release">
            <summary>Returns the message instance to the internal pool so it can be reused.</summary>
        </member>
        <member name="M:Riptide.Message.PrepareForUse">
            <summary>Prepares the message to be used.</summary>
            <returns>The message, ready to be used.</returns>
        </member>
        <member name="M:Riptide.Message.PrepareForUse(Riptide.Transports.HeaderType,System.Int32)">
            <summary>Prepares the message to be used for sending.</summary>
            <param name="messageHeader">The header of the message.</param>
            <param name="maxSendAttempts">How often to try sending the message before giving up.</param>
            <returns>The message, ready to be used for sending.</returns>
        </member>
        <member name="M:Riptide.Message.PrepareForUse(Riptide.Transports.HeaderType,System.UInt16)">
            <summary>Prepares the message to be used for handling.</summary>
            <param name="messageHeader">The header of the message.</param>
            <param name="contentLength">The number of bytes that this message contains and which can be retrieved.</param>
            <returns>The message, ready to be used for handling.</returns>
        </member>
        <member name="M:Riptide.Message.SetReadWritePos(System.UInt16,System.UInt16)">
            <summary>Sets the message's read and write position.</summary>
            <param name="newReadPos">The new read position.</param>
            <param name="newWritePos">The new write position.</param>
        </member>
        <member name="M:Riptide.Message.SetHeader(Riptide.Transports.HeaderType)">
            <summary>Sets the message's header byte to the given <paramref name="messageHeader"/> and determines the appropriate <see cref="T:Riptide.MessageSendMode"/>.</summary>
            <param name="messageHeader">The header to use for this message.</param>
        </member>
        <member name="M:Riptide.Message.AddByte(System.Byte)">
            <summary>Adds a single <see cref="T:System.Byte"/> to the message.</summary>
            <param name="value">The <see cref="T:System.Byte"/> to add.</param>
            <returns>The message that the <see cref="T:System.Byte"/> was added to.</returns>
        </member>
        <member name="M:Riptide.Message.AddSByte(System.SByte)">
            <summary>Adds a single <see cref="T:System.SByte"/> to the message.</summary>
            <param name="value">The <see cref="T:System.SByte"/> to add.</param>
            <returns>The message that the <see cref="T:System.SByte"/> was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetByte">
            <summary>Retrieves a single <see cref="T:System.Byte"/> from the message.</summary>
            <returns>The <see cref="T:System.Byte"/> that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetSByte">
            <summary>Retrieves a single <see cref="T:System.SByte"/> from the message.</summary>
            <returns>The <see cref="T:System.SByte"/> that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.AddBytes(System.Byte[],System.Boolean)">
            <summary>Adds a <see cref="T:System.Byte"/> array to the message.</summary>
            <param name="array">The array to add.</param>
            <param name="includeLength">Whether or not to include the length of the array in the message.</param>
            <returns>The message that the array was added to.</returns>
        </member>
        <member name="M:Riptide.Message.AddSBytes(System.SByte[],System.Boolean)">
            <summary>Adds an <see cref="T:System.SByte"/> array to the message.</summary>
            <param name="array">The array to add.</param>
            <param name="includeLength">Whether or not to include the length of the array in the message.</param>
            <returns>The message that the array was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetBytes">
            <summary>Retrieves a <see cref="T:System.Byte"/> array from the message.</summary>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetBytes(System.Int32)">
            <summary>Retrieves a <see cref="T:System.Byte"/> array from the message.</summary>
            <param name="amount">The amount of bytes to retrieve.</param>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetBytes(System.Int32,System.Byte[],System.Int32)">
            <summary>Populates a <see cref="T:System.Byte"/> array with bytes retrieved from the message.</summary>
            <param name="amount">The amount of bytes to retrieve.</param>
            <param name="intoArray">The array to populate.</param>
            <param name="startIndex">The position at which to start populating the array.</param>
        </member>
        <member name="M:Riptide.Message.GetSBytes">
            <summary>Retrieves an <see cref="T:System.SByte"/> array from the message.</summary>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetSBytes(System.Int32)">
            <summary>Retrieves an <see cref="T:System.SByte"/> array from the message.</summary>
            <param name="amount">The amount of sbytes to retrieve.</param>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetSBytes(System.Int32,System.SByte[],System.Int32)">
            <summary>Populates a <see cref="T:System.SByte"/> array with bytes retrieved from the message.</summary>
            <param name="amount">The amount of sbytes to retrieve.</param>
            <param name="intArray">The array to populate.</param>
            <param name="startIndex">The position at which to start populating <paramref name="intArray"/>.</param>
        </member>
        <member name="M:Riptide.Message.ReadBytes(System.Int32,System.Byte[],System.Int32)">
            <summary>Reads a number of bytes from the message and writes them into the given array.</summary>
            <param name="amount">The amount of bytes to read.</param>
            <param name="intoArray">The array to write the bytes into.</param>
            <param name="startIndex">The position at which to start writing into the array.</param>
        </member>
        <member name="M:Riptide.Message.ReadSBytes(System.Int32,System.SByte[],System.Int32)">
            <summary>Reads a number of sbytes from the message and writes them into the given array.</summary>
            <param name="amount">The amount of sbytes to read.</param>
            <param name="intoArray">The array to write the sbytes into.</param>
            <param name="startIndex">The position at which to start writing into the array.</param>
        </member>
        <member name="M:Riptide.Message.AddBool(System.Boolean)">
            <summary>Adds a <see cref="T:System.Boolean"/> to the message.</summary>
            <param name="value">The <see cref="T:System.Boolean"/> to add.</param>
            <returns>The message that the <see cref="T:System.Boolean"/> was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetBool">
            <summary>Retrieves a <see cref="T:System.Boolean"/> from the message.</summary>
            <returns>The <see cref="T:System.Boolean"/> that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.AddBools(System.Boolean[],System.Boolean)">
            <summary>Adds a <see cref="T:System.Boolean"/> array to the message.</summary>
            <param name="array">The array to add.</param>
            <param name="includeLength">Whether or not to include the length of the array in the message.</param>
            <returns>The message that the array was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetBools">
            <summary>Retrieves a <see cref="T:System.Boolean"/> array from the message.</summary>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetBools(System.Int32)">
            <summary>Retrieves a <see cref="T:System.Boolean"/> array from the message.</summary>
            <param name="amount">The amount of bools to retrieve.</param>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetBools(System.Int32,System.Boolean[],System.Int32)">
            <summary>Populates a <see cref="T:System.Boolean"/> array with bools retrieved from the message.</summary>
            <param name="amount">The amount of bools to retrieve.</param>
            <param name="intoArray">The array to populate.</param>
            <param name="startIndex">The position at which to start populating the array.</param>
        </member>
        <member name="M:Riptide.Message.ReadBools(System.Int32,System.Boolean[],System.Int32)">
            <summary>Reads a number of bools from the message and writes them into the given array.</summary>
            <param name="byteAmount">The number of bytes the bools are being stored in.</param>
            <param name="intoArray">The array to write the bools into.</param>
            <param name="startIndex">The position at which to start writing into the array.</param>
        </member>
        <member name="M:Riptide.Message.AddShort(System.Int16)">
            <summary>Adds a <see cref="T:System.Int16"/> to the message.</summary>
            <param name="value">The <see cref="T:System.Int16"/> to add.</param>
            <returns>The message that the <see cref="T:System.Int16"/> was added to.</returns>
        </member>
        <member name="M:Riptide.Message.AddUShort(System.UInt16)">
            <summary>Adds a <see cref="T:System.UInt16"/> to the message.</summary>
            <param name="value">The <see cref="T:System.UInt16"/> to add.</param>
            <returns>The message that the <see cref="T:System.UInt16"/> was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetShort">
            <summary>Retrieves a <see cref="T:System.Int16"/> from the message.</summary>
            <returns>The <see cref="T:System.Int16"/> that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetUShort">
            <summary>Retrieves a <see cref="T:System.UInt16"/> from the message.</summary>
            <returns>The <see cref="T:System.UInt16"/> that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.AddShorts(System.Int16[],System.Boolean)">
            <summary>Adds a <see cref="T:System.Int16"/> array to the message.</summary>
            <param name="array">The array to add.</param>
            <param name="includeLength">Whether or not to include the length of the array in the message.</param>
            <returns>The message that the array was added to.</returns>
        </member>
        <member name="M:Riptide.Message.AddUShorts(System.UInt16[],System.Boolean)">
            <summary>Adds a <see cref="T:System.UInt16"/> array to the message.</summary>
            <param name="array">The array to add.</param>
            <param name="includeLength">Whether or not to include the length of the array in the message.</param>
            <returns>The message that the array was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetShorts">
            <summary>Retrieves a <see cref="T:System.Int16"/> array from the message.</summary>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetShorts(System.Int32)">
            <summary>Retrieves a <see cref="T:System.Int16"/> array from the message.</summary>
            <param name="amount">The amount of shorts to retrieve.</param>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetShorts(System.Int32,System.Int16[],System.Int32)">
            <summary>Populates a <see cref="T:System.Int16"/> array with shorts retrieved from the message.</summary>
            <param name="amount">The amount of shorts to retrieve.</param>
            <param name="intoArray">The array to populate.</param>
            <param name="startIndex">The position at which to start populating the array.</param>
        </member>
        <member name="M:Riptide.Message.GetUShorts">
            <summary>Retrieves a <see cref="T:System.UInt16"/> array from the message.</summary>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetUShorts(System.Int32)">
            <summary>Retrieves a <see cref="T:System.UInt16"/> array from the message.</summary>
            <param name="amount">The amount of ushorts to retrieve.</param>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetUShorts(System.Int32,System.UInt16[],System.Int32)">
            <summary>Populates a <see cref="T:System.UInt16"/> array with ushorts retrieved from the message.</summary>
            <param name="amount">The amount of ushorts to retrieve.</param>
            <param name="intoArray">The array to populate.</param>
            <param name="startIndex">The position at which to start populating the array.</param>
        </member>
        <member name="M:Riptide.Message.ReadShorts(System.Int32,System.Int16[],System.Int32)">
            <summary>Reads a number of shorts from the message and writes them into the given array.</summary>
            <param name="amount">The amount of shorts to read.</param>
            <param name="intoArray">The array to write the shorts into.</param>
            <param name="startIndex">The position at which to start writing into the array.</param>
        </member>
        <member name="M:Riptide.Message.ReadUShorts(System.Int32,System.UInt16[],System.Int32)">
            <summary>Reads a number of ushorts from the message and writes them into the given array.</summary>
            <param name="amount">The amount of ushorts to read.</param>
            <param name="intoArray">The array to write the ushorts into.</param>
            <param name="startIndex">The position at which to start writing into the array.</param>
        </member>
        <member name="M:Riptide.Message.AddInt(System.Int32)">
            <summary>Adds an <see cref="T:System.Int32"/> to the message.</summary>
            <param name="value">The <see cref="T:System.Int32"/> to add.</param>
            <returns>The message that the <see cref="T:System.Int32"/> was added to.</returns>
        </member>
        <member name="M:Riptide.Message.AddUInt(System.UInt32)">
            <summary>Adds a <see cref="T:System.UInt32"/> to the message.</summary>
            <param name="value">The <see cref="T:System.UInt32"/> to add.</param>
            <returns>The message that the <see cref="T:System.UInt32"/> was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetInt">
            <summary>Retrieves an <see cref="T:System.Int32"/> from the message.</summary>
            <returns>The <see cref="T:System.Int32"/> that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetUInt">
            <summary>Retrieves a <see cref="T:System.UInt32"/> from the message.</summary>
            <returns>The <see cref="T:System.UInt32"/> that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.AddInts(System.Int32[],System.Boolean)">
            <summary>Adds an <see cref="T:System.Int32"/> array message.</summary>
            <param name="array">The array to add.</param>
            <param name="includeLength">Whether or not to include the length of the array in the message.</param>
            <returns>The message that the array was added to.</returns>
        </member>
        <member name="M:Riptide.Message.AddUInts(System.UInt32[],System.Boolean)">
            <summary>Adds a <see cref="T:System.UInt32"/> array to the message.</summary>
            <param name="array">The array to add.</param>
            <param name="includeLength">Whether or not to include the length of the array in the message.</param>
            <returns>The message that the array was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetInts">
            <summary>Retrieves an <see cref="T:System.Int32"/> array from the message.</summary>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetInts(System.Int32)">
            <summary>Retrieves an <see cref="T:System.Int32"/> array from the message.</summary>
            <param name="amount">The amount of ints to retrieve.</param>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetInts(System.Int32,System.Int32[],System.Int32)">
            <summary>Populates an <see cref="T:System.Int32"/> array with ints retrieved from the message.</summary>
            <param name="amount">The amount of ints to retrieve.</param>
            <param name="intoArray">The array to populate.</param>
            <param name="startIndex">The position at which to start populating the array.</param>
        </member>
        <member name="M:Riptide.Message.GetUInts">
            <summary>Retrieves a <see cref="T:System.UInt32"/> array from the message.</summary>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetUInts(System.Int32)">
            <summary>Retrieves a <see cref="T:System.UInt32"/> array from the message.</summary>
            <param name="amount">The amount of uints to retrieve.</param>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetUInts(System.Int32,System.UInt32[],System.Int32)">
            <summary>Populates a <see cref="T:System.UInt32"/> array with uints retrieved from the message.</summary>
            <param name="amount">The amount of uints to retrieve.</param>
            <param name="intoArray">The array to populate.</param>
            <param name="startIndex">The position at which to start populating the array.</param>
        </member>
        <member name="M:Riptide.Message.ReadInts(System.Int32,System.Int32[],System.Int32)">
            <summary>Reads a number of ints from the message and writes them into the given array.</summary>
            <param name="amount">The amount of ints to read.</param>
            <param name="intoArray">The array to write the ints into.</param>
            <param name="startIndex">The position at which to start writing into the array.</param>
        </member>
        <member name="M:Riptide.Message.ReadUInts(System.Int32,System.UInt32[],System.Int32)">
            <summary>Reads a number of uints from the message and writes them into the given array.</summary>
            <param name="amount">The amount of uints to read.</param>
            <param name="intoArray">The array to write the uints into.</param>
            <param name="startIndex">The position at which to start writing into the array.</param>
        </member>
        <member name="M:Riptide.Message.AddLong(System.Int64)">
            <summary>Adds a <see cref="T:System.Int64"/> to the message.</summary>
            <param name="value">The <see cref="T:System.Int64"/> to add.</param>
            <returns>The message that the <see cref="T:System.Int64"/> was added to.</returns>
        </member>
        <member name="M:Riptide.Message.AddULong(System.UInt64)">
            <summary>Adds a <see cref="T:System.UInt64"/> to the message.</summary>
            <param name="value">The <see cref="T:System.UInt64"/> to add.</param>
            <returns>The message that the <see cref="T:System.UInt64"/> was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetLong">
            <summary>Retrieves a <see cref="T:System.Int64"/> from the message.</summary>
            <returns>The <see cref="T:System.Int64"/> that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetULong">
            <summary>Retrieves a <see cref="T:System.UInt64"/> from the message.</summary>
            <returns>The <see cref="T:System.UInt64"/> that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.AddLongs(System.Int64[],System.Boolean)">
            <summary>Adds a <see cref="T:System.Int64"/> array to the message.</summary>
            <param name="array">The array to add.</param>
            <param name="includeLength">Whether or not to include the length of the array in the message.</param>
            <returns>The message that the array was added to.</returns>
        </member>
        <member name="M:Riptide.Message.AddULongs(System.UInt64[],System.Boolean)">
            <summary>Adds a <see cref="T:System.UInt64"/> array to the message.</summary>
            <param name="array">The array to add.</param>
            <param name="includeLength">Whether or not to include the length of the array in the message.</param>
            <returns>The message that the array was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetLongs">
            <summary>Retrieves a <see cref="T:System.Int64"/> array from the message.</summary>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetLongs(System.Int32)">
            <summary>Retrieves a <see cref="T:System.Int64"/> array from the message.</summary>
            <param name="amount">The amount of longs to retrieve.</param>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetLongs(System.Int32,System.Int64[],System.Int32)">
            <summary>Populates a <see cref="T:System.Int64"/> array with longs retrieved from the message.</summary>
            <param name="amount">The amount of longs to retrieve.</param>
            <param name="intoArray">The array to populate.</param>
            <param name="startIndex">The position at which to start populating the array.</param>
        </member>
        <member name="M:Riptide.Message.GetULongs">
            <summary>Retrieves a <see cref="T:System.UInt64"/> array from the message.</summary>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetULongs(System.Int32)">
            <summary>Retrieves a <see cref="T:System.UInt64"/> array from the message.</summary>
            <param name="amount">The amount of ulongs to retrieve.</param>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetULongs(System.Int32,System.UInt64[],System.Int32)">
            <summary>Populates a <see cref="T:System.UInt64"/> array with ulongs retrieved from the message.</summary>
            <param name="amount">The amount of ulongs to retrieve.</param>
            <param name="intoArray">The array to populate.</param>
            <param name="startIndex">The position at which to start populating the array.</param>
        </member>
        <member name="M:Riptide.Message.ReadLongs(System.Int32,System.Int64[],System.Int32)">
            <summary>Reads a number of longs from the message and writes them into the given array.</summary>
            <param name="amount">The amount of longs to read.</param>
            <param name="intoArray">The array to write the longs into.</param>
            <param name="startIndex">The position at which to start writing into the array.</param>
        </member>
        <member name="M:Riptide.Message.ReadULongs(System.Int32,System.UInt64[],System.Int32)">
            <summary>Reads a number of ulongs from the message and writes them into the given array.</summary>
            <param name="amount">The amount of ulongs to read.</param>
            <param name="intoArray">The array to write the ulongs into.</param>
            <param name="startIndex">The position at which to start writing into the array.</param>
        </member>
        <member name="M:Riptide.Message.AddFloat(System.Single)">
            <summary>Adds a <see cref="T:System.Single"/> to the message.</summary>
            <param name="value">The <see cref="T:System.Single"/> to add.</param>
            <returns>The message that the <see cref="T:System.Single"/> was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetFloat">
            <summary>Retrieves a <see cref="T:System.Single"/> from the message.</summary>
            <returns>The <see cref="T:System.Single"/> that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.AddFloats(System.Single[],System.Boolean)">
            <summary>Adds a <see cref="T:System.Single"/> array to the message.</summary>
            <param name="array">The array to add.</param>
            <param name="includeLength">Whether or not to include the length of the array in the message.</param>
            <returns>The message that the array was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetFloats">
            <summary>Retrieves a <see cref="T:System.Single"/> array from the message.</summary>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetFloats(System.Int32)">
            <summary>Retrieves a <see cref="T:System.Single"/> array from the message.</summary>
            <param name="amount">The amount of floats to retrieve.</param>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetFloats(System.Int32,System.Single[],System.Int32)">
            <summary>Populates a <see cref="T:System.Single"/> array with floats retrieved from the message.</summary>
            <param name="amount">The amount of floats to retrieve.</param>
            <param name="intoArray">The array to populate.</param>
            <param name="startIndex">The position at which to start populating the array.</param>
        </member>
        <member name="M:Riptide.Message.ReadFloats(System.Int32,System.Single[],System.Int32)">
            <summary>Reads a number of floats from the message and writes them into the given array.</summary>
            <param name="amount">The amount of floats to read.</param>
            <param name="intoArray">The array to write the floats into.</param>
            <param name="startIndex">The position at which to start writing into the array.</param>
        </member>
        <member name="M:Riptide.Message.AddDouble(System.Double)">
            <summary>Adds a <see cref="T:System.Double"/> to the message.</summary>
            <param name="value">The <see cref="T:System.Double"/> to add.</param>
            <returns>The message that the <see cref="T:System.Double"/> was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetDouble">
            <summary>Retrieves a <see cref="T:System.Double"/> from the message.</summary>
            <returns>The <see cref="T:System.Double"/> that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.AddDoubles(System.Double[],System.Boolean)">
            <summary>Adds a <see cref="T:System.Double"/> array to the message.</summary>
            <param name="array">The array to add.</param>
            <param name="includeLength">Whether or not to include the length of the array in the message.</param>
            <returns>The message that the array was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetDoubles">
            <summary>Retrieves a <see cref="T:System.Double"/> array from the message.</summary>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetDoubles(System.Int32)">
            <summary>Retrieves a <see cref="T:System.Double"/> array from the message.</summary>
            <param name="amount">The amount of doubles to retrieve.</param>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetDoubles(System.Int32,System.Double[],System.Int32)">
            <summary>Populates a <see cref="T:System.Double"/> array with doubles retrieved from the message.</summary>
            <param name="amount">The amount of doubles to retrieve.</param>
            <param name="intoArray">The array to populate.</param>
            <param name="startIndex">The position at which to start populating the array.</param>
        </member>
        <member name="M:Riptide.Message.ReadDoubles(System.Int32,System.Double[],System.Int32)">
            <summary>Reads a number of doubles from the message and writes them into the given array.</summary>
            <param name="amount">The amount of doubles to read.</param>
            <param name="intoArray">The array to write the doubles into.</param>
            <param name="startIndex">The position at which to start writing into the array.</param>
        </member>
        <member name="M:Riptide.Message.AddString(System.String)">
            <summary>Adds a <see cref="T:System.String"/> to the message.</summary>
            <param name="value">The <see cref="T:System.String"/> to add.</param>
            <returns>The message that the <see cref="T:System.String"/> was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetString">
            <summary>Retrieves a <see cref="T:System.String"/> from the message.</summary>
            <returns>The <see cref="T:System.String"/> that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.AddStrings(System.String[],System.Boolean)">
            <summary>Adds a <see cref="T:System.String"/> array to the message.</summary>
            <param name="array">The array to add.</param>
            <param name="includeLength">Whether or not to include the length of the array in the message.</param>
            <returns>The message that the array was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetStrings">
            <summary>Retrieves a <see cref="T:System.String"/> array from the message.</summary>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetStrings(System.Int32)">
            <summary>Retrieves a <see cref="T:System.String"/> array from the message.</summary>
            <param name="amount">The amount of strings to retrieve.</param>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetStrings(System.Int32,System.String[],System.Int32)">
            <summary>Populates a <see cref="T:System.String"/> array with strings retrieved from the message.</summary>
            <param name="amount">The amount of strings to retrieve.</param>
            <param name="intoArray">The array to populate.</param>
            <param name="startIndex">The position at which to start populating the array.</param>
        </member>
        <member name="F:Riptide.Message.OneByteLengthThreshold">
            <summary>The maximum number of elements an array can contain where the length still fits into a single byte.</summary>
        </member>
        <member name="F:Riptide.Message.TwoByteLengthThreshold">
            <summary>The maximum number of elements an array can contain where the length still fits into two byte2.</summary>
        </member>
        <member name="M:Riptide.Message.AddArrayLength(System.Int32)">
            <summary>Adds the length of an array to the message, using either 1 or 2 bytes depending on how large the array is. Does not support arrays with more than 32,767 elements.</summary>
            <param name="length">The length of the array.</param>
        </member>
        <member name="M:Riptide.Message.GetArrayLength">
            <summary>Retrieves the length of an array from the message, using either 1 or 2 bytes depending on how large the array is.</summary>
            <returns>The length of the array.</returns>
        </member>
        <member name="M:Riptide.Message.AddSerializable``1(``0)">
            <summary>Adds a serializable to the message.</summary>
            <param name="value">The serializable to add.</param>
            <returns>The message that the serializable was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetSerializable``1">
            <summary>Retrieves a serializable from the message.</summary>
            <returns>The serializable that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.AddSerializables``1(``0[],System.Boolean)">
            <summary>Adds an array of serializables to the message.</summary>
            <param name="array">The array to add.</param>
            <param name="includeLength">Whether or not to include the length of the array in the message.</param>
            <returns>The message that the array was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetSerializables``1">
            <summary>Retrieves an array of serializables from the message.</summary>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetSerializables``1(System.Int32)">
            <summary>Retrieves an array of serializables from the message.</summary>
            <param name="amount">The amount of serializables to retrieve.</param>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetSerializables``1(System.Int32,``0[],System.Int32)">
            <summary>Populates an array of serializables retrieved from the message.</summary>
            <param name="amount">The amount of serializables to retrieve.</param>
            <param name="intoArray">The array to populate.</param>
            <param name="startIndex">The position at which to start populating the array.</param>
        </member>
        <member name="M:Riptide.Message.ReadSerializables``1(System.Int32,``0[],System.Int32)">
            <summary>Reads a number of serializables from the message and writes them into the given array.</summary>
            <param name="amount">The amount of serializables to read.</param>
            <param name="intArray">The array to write the serializables into.</param>
            <param name="startIndex">The position at which to start writing into <paramref name="intArray"/>.</param>
        </member>
        <member name="M:Riptide.Message.Add(System.Byte)">
            <inheritdoc cref="M:Riptide.Message.AddByte(System.Byte)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddByte(System.Byte)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.SByte)">
            <inheritdoc cref="M:Riptide.Message.AddSByte(System.SByte)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddSByte(System.SByte)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddBool(System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddBool(System.Boolean)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.Int16)">
            <inheritdoc cref="M:Riptide.Message.AddShort(System.Int16)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddShort(System.Int16)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.UInt16)">
            <inheritdoc cref="M:Riptide.Message.AddUShort(System.UInt16)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddUShort(System.UInt16)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.Int32)">
            <inheritdoc cref="M:Riptide.Message.AddInt(System.Int32)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddInt(System.Int32)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.UInt32)">
            <inheritdoc cref="M:Riptide.Message.AddUInt(System.UInt32)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddUInt(System.UInt32)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.Int64)">
            <inheritdoc cref="M:Riptide.Message.AddLong(System.Int64)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddLong(System.Int64)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.UInt64)">
            <inheritdoc cref="M:Riptide.Message.AddULong(System.UInt64)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddULong(System.UInt64)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.Single)">
            <inheritdoc cref="M:Riptide.Message.AddFloat(System.Single)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddFloat(System.Single)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.Double)">
            <inheritdoc cref="M:Riptide.Message.AddDouble(System.Double)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddDouble(System.Double)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.String)">
            <inheritdoc cref="M:Riptide.Message.AddString(System.String)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddString(System.String)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add``1(``0)">
            <inheritdoc cref="M:Riptide.Message.AddSerializable``1(``0)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddSerializable``1(``0)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.Byte[],System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddBytes(System.Byte[],System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddBytes(System.Byte[],System.Boolean)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.SByte[],System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddSBytes(System.SByte[],System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddSBytes(System.SByte[],System.Boolean)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.Boolean[],System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddBools(System.Boolean[],System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddBools(System.Boolean[],System.Boolean)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.Int16[],System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddShorts(System.Int16[],System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddShorts(System.Int16[],System.Boolean)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.UInt16[],System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddUShorts(System.UInt16[],System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddUShorts(System.UInt16[],System.Boolean)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.Int32[],System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddInts(System.Int32[],System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddInts(System.Int32[],System.Boolean)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.UInt32[],System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddUInts(System.UInt32[],System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddUInts(System.UInt32[],System.Boolean)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.Int64[],System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddLongs(System.Int64[],System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddLongs(System.Int64[],System.Boolean)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.UInt64[],System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddULongs(System.UInt64[],System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddULongs(System.UInt64[],System.Boolean)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.Single[],System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddFloats(System.Single[],System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddFloats(System.Single[],System.Boolean)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.Double[],System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddDoubles(System.Double[],System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddDoubles(System.Double[],System.Boolean)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.String[],System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddStrings(System.String[],System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddStrings(System.String[],System.Boolean)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add``1(``0[],System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddSerializables``1(``0[],System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddSerializables``1(``0[],System.Boolean)"/>.</remarks>
        </member>
        <member name="F:Riptide.Message.ByteName">
            <summary>The name of a <see cref="T:System.Byte"/> value.</summary>
        </member>
        <member name="F:Riptide.Message.SByteName">
            <summary>The name of a <see cref="T:System.SByte"/> value.</summary>
        </member>
        <member name="F:Riptide.Message.BoolName">
            <summary>The name of a <see cref="T:System.Boolean"/> value.</summary>
        </member>
        <member name="F:Riptide.Message.ShortName">
            <summary>The name of a <see cref="T:System.Int16"/> value.</summary>
        </member>
        <member name="F:Riptide.Message.UShortName">
            <summary>The name of a <see cref="T:System.UInt16"/> value.</summary>
        </member>
        <member name="F:Riptide.Message.IntName">
            <summary>The name of an <see cref="T:System.Int32"/> value.</summary>
        </member>
        <member name="F:Riptide.Message.UIntName">
            <summary>The name of a <see cref="T:System.UInt32"/> value.</summary>
        </member>
        <member name="F:Riptide.Message.LongName">
            <summary>The name of a <see cref="T:System.Int64"/> value.</summary>
        </member>
        <member name="F:Riptide.Message.ULongName">
            <summary>The name of a <see cref="T:System.UInt64"/> value.</summary>
        </member>
        <member name="F:Riptide.Message.FloatName">
            <summary>The name of a <see cref="T:System.Single"/> value.</summary>
        </member>
        <member name="F:Riptide.Message.DoubleName">
            <summary>The name of a <see cref="T:System.Double"/> value.</summary>
        </member>
        <member name="F:Riptide.Message.StringName">
            <summary>The name of a <see cref="T:System.String"/> value.</summary>
        </member>
        <member name="F:Riptide.Message.ArrayLengthName">
            <summary>The name of an array length value.</summary>
        </member>
        <member name="M:Riptide.Message.NotEnoughBytesError(System.String,System.String)">
            <summary>Constructs an error message for when a message contains insufficient unread bytes to retrieve a certain value.</summary>
            <param name="valueName">The name of the value type for which the retrieval attempt failed.</param>
            <param name="defaultReturn">Text describing the value which will be returned.</param>
            <returns>The error message.</returns>
        </member>
        <member name="M:Riptide.Message.NotEnoughBytesError(System.Int32,System.String)">
            <summary>Constructs an error message for when a message contains insufficient unread bytes to retrieve an array of values.</summary>
            <param name="arrayLength">The expected length of the array.</param>
            <param name="valueName">The name of the value type for which the retrieval attempt failed.</param>
            <returns>The error message.</returns>
        </member>
        <member name="M:Riptide.Message.ArrayNotLongEnoughError(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>Constructs an error message for when a number of retrieved values do not fit inside the bounds of the provided array.</summary>
            <param name="amount">The number of values being retrieved.</param>
            <param name="arrayLength">The length of the provided array.</param>
            <param name="startIndex">The position in the array at which to begin writing values.</param>
            <param name="valueName">The name of the value type which is being retrieved.</param>
            <param name="pluralValueName">The name of the value type in plural form. If left empty, this will be set to <paramref name="valueName"/> with an <c>s</c> appended to it.</param>
            <returns>The error message.</returns>
        </member>
        <member name="T:Riptide.MessageHandlerAttribute">
            <summary>Specifies a method as the message handler for messages with the given ID.</summary>
        </member>
        <member name="P:Riptide.MessageHandlerAttribute.MessageId">
            <summary>The ID of the message type that this method is meant to handle.</summary>
        </member>
        <member name="P:Riptide.MessageHandlerAttribute.GroupId">
            <summary>The ID of the group of message handlers this method belongs to.</summary>
        </member>
        <member name="M:Riptide.MessageHandlerAttribute.#ctor(System.UInt16,System.Byte)">
            <summary>Initializes a new instance of the <see cref="T:Riptide.MessageHandlerAttribute"/> class with the <paramref name="messageId"/> and <paramref name="groupId"/> values.</summary>
            <param name="messageId">The ID of the message type that this method is meant to handle.</param>
            <param name="groupId">The ID of the group of message handlers this method belongs to.</param>
            <remarks>
              <para>
                <see cref="T:Riptide.Server"/> instances will include this method in their message handlers if its signature matches that of <see cref="T:Riptide.Server.MessageHandler"/>.<br/>
                <see cref="T:Riptide.Client"/> instances will include this method in their message handlers if its signature matches that of <see cref="T:Riptide.Client.MessageHandler"/>.
              </para>
            </remarks>
        </member>
        <member name="T:Riptide.Server">
            <summary>A server that can accept connections from <see cref="T:Riptide.Client"/>s.</summary>
        </member>
        <member name="E:Riptide.Server.ClientConnected">
            <inheritdoc cref="E:Riptide.Transports.IServer.ClientConnected"/>
        </member>
        <member name="E:Riptide.Server.MessageReceived">
            <inheritdoc cref="E:Riptide.Transports.IServer.MessageReceived"/>
        </member>
        <member name="E:Riptide.Server.ClientDisconnected">
            <inheritdoc cref="E:Riptide.Transports.IServer.ClientDisconnected"/>
        </member>
        <member name="P:Riptide.Server.IsRunning">
            <summary>Whether or not the server is currently running.</summary>
        </member>
        <member name="P:Riptide.Server.Port">
            <inheritdoc cref="P:Riptide.Transports.IServer.Port"/>
        </member>
        <member name="P:Riptide.Server.Clients">
            <inheritdoc cref="P:Riptide.Transports.IServer.Clients"/>
        </member>
        <member name="P:Riptide.Server.MaxClientCount">
            <inheritdoc cref="P:Riptide.Transports.IServer.MaxClientCount"/>
        </member>
        <member name="P:Riptide.Server.ClientCount">
            <inheritdoc cref="P:Riptide.Transports.IServer.ClientCount"/>
        </member>
        <member name="P:Riptide.Server.AllowAutoMessageRelay">
            <inheritdoc cref="P:Riptide.Transports.IServer.AllowAutoMessageRelay"/>
        </member>
        <member name="T:Riptide.Server.MessageHandler">
            <summary>Encapsulates a method that handles a message from a certain client.</summary>
            <param name="fromClientId">The numeric ID of the client from whom the message was received.</param>
            <param name="message">The message that was received.</param>
        </member>
        <member name="F:Riptide.Server.messageHandlers">
            <summary>Methods used to handle messages, accessible by their corresponding message IDs.</summary>
        </member>
        <member name="F:Riptide.Server.server">
            <summary>The underlying server that is used for managing connections and sending and receiving data.</summary>
        </member>
        <member name="M:Riptide.Server.#ctor(Riptide.Transports.IServer)">
            <summary>Handles initial setup.</summary>
            <param name="server">The underlying server that is used for managing connections and sending and receiving data.</param>
        </member>
        <member name="M:Riptide.Server.#ctor(System.UInt16,System.UInt16,System.String)">
            <summary>Handles initial setup using the built-in RUDP transport.</summary>
            <param name="clientTimeoutTime">The time (in milliseconds) after which to disconnect a client without a heartbeat.</param>
            <param name="clientHeartbeatInterval">The interval (in milliseconds) at which heartbeats are to be expected from clients.</param>
            <param name="logName">The name to use when logging messages via <see cref="T:Riptide.Utils.RiptideLogger"/>.</param>
        </member>
        <member name="M:Riptide.Server.ChangeTransport(Riptide.Transports.IServer)">
            <summary>Stops the server if it's running and swaps out the transport it's using.</summary>
            <param name="server">The underlying server that is used for managing connections and sending and receiving data.</param>
            <remarks>This method does not automatically restart the server. To continue accepting connections, <see cref="M:Riptide.Server.Start(System.UInt16,System.UInt16,System.Byte)"/> will need to be called again.</remarks>
        </member>
        <member name="M:Riptide.Server.Start(System.UInt16,System.UInt16,System.Byte)">
            <summary>Starts the server.</summary>
            <param name="port">The local port on which to start the server.</param>
            <param name="maxClientCount">The maximum number of concurrent connections to allow.</param>
            <param name="messageHandlerGroupId">The ID of the group of message handler methods to use when building <see cref="F:Riptide.Server.messageHandlers"/>.</param>
        </member>
        <member name="M:Riptide.Server.CreateMessageHandlersDictionary(System.Reflection.Assembly,System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Server.Tick">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Server.Send(Riptide.Message,System.UInt16,System.Boolean)">
            <inheritdoc cref="M:Riptide.Transports.IServer.Send(Riptide.Message,System.UInt16,System.Boolean)"/>
        </member>
        <member name="M:Riptide.Server.SendToAll(Riptide.Message,System.Boolean)">
            <inheritdoc cref="M:Riptide.Transports.IServer.SendToAll(Riptide.Message,System.Boolean)"/>
        </member>
        <member name="M:Riptide.Server.SendToAll(Riptide.Message,System.UInt16,System.Boolean)">
            <inheritdoc cref="M:Riptide.Transports.IServer.SendToAll(Riptide.Message,System.UInt16,System.Boolean)"/>
        </member>
        <member name="M:Riptide.Server.TryGetClient(System.UInt16,Riptide.Transports.IConnectionInfo@)">
            <inheritdoc cref="M:Riptide.Transports.IServer.TryGetClient(System.UInt16,Riptide.Transports.IConnectionInfo@)"/>
        </member>
        <member name="M:Riptide.Server.DisconnectClient(System.UInt16,System.String)">
            <inheritdoc cref="M:Riptide.Transports.IServer.DisconnectClient(System.UInt16,System.String)"/>
        </member>
        <member name="M:Riptide.Server.Stop">
            <summary>Stops the server.</summary>
        </member>
        <member name="M:Riptide.Server.OnClientConnected(System.Object,Riptide.ServerClientConnectedEventArgs)">
            <summary>Invokes the <see cref="E:Riptide.Server.ClientConnected"/> event.</summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event args to invoke the event with.</param>
        </member>
        <member name="M:Riptide.Server.OnMessageReceived(System.Object,Riptide.ServerMessageReceivedEventArgs)">
            <summary>Invokes the <see cref="E:Riptide.Server.MessageReceived"/> event and initiates handling of the received message.</summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event args to invoke the event with.</param>
        </member>
        <member name="M:Riptide.Server.OnClientDisconnected(System.Object,Riptide.ClientDisconnectedEventArgs)">
            <summary>Invokes the <see cref="E:Riptide.Server.ClientDisconnected"/> event.</summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event args to invoke the event with.</param>
        </member>
        <member name="T:Riptide.Transports.HeaderType">
            <summary>The header type of a <see cref="T:Riptide.Message"/>.</summary>
        </member>
        <member name="F:Riptide.Transports.HeaderType.unreliable">
            <summary>For unreliable user messages.</summary>
        </member>
        <member name="F:Riptide.Transports.HeaderType.unreliableAutoRelay">
            <summary>For unreliable user messages that servers should automatically relay to all other clients.</summary>
        </member>
        <member name="F:Riptide.Transports.HeaderType.ack">
            <summary>For unreliable internal ack messages.</summary>
        </member>
        <member name="F:Riptide.Transports.HeaderType.ackExtra">
            <summary>For unreliable internal ack messages (when acknowledging a sequence ID other than the last received one).</summary>
        </member>
        <member name="F:Riptide.Transports.HeaderType.connect">
            <summary>For unreliable internal connect messages.</summary>
        </member>
        <member name="F:Riptide.Transports.HeaderType.heartbeat">
            <summary>For unreliable internal heartbeat messages.</summary>
        </member>
        <member name="F:Riptide.Transports.HeaderType.disconnect">
            <summary>For unreliable internal disconnect messages.</summary>
        </member>
        <member name="F:Riptide.Transports.HeaderType.reliable">
            <summary>For reliable user messages.</summary>
        </member>
        <member name="F:Riptide.Transports.HeaderType.reliableAutoRelay">
            <summary>For reliable user messages that servers should automatically relay to all other clients.</summary>
        </member>
        <member name="F:Riptide.Transports.HeaderType.welcome">
            <summary>For reliable internal welcome messages.</summary>
        </member>
        <member name="F:Riptide.Transports.HeaderType.clientConnected">
            <summary>For reliable internal client connected messages.</summary>
        </member>
        <member name="F:Riptide.Transports.HeaderType.clientDisconnected">
            <summary>For reliable internal client disconnected messages.</summary>
        </member>
        <member name="T:Riptide.Transports.Extensions">
            <summary>Contains extension methods for the <see cref="T:Riptide.Message"/> class which are required by transport-related code but unnecessary in (and generally unintended for) everyday use of Riptide.</summary>
            <remarks>Exposing these publicly as part of the <see cref="T:Riptide.Message"/> class would make them accessible and show up in intellisense wherever the <see cref="N:Riptide"/>
            namespace is used. By making them extension methods housed in the <see cref="N:Riptide.Transports"/> namespace, usage requires explicitly referencing said namespace, which
            should help avoid most cases of users accidentally using these methods simply because they are accessible and show up in intellisense.</remarks>
        </member>
        <member name="M:Riptide.Transports.Extensions.Create(Riptide.Transports.HeaderType,System.Int32)">
            <inheritdoc cref="M:Riptide.Message.Create(Riptide.Transports.HeaderType,System.Int32)"/>
        </member>
        <member name="M:Riptide.Transports.Extensions.CreateRaw">
            <inheritdoc cref="M:Riptide.Message.CreateRaw"/>
        </member>
        <member name="M:Riptide.Transports.Extensions.PrepareForUse(Riptide.Message,Riptide.Transports.HeaderType,System.UInt16)">
            <inheritdoc cref="M:Riptide.Message.PrepareForUse(Riptide.Transports.HeaderType,System.UInt16)"/>
        </member>
        <member name="M:Riptide.Transports.Extensions.SetHeader(Riptide.Message,Riptide.Transports.HeaderType)">
            <inheritdoc cref="M:Riptide.Message.SetHeader(Riptide.Transports.HeaderType)"/>
        </member>
        <member name="M:Riptide.Transports.Extensions.GetDataBytes(Riptide.Message)">
            <summary>Retrieves the message's underlying <see cref="T:System.Byte"/> array.</summary>
            <returns>The message's underlying <see cref="T:System.Byte"/> array.</returns>
        </member>
        <member name="T:Riptide.Transports.IClient">
            <summary>Defines methods, properties, and events which every transport's client must implement.</summary>
        </member>
        <member name="E:Riptide.Transports.IClient.Connected">
            <summary>Invoked when a connection to the server is established.</summary>
        </member>
        <member name="E:Riptide.Transports.IClient.ConnectionFailed">
            <summary>Invoked when a connection to the server fails to be established.</summary>
            <remarks>This occurs when a connection request fails, either because no server is listening on the expected IP and port, or because something (firewall, antivirus, no/poor internet access, etc.) is preventing the connection.</remarks>
        </member>
        <member name="E:Riptide.Transports.IClient.MessageReceived">
            <summary>Invoked when a message is received from the server.</summary>
        </member>
        <member name="E:Riptide.Transports.IClient.Disconnected">
            <summary>Invoked when disconnected from the server.</summary>
        </member>
        <member name="E:Riptide.Transports.IClient.ClientConnected">
            <summary>Invoked when a new client connects.</summary>
        </member>
        <member name="E:Riptide.Transports.IClient.ClientDisconnected">
            <summary>Invoked when a client disconnects.</summary>
        </member>
        <member name="M:Riptide.Transports.IClient.Connect(System.String,Riptide.Message)">
            <summary>Attempts to connect to the given host address.</summary>
            <param name="hostAddress">The host address to connect to.</param>
            <param name="message">A message containing data that should be sent to the server with the connection attempt. Use <see cref="M:Riptide.Message.Create"/> to get an empty message instance.</param>
            <returns><see langword="true"/> if the <paramref name="hostAddress"/> was in a valid format; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Riptide.Transports.IClient.Send(Riptide.Message,System.Boolean)">
            <summary>Sends a message to the server.</summary>
            <param name="message">The message to send.</param>
            <param name="shouldRelease">Whether or not <paramref name="message"/> should be returned to the pool once its data has been sent.</param>
        </member>
        <member name="M:Riptide.Transports.IClient.Disconnect">
            <summary>Disconnects from the server.</summary>
        </member>
        <member name="T:Riptide.Transports.ICommon">
            <summary>Defines methods, properties, and events which every transport's server and client must implement.</summary>
        </member>
        <member name="M:Riptide.Transports.ICommon.Tick">
            <summary>Initiates handling of currently queued messages.</summary>
            <remarks>This should generally be called from within a regularly executed update loop (like FixedUpdate in Unity). Messages will continue to be received in between calls, but won't be handled fully until this method is executed.</remarks>
        </member>
        <member name="T:Riptide.Transports.ConnectionState">
            <summary>The state of a connection.</summary>
        </member>
        <member name="F:Riptide.Transports.ConnectionState.notConnected">
            <summary>Not connected. No connection has been established or the connection has been disconnected again.</summary>
        </member>
        <member name="F:Riptide.Transports.ConnectionState.connecting">
            <summary>Connecting. Still trying to establish a connection.</summary>
        </member>
        <member name="F:Riptide.Transports.ConnectionState.connected">
            <summary>Connected. A connection was successfully established.</summary>
        </member>
        <member name="T:Riptide.Transports.IConnectionInfo">
            <summary>Defines methods, properties, and events which every transport's connections must implement.</summary>
        </member>
        <member name="P:Riptide.Transports.IConnectionInfo.Id">
            <summary>The numeric ID of the client.</summary>
        </member>
        <member name="P:Riptide.Transports.IConnectionInfo.RTT">
            <summary>The round trip time of the connection. -1 if not calculated yet.</summary>
        </member>
        <member name="P:Riptide.Transports.IConnectionInfo.SmoothRTT">
            <summary>The smoothed round trip time of the connection. -1 if not calculated yet.</summary>
        </member>
        <member name="P:Riptide.Transports.IConnectionInfo.IsNotConnected">
            <summary>Whether or not the client is currently <i>not</i> connected nor trying to connect.</summary>
        </member>
        <member name="P:Riptide.Transports.IConnectionInfo.IsConnecting">
            <summary>Whether or not the client is currently in the process of connecting.</summary>
        </member>
        <member name="P:Riptide.Transports.IConnectionInfo.IsConnected">
            <summary>Whether or not the client is currently connected.</summary>
        </member>
        <member name="T:Riptide.Transports.IServer">
            <summary>Defines methods, properties, and events which every transport's server must implement.</summary>
        </member>
        <member name="E:Riptide.Transports.IServer.ClientConnected">
            <summary>Invoked when a new client connects.</summary>
        </member>
        <member name="E:Riptide.Transports.IServer.MessageReceived">
            <summary>Invoked when a message is received from a client.</summary>
        </member>
        <member name="E:Riptide.Transports.IServer.ClientDisconnected">
            <summary>Invoked when a client disconnects.</summary>
        </member>
        <member name="P:Riptide.Transports.IServer.Port">
            <summary>The local port that the server is running on.</summary>
        </member>
        <member name="P:Riptide.Transports.IServer.MaxClientCount">
            <summary>The maximum number of clients that can be connected at any time.</summary>
        </member>
        <member name="P:Riptide.Transports.IServer.ClientCount">
            <summary>The number of currently connected clients.</summary>
        </member>
        <member name="P:Riptide.Transports.IServer.Clients">
            <summary>An array of all the currently connected clients.</summary>
            <remarks>The position of each <see cref="T:Riptide.Transports.IConnectionInfo"/> instance in the array does <i>not</i> correspond to that client's numeric ID (except by coincidence).</remarks>
        </member>
        <member name="P:Riptide.Transports.IServer.AllowAutoMessageRelay">
            <summary>Whether or not to allow messages to be automatically sent to all other connected clients.</summary>
            <remarks>This should never be enabled if you want to maintain server authority, as it theoretically allows hacked clients to tell your <see cref="T:Riptide.Server"/> instance to automatically distribute any message to other clients.
            However, it's extremely handy when building client-authoritative games where the <see cref="T:Riptide.Server"/> instance acts mostly as a relay and is directly forwarding most messages to other clients anyways.</remarks>
        </member>
        <member name="M:Riptide.Transports.IServer.Start(System.UInt16,System.UInt16)">
            <summary>Starts the server.</summary>
            <param name="port">The local port on which to start the server.</param>
            <param name="maxClientCount">The maximum number of concurrent connections to allow.</param>
        </member>
        <member name="M:Riptide.Transports.IServer.Send(Riptide.Message,System.UInt16,System.Boolean)">
            <summary>Sends a message to a specific client.</summary>
            <param name="message">The message to send.</param>
            <param name="toClientId">The numeric ID of the client to send the message to.</param>
            <param name="shouldRelease">Whether or not <paramref name="message"/> should be returned to the pool once its data has been sent.</param>
        </member>
        <member name="M:Riptide.Transports.IServer.SendToAll(Riptide.Message,System.Boolean)">
            <summary>Sends a message to all conected clients.</summary>
            <param name="message">The message to send.</param>
            <param name="shouldRelease">Whether or not <paramref name="message"/> should be returned to the pool once its data has been sent.</param>
        </member>
        <member name="M:Riptide.Transports.IServer.SendToAll(Riptide.Message,System.UInt16,System.Boolean)">
            <summary>Sends a message to all connected clients except one.</summary>
            <param name="message">The message to send.</param>
            <param name="exceptToClientId">The numeric ID of the client to <i>not</i> send the message to.</param>
            <param name="shouldRelease">Whether or not <paramref name="message"/> should be returned to the pool once its data has been sent.</param>
        </member>
        <member name="M:Riptide.Transports.IServer.TryGetClient(System.UInt16,Riptide.Transports.IConnectionInfo@)">
            <summary>Retrieves the client with the given ID, if a client with that ID is currently connected.</summary>
            <param name="id">The ID of the client to retrieve.</param>
            <param name="client">The retrieved client.</param>
            <returns><see langword="true"/> if a client with the given ID is currently connected; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Riptide.Transports.IServer.DisconnectClient(System.UInt16,System.String)">
            <summary>Disconnects a specific client.</summary>
            <param name="id">The numeric ID of the client to disconnect.</param>
            <param name="customMessage">A custom message (if any) which is used to inform clients why they were disconnected.</param>
        </member>
        <member name="M:Riptide.Transports.IServer.Shutdown">
            <summary>Disconnects all clients and stops listening for new connections.</summary>
        </member>
        <member name="T:Riptide.Transports.Rudp.SendLockables">
            <summary>Contains values that are accessed by multiple threads and are used to inform the other end of which messages we've received.</summary>
        </member>
        <member name="P:Riptide.Transports.Rudp.SendLockables.LastReceivedSeqId">
            <summary>The sequence ID of the latest message that we want to acknowledge.</summary>
        </member>
        <member name="P:Riptide.Transports.Rudp.SendLockables.AcksBitfield">
            <summary>Messages that we have received and want to acknowledge.</summary>
        </member>
        <member name="P:Riptide.Transports.Rudp.SendLockables.DuplicateFilterBitfield">
            <summary>Messages that we have received whose sequence IDs no longer fall into <see cref="P:Riptide.Transports.Rudp.SendLockables.AcksBitfield"/>'s range, used to improve duplicate message filtering capabilities.</summary>
        </member>
        <member name="T:Riptide.Transports.Rudp.ReceiveLockables">
            <summary>Contains values that are accessed by multiple threads and are used to determine which messages the other end has received.</summary>
        </member>
        <member name="P:Riptide.Transports.Rudp.ReceiveLockables.LastAckedSeqId">
            <summary>The sequence ID of the latest message that we've received an ack for.</summary>
        </member>
        <member name="P:Riptide.Transports.Rudp.ReceiveLockables.AckedMessagesBitfield">
            <summary>Messages that we sent which have been acknoweledged.</summary>
        </member>
        <member name="T:Riptide.Transports.Rudp.PendingMessage">
            <summary>Represents a currently pending reliably sent message whose delivery has not been acknowledged yet.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.PendingMessage.RetryTimeMultiplier">
            <summary>The multiplier used to determine how long to wait before resending a pending message.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.PendingMessage.pool">
            <summary>A pool of reusable <see cref="T:Riptide.Transports.Rudp.PendingMessage"/> instances.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.PendingMessage.peer">
            <summary>The <see cref="T:Riptide.Transports.Rudp.RudpPeer"/> to use to send (and resend) the pending message.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.PendingMessage.remoteEndPoint">
            <summary>The intended destination endpoint of the message.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.PendingMessage.sequenceId">
            <summary>The sequence ID of the message.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.PendingMessage.data">
            <summary>The contents of the message.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.PendingMessage.writtenLength">
            <summary>The length in bytes of the data that has been written to the message.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.PendingMessage.maxSendAttempts">
            <summary>How often to try sending the message before giving up.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.PendingMessage.sendAttempts">
            <summary>How many send attempts have been made so far.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.PendingMessage.lastSendTime">
            <summary>The time of the latest send attempt.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.PendingMessage.retryTimer">
            <summary>The timer responsible for triggering a resend, if all else fails (like acks getting lost or redundant acks not being updated fast enough).</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.PendingMessage.wasCleared">
            <summary>Whether the pending message has been cleared or not.</summary>
        </member>
        <member name="M:Riptide.Transports.Rudp.PendingMessage.#ctor">
            <summary>Handles initial setup.</summary>
        </member>
        <member name="M:Riptide.Transports.Rudp.PendingMessage.CreateAndSend(Riptide.Transports.Rudp.RudpPeer,System.UInt16,Riptide.Message,System.Net.IPEndPoint)">
            <summary>Retrieves a <see cref="T:Riptide.Transports.Rudp.PendingMessage"/> instance, initializes it and then sends it.</summary>
            <param name="peer">The <see cref="T:Riptide.Transports.Rudp.RudpPeer"/> to use to send (and resend) the pending message.</param>
            <param name="sequenceId">The sequence ID of the message.</param>
            <param name="message">The message that is being sent reliably.</param>
            <param name="toEndPoint">The intended destination endpoint of the message.</param>
        </member>
        <member name="M:Riptide.Transports.Rudp.PendingMessage.RetrieveFromPool">
            <summary>Retrieves a <see cref="T:Riptide.Transports.Rudp.PendingMessage"/> instance from the pool. If none is available, a new instance is created.</summary>
            <returns>A <see cref="T:Riptide.Transports.Rudp.PendingMessage"/> instance.</returns>
        </member>
        <member name="M:Riptide.Transports.Rudp.PendingMessage.Release">
            <summary>Returns the <see cref="T:Riptide.Transports.Rudp.PendingMessage"/> instance to the internal pool so it can be reused.</summary>
        </member>
        <member name="M:Riptide.Transports.Rudp.PendingMessage.RetrySend">
            <summary>Resends the message.</summary>
        </member>
        <member name="M:Riptide.Transports.Rudp.PendingMessage.TrySend">
            <summary>Attempts to send the message.</summary>
        </member>
        <member name="M:Riptide.Transports.Rudp.PendingMessage.Clear(System.Boolean)">
            <summary>Clears and removes the message from the dictionary of pending messages.</summary>
            <param name="shouldRemoveFromDictionary">Whether or not to remove the message from <see cref="P:Riptide.Transports.Rudp.RudpPeer.PendingMessages"/>.</param>
        </member>
        <member name="T:Riptide.Transports.Rudp.RudpClient">
            <summary>A client that can connect to an <see cref="T:Riptide.Transports.Rudp.RudpServer"/>.</summary>
        </member>
        <member name="E:Riptide.Transports.Rudp.RudpClient.Connected">
            <inheritdoc/>
        </member>
        <member name="E:Riptide.Transports.Rudp.RudpClient.ConnectionFailed">
            <inheritdoc/>
        </member>
        <member name="E:Riptide.Transports.Rudp.RudpClient.MessageReceived">
            <inheritdoc/>
        </member>
        <member name="E:Riptide.Transports.Rudp.RudpClient.Disconnected">
            <inheritdoc/>
        </member>
        <member name="E:Riptide.Transports.Rudp.RudpClient.ClientConnected">
            <inheritdoc/>
        </member>
        <member name="E:Riptide.Transports.Rudp.RudpClient.ClientDisconnected">
            <inheritdoc/>
        </member>
        <member name="P:Riptide.Transports.Rudp.RudpClient.Id">
            <inheritdoc/>
        </member>
        <member name="P:Riptide.Transports.Rudp.RudpClient.RTT">
            <inheritdoc/>
        </member>
        <member name="P:Riptide.Transports.Rudp.RudpClient.SmoothRTT">
            <inheritdoc/>
        </member>
        <member name="P:Riptide.Transports.Rudp.RudpClient.IsNotConnected">
            <inheritdoc/>
        </member>
        <member name="P:Riptide.Transports.Rudp.RudpClient.IsConnecting">
            <inheritdoc/>
        </member>
        <member name="P:Riptide.Transports.Rudp.RudpClient.IsConnected">
            <inheritdoc/>
        </member>
        <member name="P:Riptide.Transports.Rudp.RudpClient.TimeoutTime">
            <summary>The time (in milliseconds) after which to disconnect if there's no heartbeat from the server.</summary>
        </member>
        <member name="P:Riptide.Transports.Rudp.RudpClient.HeartbeatInterval">
            <summary>The interval (in milliseconds) at which to send and expect heartbeats from the server.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.RudpClient.peer">
            <summary>The client's <see cref="T:Riptide.Transports.Rudp.RudpPeer"/> instance.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.RudpClient.remoteEndPoint">
            <summary>The connection's remote endpoint.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.RudpClient.connectionState">
            <summary>The client's current connection state.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.RudpClient.connectionAttempts">
            <summary>How many connection attempts have been made so far.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.RudpClient.maxConnectionAttempts">
            <summary>How many connection attempts to make before giving up.</summary>
        </member>
        <member name="P:Riptide.Transports.Rudp.RudpClient.HasTimedOut">
            <summary>Whether or not the client has timed out.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.RudpClient.heartbeatTimer">
            <summary>The timer responsible for sending regular heartbeats.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.RudpClient.lastHeartbeat">
            <summary>The time at which the last heartbeat was received from the client.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.RudpClient.lastPingId">
            <summary>ID of the last ping that was sent.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.RudpClient.pendingPingId">
            <summary>The ID of the currently pending ping.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.RudpClient.pendingPingStopwatch">
            <summary>The stopwatch that tracks the time since the currently pending ping was sent.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.RudpClient.connectBytes">
            <summary>An array of custom bytes to include when connecting.</summary>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpClient.#ctor(System.UInt16,System.UInt16,System.Byte,System.String)">
            <summary>Handles initial setup.</summary>
            <param name="timeoutTime">The time (in milliseconds) after which to disconnect if there's no heartbeat from the server.</param>
            <param name="heartbeatInterval">The interval (in milliseconds) at which heartbeats should be sent to the server.</param>
            <param name="maxConnectionAttempts">How many connection attempts to make before giving up.</param>
            <param name="logName">The name to use when logging messages via <see cref="T:Riptide.Utils.RiptideLogger"/>.</param>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpClient.Connect(System.String,Riptide.Message)">
            <inheritdoc/>
            <remarks>Expects the host address to consist of an IP and port, separated by a colon. For example: <c>127.0.0.1:7777</c>.</remarks>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpClient.ParseHostAddress(System.String,System.Net.IPAddress@,System.UInt16@)">
            <summary>Parses the <paramref name="hostAddress"/> and retrieves its <paramref name="ip"/> and <paramref name="port"/>, if possible.</summary>
            <param name="hostAddress">The host address to parse.</param>
            <param name="ip">The retrieved IP.</param>
            <param name="port">The retrieved port.</param>
            <returns>Whether or not the host address is valid.</returns>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpClient.Heartbeat">
            <summary>Sends a connnect or heartbeat message. Called by <see cref="F:Riptide.Transports.Rudp.RudpClient.heartbeatTimer"/>.</summary>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpClient.ShouldHandleMessageFrom(System.Net.IPEndPoint,Riptide.Transports.HeaderType)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpClient.Handle(Riptide.Message,System.Net.IPEndPoint,Riptide.Transports.HeaderType)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpClient.ReliableHandle(Riptide.Transports.HeaderType,System.UInt16,Riptide.Message,System.Net.IPEndPoint)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpClient.Send(Riptide.Message,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpClient.Disconnect">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpClient.Disconnect(Riptide.DisconnectReason,System.String)">
            <summary>Disconnects from the server.</summary>
            <param name="reason">The reason why the client is disconnecting/has disconnected.</param>
            <param name="customMessage">An optional custom message to display for the disconnection reason. Only used when <paramref name="reason"/> is set to <see cref="F:Riptide.DisconnectReason.kicked"/>.</param>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpClient.LocalDisconnect">
            <summary>Cleans up local objects on disconnection.</summary>
            <returns><see langword="true"/> if successfully disconnected.<br/><see langword="false"/> if it was already disconnected.</returns>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpClient.SendAck(System.UInt16,System.Net.IPEndPoint)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpClient.HandleAck(Riptide.Message)">
            <summary>Handles an ack message.</summary>
            <param name="message">The ack message to handle.</param>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpClient.HandleAckExtra(Riptide.Message)">
            <summary>Handles an ack message for a sequence ID other than the last received one.</summary>
            <param name="message">The ack message to handle.</param>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpClient.SendHeartbeat">
            <summary>Sends a heartbeat message.</summary>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpClient.HandleHeartbeat(Riptide.Message)">
            <summary>Handles a heartbeat message.</summary>
            <param name="message">The heartbeat message to handle.</param>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpClient.HandleWelcome(Riptide.Message)">
            <summary>Handles a welcome message.</summary>
            <param name="message">The welcome message to handle.</param>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpClient.SendWelcomeReceived">
            <summary>Sends a welcome (received) message.</summary>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpClient.OnConnected">
            <summary>Invokes the <see cref="E:Riptide.Transports.Rudp.RudpClient.Connected"/> event.</summary>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpClient.OnConnectionFailed">
            <summary>Invokes the <see cref="E:Riptide.Transports.Rudp.RudpClient.ConnectionFailed"/> event.</summary>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpClient.OnMessageReceived(Riptide.ClientMessageReceivedEventArgs)">
            <summary>Invokes the <see cref="E:Riptide.Transports.Rudp.RudpClient.MessageReceived"/> event.</summary>
            <param name="e">The event args to invoke the event with.</param>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpClient.OnDisconnected(Riptide.DisconnectedEventArgs)">
            <summary>Invokes the <see cref="E:Riptide.Transports.Rudp.RudpClient.Disconnected"/> event.</summary>
            <param name="e">The event args to invoke the event with.</param>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpClient.OnClientConnected(Riptide.ClientConnectedEventArgs)">
            <summary>Invokes the <see cref="E:Riptide.Transports.Rudp.RudpClient.ClientConnected"/> event.</summary>
            <param name="e">The event args to invoke the event with.</param>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpClient.OnClientDisconnected(Riptide.ClientDisconnectedEventArgs)">
            <summary>Invokes the <see cref="E:Riptide.Transports.Rudp.RudpClient.ClientDisconnected"/> event.</summary>
            <param name="e">The event args to invoke the event with.</param>
        </member>
        <member name="T:Riptide.Transports.Rudp.RudpConnection">
            <summary>Represents a server's connection to a client.</summary>
        </member>
        <member name="P:Riptide.Transports.Rudp.RudpConnection.Id">
            <inheritdoc/>
        </member>
        <member name="P:Riptide.Transports.Rudp.RudpConnection.RTT">
            <inheritdoc/>
        </member>
        <member name="P:Riptide.Transports.Rudp.RudpConnection.SmoothRTT">
            <inheritdoc/>
        </member>
        <member name="P:Riptide.Transports.Rudp.RudpConnection.IsNotConnected">
            <inheritdoc/>
        </member>
        <member name="P:Riptide.Transports.Rudp.RudpConnection.IsConnecting">
            <inheritdoc/>
        </member>
        <member name="P:Riptide.Transports.Rudp.RudpConnection.IsConnected">
            <inheritdoc/>
        </member>
        <member name="F:Riptide.Transports.Rudp.RudpConnection.RemoteEndPoint">
            <summary>The connection's remote endpoint.</summary>
        </member>
        <member name="P:Riptide.Transports.Rudp.RudpConnection.Peer">
            <summary>The client's <see cref="T:Riptide.Transports.Rudp.RudpPeer"/> instance.</summary>
        </member>
        <member name="P:Riptide.Transports.Rudp.RudpConnection.SendLockables">
            <inheritdoc cref="P:Riptide.Transports.Rudp.RudpPeer.SendLockables"/>
        </member>
        <member name="P:Riptide.Transports.Rudp.RudpConnection.HasTimedOut">
            <summary>Whether or not the client has timed out.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.RudpConnection.lastHeartbeat">
            <summary>The time at which the last heartbeat was received from the client.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.RudpConnection.server">
            <summary>The <see cref="T:Riptide.Transports.Rudp.RudpServer"/> that the client is associated with.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.RudpConnection.connectionState">
            <summary>The client's current connection state.</summary>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpConnection.#ctor(Riptide.Transports.Rudp.RudpServer,System.Net.IPEndPoint,System.UInt16)">
            <summary>Handles initial setup.</summary>
            <param name="server">The <see cref="T:Riptide.Transports.Rudp.RudpServer"/> that the client is associated with.</param>
            <param name="endPoint">The connection's remote endpoint.</param>
            <param name="id">The numeric ID of the client.</param>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpConnection.LocalDisconnect">
            <summary>Cleans up local objects on disconnection.</summary>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpConnection.SendAck(System.UInt16)">
            <summary>Sends an ack message for a sequence ID to a specific endpoint.</summary>
            <param name="forSeqId">The sequence ID to acknowledge.</param>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpConnection.HandleAck(Riptide.Message)">
            <summary>Handles an ack message.</summary>
            <param name="message">The ack message to handle.</param>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpConnection.HandleAckExtra(Riptide.Message)">
            <summary>Handles an ack message for a sequence ID other than the last received one.</summary>
            <param name="message">The ack message to handle.</param>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpConnection.SendHeartbeat(System.Byte)">
            <summary>Sends a heartbeat message.</summary>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpConnection.HandleHeartbeat(Riptide.Message)">
            <summary>Handles a heartbeat message.</summary>
            <param name="message">The heartbeat message to handle.</param>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpConnection.SendWelcome">
            <summary>Sends a welcome message.</summary>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpConnection.HandleWelcomeReceived(Riptide.Message)">
            <summary>Handles a welcome message.</summary>
            <param name="message">The welcome message to handle.</param>
        </member>
        <member name="T:Riptide.Transports.Rudp.RudpListener">
            <summary>Provides base sending &#38; receiving functionality for <see cref="T:Riptide.Transports.Rudp.RudpServer"/> and <see cref="T:Riptide.Transports.Rudp.RudpClient"/>.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.RudpListener.ReasonTimedOut">
            <summary>The text to log when disconnected due to <see cref="F:Riptide.DisconnectReason.timedOut"/>.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.RudpListener.ReasonKicked">
            <summary>The text to log when disconnected due to <see cref="F:Riptide.DisconnectReason.kicked"/>.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.RudpListener.ReasonServerStopped">
            <summary>The text to log when disconnected due to <see cref="F:Riptide.DisconnectReason.serverStopped"/>.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.RudpListener.ReasonDisconnected">
            <summary>The text to log when disconnected due to <see cref="F:Riptide.DisconnectReason.disconnected"/>.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.RudpListener.ReasonUnknown">
            <summary>The text to log when disconnected due to an unknown reason.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.RudpListener.LogName">
            <summary>The name to use when logging messages via <see cref="T:Riptide.Utils.RiptideLogger"/>.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.RudpListener.receiveActionQueue">
            <summary>The <see cref="T:Riptide.Utils.ActionQueue"/> to use when invoking events.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.RudpListener.ReceivePollingTime">
            <summary>How long to wait for a response, in microseconds.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.RudpListener.socket">
            <summary>The socket to use for sending and receiving.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.RudpListener.isRunning">
            <summary>Whether or not the socket is ready to send and receive data.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.RudpListener.receiveBuffer">
            <summary>The buffer that incoming data is received into.</summary>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpListener.#ctor(System.String)">
            <summary>Handles initial setup.</summary>
            <param name="logName">The name to use when logging messages via <see cref="T:Riptide.Utils.RiptideLogger"/>.</param>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpListener.Tick">
            <inheritdoc cref="M:Riptide.Transports.ICommon.Tick"/>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpListener.StartListening(System.UInt16)">
            <summary>Starts listening for incoming packets.</summary>
            <param name="port">The local port to listen on.</param>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpListener.StopListening">
            <summary>Stops listening for incoming packets.</summary>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpListener.Receive">
            <summary>Listens for and receives incoming packets.</summary>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpListener.PrepareToHandle(System.Int32,System.Net.IPEndPoint)">
            <summary>Takes a received message and prepares it to be handled.</summary>
            <param name="length">The length of the contents of message.</param>
            <param name="remoteEndPoint">The endpoint from which the message was received.</param>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpListener.ShouldHandleMessageFrom(System.Net.IPEndPoint,Riptide.Transports.HeaderType)">
            <summary>Determines whether or not to handle a message from a specific remote endpoint.</summary>
            <param name="endPoint">The endpoint from which the message was sent.</param>
            <param name="messageHeader">The header of the message.</param>
            <returns><see langword="true"/> if the message should be handled.</returns>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpListener.ReliableHandle(Riptide.Transports.HeaderType,System.UInt16,Riptide.Message,System.Net.IPEndPoint)">
            <summary>Handles the given reliably sent message.</summary>
            <param name="messageHeader">The header of the message.</param>
            <param name="sequenceId">The sequence ID of the message.</param>
            <param name="message">The message that was received.</param>
            <param name="fromEndPoint">The endpoint from which the message was received.</param>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpListener.ReliableHandle(Riptide.Transports.HeaderType,System.UInt16,Riptide.Message,System.Net.IPEndPoint,Riptide.Transports.Rudp.SendLockables)">
            <summary>Handles the given reliably sent message.</summary>
            <param name="messageHeader">The header of the message.</param>
            <param name="sequenceId">The sequence ID of the message.</param>
            <param name="message">The message that was received.</param>
            <param name="fromEndPoint">The endpoint from which the message was received.</param>
            <param name="lockables">The lockable values which are used to inform the other end of which messages we've received.</param>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpListener.UpdateAcksBitfield(System.Int32,Riptide.Transports.Rudp.SendLockables)">
            <summary>Updates the acks bitfield and determines whether or not to handle the message.</summary>
            <param name="sequenceGap">The gap between the newly received sequence ID and the previously last received sequence ID.</param>
            <param name="lockables">The lockable values which are used to inform the other end of which messages we've received.</param>
            <returns>Whether or not the message should be handled, based on whether or not it's a duplicate.</returns>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpListener.UpdateDuplicateFilterBitfield(System.Int32,Riptide.Transports.Rudp.SendLockables)">
            <summary>Updates the duplicate filter bitfield and determines whether or not to handle the message.</summary>
            <param name="sequenceGap">The gap between the newly received sequence ID and the previously last received sequence ID.</param>
            <param name="lockables">The lockable values which are used to inform the other end of which messages we've received.</param>
            <returns>Whether or not the message should be handled, based on whether or not it's a duplicate.</returns>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpListener.Handle(Riptide.Message,System.Net.IPEndPoint,Riptide.Transports.HeaderType)">
            <summary>Handles the given message.</summary>
            <param name="message">The message that was received.</param>
            <param name="fromEndPoint">The endpoint from which the message was received.</param>
            <param name="messageHeader">The header of the message.</param>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpListener.Send(System.Byte[],System.Net.IPEndPoint)">
            <summary>Sends data.</summary>
            <param name="data">The data to send.</param>
            <param name="toEndPoint">The endpoint to send the data to.</param>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpListener.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)">
            <summary>Sends data.</summary>
            <param name="data">The data to send.</param>
            <param name="numBytes">The number of bytes to send from the given data.</param>
            <param name="toEndPoint">The endpoint to send the data to.</param>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpListener.SendReliable(Riptide.Message,System.Net.IPEndPoint,Riptide.Transports.Rudp.RudpPeer)">
            <summary>Reliably sends the given message.</summary>
            <param name="message">The message to send reliably.</param>
            <param name="toEndPoint">The endpoint to send the message to.</param>
            <param name="peer">The <see cref="T:Riptide.Transports.Rudp.RudpPeer"/> to use to send (and resend) the pending message.</param>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpListener.SendAck(System.UInt16,System.Net.IPEndPoint)">
            <summary>Sends an acknowledgement for a sequence ID to a specific endpoint.</summary>
            <param name="forSeqId">The sequence ID to acknowledge.</param>
            <param name="toEndPoint">The endpoint to send the acknowledgement to.</param>
        </member>
        <member name="T:Riptide.Transports.Rudp.RudpPeer">
            <summary>Provides functionality for sending and receiving messages reliably.</summary>
        </member>
        <member name="P:Riptide.Transports.Rudp.RudpPeer.NextSequenceId">
            <summary>The next sequence ID to use.</summary>
        </member>
        <member name="P:Riptide.Transports.Rudp.RudpPeer.SendLockables">
            <summary>The lockable values which are used to inform the other end of which messages we've received.</summary>
        </member>
        <member name="P:Riptide.Transports.Rudp.RudpPeer.ReceiveLockables">
            <summary>The lockable values which are used to determine which messages the other end has received.</summary>
        </member>
        <member name="P:Riptide.Transports.Rudp.RudpPeer.PendingMessages">
            <summary>The currently pending reliably sent messages whose delivery has not been acknowledged yet. Stored by sequence ID.</summary>
        </member>
        <member name="P:Riptide.Transports.Rudp.RudpPeer.RTT">
            <inheritdoc cref="P:Riptide.Transports.IConnectionInfo.RTT"/>
        </member>
        <member name="P:Riptide.Transports.Rudp.RudpPeer.SmoothRTT">
            <inheritdoc cref="P:Riptide.Transports.IConnectionInfo.SmoothRTT"/>
        </member>
        <member name="F:Riptide.Transports.Rudp.RudpPeer.Listener">
            <summary>The <see cref="T:Riptide.Transports.Rudp.RudpListener"/> whose socket to use when sending data.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.RudpPeer.lastSequenceId">
            <summary>The last used sequence ID.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.RudpPeer.LeftBit">
            <summary>A <see cref="T:System.UInt16"/> with the left-most bit set to 1.</summary>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpPeer.#ctor(Riptide.Transports.Rudp.RudpListener)">
            <summary>Handles initial setup.</summary>
            <param name="rudpListener">The <see cref="T:Riptide.Transports.Rudp.RudpListener"/> whose socket to use when sending data.</param>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpPeer.UpdateReceivedAcks(System.UInt16,System.UInt16)">
            <summary>Updates which messages we've received acks for.</summary>
            <param name="remoteLastReceivedSeqId">The latest sequence ID that the other end has received.</param>
            <param name="remoteAcksBitField">A redundant list of sequence IDs that the other end has (or has not) received.</param>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpPeer.CheckMessageAckStatus(System.UInt16,System.UInt16)">
            <summary>Check the ack status of the given sequence ID.</summary>
            <param name="sequenceId">The sequence ID whose ack status to check.</param>
            <param name="bit">The bit corresponding to the sequence ID's position in the bit field.</param>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpPeer.AckMessage(System.UInt16)">
            <summary>Immediately marks the <see cref="T:Riptide.Transports.Rudp.PendingMessage"/> of a given sequence ID as delivered.</summary>
            <param name="seqId">The sequence ID that was acknowledged.</param>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpPeer.GetSequenceGap(System.UInt16,System.UInt16)">
            <summary>Calculates the signed gap between sequence IDs, accounting for wrapping.</summary>
            <param name="seqId1">The new sequence ID.</param>
            <param name="seqId2">The previous sequence ID.</param>
            <returns>The signed gap between the two given sequence IDs. A positive gap means <paramref name="seqId1"/> is newer than <paramref name="seqId2"/>. A negative gap means <paramref name="seqId1"/> is older than <paramref name="seqId2"/>.</returns>
        </member>
        <member name="T:Riptide.Transports.Rudp.RudpServer">
            <summary>A server that can accept connections from <see cref="T:Riptide.Transports.Rudp.RudpClient"/>s.</summary>
        </member>
        <member name="E:Riptide.Transports.Rudp.RudpServer.ClientConnected">
            <inheritdoc/>
        </member>
        <member name="E:Riptide.Transports.Rudp.RudpServer.MessageReceived">
            <inheritdoc/>
        </member>
        <member name="E:Riptide.Transports.Rudp.RudpServer.ClientDisconnected">
            <inheritdoc/>
        </member>
        <member name="P:Riptide.Transports.Rudp.RudpServer.Port">
            <inheritdoc/>
        </member>
        <member name="P:Riptide.Transports.Rudp.RudpServer.MaxClientCount">
            <inheritdoc/>
        </member>
        <member name="P:Riptide.Transports.Rudp.RudpServer.ClientCount">
            <inheritdoc/>
        </member>
        <member name="P:Riptide.Transports.Rudp.RudpServer.Clients">
            <inheritdoc/>
        </member>
        <member name="P:Riptide.Transports.Rudp.RudpServer.AllowAutoMessageRelay">
            <inheritdoc/>
        </member>
        <member name="P:Riptide.Transports.Rudp.RudpServer.ClientTimeoutTime">
            <summary>The time (in milliseconds) after which to disconnect a client without a heartbeat.</summary>
        </member>
        <member name="P:Riptide.Transports.Rudp.RudpServer.ClientHeartbeatInterval">
            <summary>The interval (in milliseconds) at which heartbeats are to be expected from clients.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.RudpServer.clients">
            <summary>Currently connected clients, accessible by their endpoints or numeric ID.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.RudpServer.timedOutClients">
            <summary>Endpoints of clients that have timed out and need to be removed from the <see cref="F:Riptide.Transports.Rudp.RudpServer.clients"/> dictionary.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.RudpServer.availableClientIds">
            <summary>All currently unused client IDs.</summary>
        </member>
        <member name="F:Riptide.Transports.Rudp.RudpServer.heartbeatTimer">
            <summary>The timer responsible for sending regular heartbeats.</summary>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpServer.#ctor(System.UInt16,System.UInt16,System.String)">
            <summary>Handles initial setup.</summary>
            <param name="clientTimeoutTime">The time (in milliseconds) after which to disconnect a client without a heartbeat.</param>
            <param name="clientHeartbeatInterval">The interval (in milliseconds) at which heartbeats are to be expected from clients.</param>
            <param name="logName">The name to use when logging messages via <see cref="T:Riptide.Utils.RiptideLogger"/>.</param>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpServer.Start(System.UInt16,System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpServer.Heartbeat">
            <summary>Checks if clients have timed out. Called by <see cref="F:Riptide.Transports.Rudp.RudpServer.heartbeatTimer"/>.</summary>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpServer.ShouldHandleMessageFrom(System.Net.IPEndPoint,Riptide.Transports.HeaderType)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpServer.Handle(Riptide.Message,System.Net.IPEndPoint,Riptide.Transports.HeaderType)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpServer.ReliableHandle(Riptide.Transports.HeaderType,System.UInt16,Riptide.Message,System.Net.IPEndPoint)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpServer.Send(Riptide.Message,System.UInt16,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpServer.Send(Riptide.Message,Riptide.Transports.Rudp.RudpConnection,System.Boolean)">
            <summary>Sends a message to a specific client.</summary>
            <param name="message">The message to send.</param>
            <param name="toClient">The client to send the message to.</param>
            <param name="shouldRelease">Whether or not <paramref name="message"/> should be returned to the pool once its data has been sent.</param>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpServer.SendToAll(Riptide.Message,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpServer.SendToAll(Riptide.Message,System.UInt16,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpServer.TryGetClient(System.UInt16,Riptide.Transports.IConnectionInfo@)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpServer.DisconnectClient(System.UInt16,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpServer.Disconnect(Riptide.Transports.Rudp.RudpConnection,Riptide.DisconnectReason,System.String)">
            <summary>Disconnects a given client.</summary>
            <param name="client">The client to disconnect.</param>
            <param name="reason">The reason why the client is being disconnected.</param>
            <param name="customMessage">An optional custom message to display for the disconnection reason. Only used when <paramref name="reason"/> is set to <see cref="F:Riptide.DisconnectReason.kicked"/>.</param>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpServer.Shutdown">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpServer.InitializeClientIds">
            <summary>Initializes available client IDs.</summary>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpServer.GetAvailableClientId">
            <summary>Retrieves an available client ID.</summary>
            <returns>The client ID. 0 if none available.</returns>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpServer.TryGetClient(System.UInt16,Riptide.Transports.Rudp.RudpConnection@)">
            <summary>Attempts to retrieve a client using a given ID.</summary>
            <param name="id">The ID of the client to retrieve.</param>
            <param name="client">The retrieved client (if any).</param>
            <returns><see langword="true"/> if the client was successfully retrieved; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpServer.TryGetClient(System.Net.IPEndPoint,Riptide.Transports.Rudp.RudpConnection@)">
            <summary>Attempts to retrieve a client using a given endpoint.</summary>
            <param name="endPoint">The endpoint of the client to retrieve.</param>
            <param name="client">The retrieved client (if any).</param>
            <returns><see langword="true"/> if the client was successfully retrieved; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpServer.SendDisconnect(System.UInt16,Riptide.DisconnectReason,System.String)">
            <summary>Sends a disconnect message.</summary>
            <param name="clientId">The client to send the disconnect message to.</param>
            <param name="reason">Why the client is being disconnected.</param>
            <param name="customMessage">A custom message which is used to inform clients why they were disconnected.</param>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpServer.SendAck(System.UInt16,System.Net.IPEndPoint)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpServer.SendClientConnected(System.Net.IPEndPoint,System.UInt16)">
            <summary>Sends a client connected message.</summary>
            <param name="endPoint">The endpoint of the newly connected client.</param>
            <param name="id">The ID of the newly connected client.</param>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpServer.SendClientDisconnected(System.UInt16)">
            <summary>Sends a client disconnected message.</summary>
            <param name="id">The numeric ID of the client that disconnected.</param>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpServer.OnClientConnected(System.Net.IPEndPoint,Riptide.ServerClientConnectedEventArgs)">
            <summary>Invokes the <see cref="E:Riptide.Transports.Rudp.RudpServer.ClientConnected"/> event.</summary>
            <param name="clientEndPoint">The endpoint of the newly connected client.</param>
            <param name="e">The event args to invoke the event with.</param>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpServer.OnMessageReceived(Riptide.Message,System.Net.IPEndPoint)">
            <summary>Invokes the <see cref="E:Riptide.Transports.Rudp.RudpServer.MessageReceived"/> event.</summary>
            <param name="message">The received message.</param>
            <param name="fromEndPoint">The endpoint from which the message was received.</param>
        </member>
        <member name="M:Riptide.Transports.Rudp.RudpServer.OnClientDisconnected(Riptide.ClientDisconnectedEventArgs)">
            <summary>Invokes the <see cref="E:Riptide.Transports.Rudp.RudpServer.ClientDisconnected"/> event.</summary>
            <param name="e">The event args to invoke the event with.</param>
        </member>
        <member name="T:Riptide.Utils.ActionQueue">
            <summary>Provides functionality for queueing methods for later execution from a chosen thread.</summary>
        </member>
        <member name="F:Riptide.Utils.ActionQueue.LogName">
            <summary>The name to use when logging messages via <see cref="T:Riptide.Utils.RiptideLogger"/>.</summary>
        </member>
        <member name="M:Riptide.Utils.ActionQueue.#ctor(System.String)">
            <summary>Handles initial setup.</summary>
            <param name="logName">The name to use when logging messages via <see cref="T:Riptide.Utils.RiptideLogger"/>.</param>
        </member>
        <member name="M:Riptide.Utils.ActionQueue.Add(System.Action)">
            <summary>Adds an action to the queue.</summary>
            <param name="action">The action to be added to the queue.</param>
        </member>
        <member name="M:Riptide.Utils.ActionQueue.ExecuteAll">
            <summary>Executes all actions in the queue on the calling thread.</summary>
            <remarks>This method should only be called from a single thread in the application.</remarks>
        </member>
        <member name="M:Riptide.Utils.ActionQueue.Clear">
            <summary>Clears all actions in the queue without executing them.</summary>
        </member>
        <member name="T:Riptide.Utils.DoubleKeyDictionary`3">
            <summary>Represents a collection of two keys for each value.</summary>
            <typeparam name="TKey1">Key type 1.</typeparam>
            <typeparam name="TKey2">Key type 2.</typeparam>
            <typeparam name="TValue">Value type.</typeparam>
        </member>
        <member name="F:Riptide.Utils.DoubleKeyDictionary`3.key1Dictionary">
            <summary>A dictionary mapping key 1s to values.</summary>
        </member>
        <member name="F:Riptide.Utils.DoubleKeyDictionary`3.key2Dictionary">
            <summary>A dictionary mapping key 2s to values.</summary>
        </member>
        <member name="P:Riptide.Utils.DoubleKeyDictionary`3.FirstKeys">
            <summary>Gets a collection containing the first set of keys in the dictionary.</summary>
        </member>
        <member name="P:Riptide.Utils.DoubleKeyDictionary`3.SecondKeys">
            <summary>Gets a collection containing the second set of keys in the dictionary.</summary>
        </member>
        <member name="P:Riptide.Utils.DoubleKeyDictionary`3.Values">
            <summary>Gets a collection containing the values in the dictionary.</summary>
        </member>
        <member name="P:Riptide.Utils.DoubleKeyDictionary`3.Count">
            <summary>Gets the number of key1/key2/value sets in the dictionary.</summary>
        </member>
        <member name="M:Riptide.Utils.DoubleKeyDictionary`3.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Riptide.Utils.DoubleKeyDictionary`3"/> class that is empty and has the default initial capacity.</summary>
        </member>
        <member name="M:Riptide.Utils.DoubleKeyDictionary`3.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Riptide.Utils.DoubleKeyDictionary`3"/> class that is empty and has the specefied initial capacity.</summary>
            <param name="capacity">The initial number of elements that the <see cref="T:Riptide.Utils.DoubleKeyDictionary`3"/> can contain.</param>
        </member>
        <member name="M:Riptide.Utils.DoubleKeyDictionary`3.GetEnumerator">
            <summary>Returns an enumerator that iterates through the dictionary.</summary>
        </member>
        <member name="M:Riptide.Utils.DoubleKeyDictionary`3.Add(`0,`1,`2)">
            <summary>Adds the specified keys and value to the dictionary.</summary>
            <param name="key1">The key 1 of the element to add.</param>
            <param name="key2">The key 2 of the element to add.</param>
            <param name="value">The value of the element to add.</param>
        </member>
        <member name="M:Riptide.Utils.DoubleKeyDictionary`3.TryGetValue(`0,`2@)">
            <summary>Gets the value associated with the key 1.</summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns><see langword="true"/> if the dictionary contains an element with the specified key; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.DoubleKeyDictionary`3.TryGetValue(`1,`2@)">
            <summary>Gets the value associated with the key 2.</summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns><see langword="true"/> if the dictionary contains an element with the specified key; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.DoubleKeyDictionary`3.ContainsKey(`0)">
            <summary>Determines whether the dictionary contains the specified key 1.</summary>
            <param name="key">The key to locate in the dictionary.</param>
            <returns><see langword="true"/> if the dictionary contains an element with the specified key; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.DoubleKeyDictionary`3.ContainsKey(`1)">
            <summary>Determines whether the dictionary contains the specified key 2.</summary>
            <param name="key">The key to locate in the dictionary.</param>
            <returns><see langword="true"/> if the dictionary contains an element with the specified key; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.DoubleKeyDictionary`3.Remove(`0,`1)">
            <summary>Removes the value with the specified keys from the dictionary</summary>
            <param name="key1">The key 1 of the element to remove.</param>
            <param name="key2">The key 2 of the element to remove.</param>
            <returns><see langword="true"/> if the element is successfully found and removed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.DoubleKeyDictionary`3.Clear">
            <summary>Removes all keys and values from the dictionary.</summary>
        </member>
        <member name="P:Riptide.Utils.DoubleKeyDictionary`3.Item(`0)">
            <summary>Gets the value associated with the specified key 1.</summary>
            <param name="key">The key 1 of the value to get.</param>
            <returns>The value associated with the specified key 1.</returns>
        </member>
        <member name="P:Riptide.Utils.DoubleKeyDictionary`3.Item(`1)">
            <summary>Gets the value associated with the specified key 2.</summary>
            <param name="key">The key 2 of the value to get.</param>
            <returns>The value associated with the specified key 2.</returns>
        </member>
        <member name="T:Riptide.Utils.Extensions">
            <summary>Contains extension methods for various classes.</summary>
        </member>
        <member name="M:Riptide.Utils.Extensions.ToStringBasedOnIPFormat(System.Net.IPEndPoint)">
            <summary>Takes an <see cref="T:System.Net.IPEndPoint"/> and returns a string containing its IP address and port number, accounting for whether the address is an IPv4 or IPv6.</summary>
            <returns>A string containing the IP address and port number of the endpoint.</returns>
        </member>
        <member name="T:Riptide.Utils.Helper">
            <summary>Contains miscellaneous helper methods.</summary>
        </member>
        <member name="M:Riptide.Utils.Helper.CorrectForm(System.Int32,System.String,System.String)">
            <summary>Determines whether <paramref name="singular"/> or <paramref name="plural"/> form should be used based on the <paramref name="amount"/>.</summary>
            <param name="amount">The amount that <paramref name="singular"/> and <paramref name="plural"/> refer to.</param>
            <param name="singular">The singular form.</param>
            <param name="plural">The plural form.</param>
            <returns><paramref name="singular"/> if <paramref name="amount"/> is 1; otherwise <paramref name="plural"/>.</returns>
        </member>
        <member name="T:Riptide.Utils.BroadcastMode">
            <summary>Defines broadcast modes.</summary>
        </member>
        <member name="F:Riptide.Utils.BroadcastMode.none">
            <summary>Not currently broadcasting or listening for broadcasts.</summary>
        </member>
        <member name="F:Riptide.Utils.BroadcastMode.broadcasting">
            <summary>Currently broadcasting.</summary>
        </member>
        <member name="F:Riptide.Utils.BroadcastMode.listening">
            <summary>Currently listening for broadcasts.</summary>
        </member>
        <member name="T:Riptide.Utils.LanDiscovery">
            <summary>Provides functionality for discovering game hosts over LAN.</summary>
        </member>
        <member name="E:Riptide.Utils.LanDiscovery.HostDiscovered">
            <summary>Invoked when a host is found on the LAN.</summary>
        </member>
        <member name="P:Riptide.Utils.LanDiscovery.UniqueKey">
            <summary>This app's unique key, used to determine whether to handle or ignore received data.</summary>
        </member>
        <member name="P:Riptide.Utils.LanDiscovery.Mode">
            <summary>The current broadcast mode.</summary>
        </member>
        <member name="P:Riptide.Utils.LanDiscovery.BroadcastPort">
            <summary>The port to send broadcasts to/listen for broadcasts on.</summary>
        </member>
        <member name="P:Riptide.Utils.LanDiscovery.HostIP">
            <summary>The IP to broadcast.</summary>
        </member>
        <member name="P:Riptide.Utils.LanDiscovery.HostPort">
            <summary>The port to broadcast.</summary>
        </member>
        <member name="F:Riptide.Utils.LanDiscovery.localIPAdress">
            <summary>The current machine's local IP.</summary>
        </member>
        <member name="F:Riptide.Utils.LanDiscovery.subnetMask">
            <summary>The subnet mask for <see cref="F:Riptide.Utils.LanDiscovery.localIPAdress"/>.</summary>
        </member>
        <member name="F:Riptide.Utils.LanDiscovery.broadcastEndPoint">
            <summary>The endpoint to which to send data in order to broadcast it to all machines on the LAN.</summary>
        </member>
        <member name="F:Riptide.Utils.LanDiscovery.socket">
            <summary>The socket used to send and listen for broadcasted data.</summary>
        </member>
        <member name="F:Riptide.Utils.LanDiscovery.endPoint">
            <summary>A reusable <see cref="T:System.Net.EndPoint"/> instance.</summary>
        </member>
        <member name="F:Riptide.Utils.LanDiscovery.broadcastSendBytes">
            <summary>The array used to broadcast data.</summary>
        </member>
        <member name="F:Riptide.Utils.LanDiscovery.broadcastReceiveBytes">
            <summary>The array into which broadcasted data is received.</summary>
        </member>
        <member name="F:Riptide.Utils.LanDiscovery.actionQueue">
            <summary>The <see cref="T:Riptide.Utils.ActionQueue"/> to use when invoking events.</summary>
        </member>
        <member name="M:Riptide.Utils.LanDiscovery.#ctor(System.Int64,System.UInt16)">
            <summary>Handles initial setup.</summary>
            <param name="uniqueKey">This app's unique key, used to determine whether to handle or ignore received data.</param>
            <param name="broadcastPort">The port to send broadcasts to/listen for broadcasts on.</param>
        </member>
        <member name="M:Riptide.Utils.LanDiscovery.SendBroadcast">
            <summary>Sends a broadcast to all machines on the LAN.</summary>
        </member>
        <member name="M:Riptide.Utils.LanDiscovery.SendBroadcastResponse(System.Net.IPEndPoint)">
            <summary>Sends a response to a broadcast.</summary>
            <param name="toEndPoint">The endpoint to send the response to.</param>
        </member>
        <member name="M:Riptide.Utils.LanDiscovery.StartListening">
            <summary>Begins listening for broadcasted data.</summary>
        </member>
        <member name="M:Riptide.Utils.LanDiscovery.ReceiveCallback(System.IAsyncResult)">
            <summary>Receives data.</summary>
        </member>
        <member name="M:Riptide.Utils.LanDiscovery.Tick">
            <summary>Initiates execution of any queued event invocations.</summary>
            <remarks>This should generally be called from within a regularly executed update loop (like FixedUpdate in Unity). Broadcasts will continue to discover hosts on the LAN in between calls, but the <see cref="E:Riptide.Utils.LanDiscovery.HostDiscovered"/> event won't be invoked until this method is executed.</remarks>
        </member>
        <member name="M:Riptide.Utils.LanDiscovery.SetBroadcastData">
            <summary>Sets the data that will be sent as part of a broadcast.</summary>
        </member>
        <member name="M:Riptide.Utils.LanDiscovery.SetBroadcastResponseData">
            <summary>Sets the data that will be sent in response to a broadcast.</summary>
        </member>
        <member name="M:Riptide.Utils.LanDiscovery.HandleBroadcastData(System.Int32)">
            <summary>Handles the data received as part of a broadcast.</summary>
            <param name="bytesReceived">The number of bytes that were received.</param>
        </member>
        <member name="M:Riptide.Utils.LanDiscovery.HandleBroadcastResponseData(System.Int32)">
            <summary>Handles the data received in response to a broadcast.</summary>
            <param name="bytesReceived">The number of bytes that were received.</param>
        </member>
        <member name="M:Riptide.Utils.LanDiscovery.Restart">
            <summary>Stops all broadcast activities and prepares this <see cref="T:Riptide.Utils.LanDiscovery"/> instance for reuse.</summary>
        </member>
        <member name="M:Riptide.Utils.LanDiscovery.Stop">
            <summary>Stops all broadcast activities.</summary>
        </member>
        <member name="M:Riptide.Utils.LanDiscovery.GetLocalIPAddress">
            <summary>Retrieves the current machine's local IP.</summary>
            <returns>The current machine's local IP.</returns>
        </member>
        <member name="M:Riptide.Utils.LanDiscovery.GetBroadcastAddress(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>Calculates the broadcast address, given an IP and its subnet mask.</summary>
            <param name="address">The IP to use.</param>
            <param name="subnetMask">The subnet mask to use.</param>
            <returns>The calculated broadcast address.</returns>
        </member>
        <member name="M:Riptide.Utils.LanDiscovery.GetSubnetMask(System.Net.IPAddress)">
            <summary>Takes an IP and retrieves its subnet mask.</summary>
            <param name="address">The IP for which to retrieve the subnet mask.</param>
            <returns>The retrieved subnet mask.</returns>
        </member>
        <member name="M:Riptide.Utils.LanDiscovery.OnHostDiscovered(System.Net.IPAddress,System.UInt16)">
            <summary>Invokes the <see cref="E:Riptide.Utils.LanDiscovery.HostDiscovered"/>.</summary>
            <param name="ip">The IP of the discovered host.</param>
            <param name="port">The port of the discovered host.</param>
        </member>
        <member name="T:Riptide.Utils.HostDiscoveredEventArgs">
            <summary>Contains event data for when a host is discovered on the LAN.</summary>
        </member>
        <member name="P:Riptide.Utils.HostDiscoveredEventArgs.HostIP">
            <summary>The IP of the discovered host.</summary>
        </member>
        <member name="P:Riptide.Utils.HostDiscoveredEventArgs.HostPort">
            <summary>The port of the discovered host.</summary>
        </member>
        <member name="M:Riptide.Utils.HostDiscoveredEventArgs.#ctor(System.Net.IPAddress,System.UInt16)">
            <summary>Initializes event data.</summary>
            <param name="hostIP">The IP of the discovered host.</param>
            <param name="hostPort">The port of the discovered host.</param>
        </member>
        <member name="T:Riptide.Utils.RiptideConverter">
            <summary>Provides functionality for converting bytes to various value types and vice versa.</summary>
        </member>
        <member name="F:Riptide.Utils.RiptideConverter.BoolLength">
            <summary>How many bytes a <see cref="T:System.Boolean"/> is represented by.</summary>
        </member>
        <member name="F:Riptide.Utils.RiptideConverter.ShortLength">
            <summary>How many bytes a <see cref="T:System.Int16"/> is represented by.</summary>
        </member>
        <member name="F:Riptide.Utils.RiptideConverter.UShortLength">
            <summary>How many bytes a <see cref="T:System.UInt16"/> is represented by.</summary>
        </member>
        <member name="F:Riptide.Utils.RiptideConverter.IntLength">
            <summary>How many bytes an <see cref="T:System.Int32"/> is represented by.</summary>
        </member>
        <member name="F:Riptide.Utils.RiptideConverter.UIntLength">
            <summary>How many bytes an <see cref="T:System.UInt32"/> is represented by.</summary>
        </member>
        <member name="F:Riptide.Utils.RiptideConverter.LongLength">
            <summary>How many bytes a <see cref="T:System.Int64"/> is represented by.</summary>
        </member>
        <member name="F:Riptide.Utils.RiptideConverter.ULongLength">
            <summary>How many bytes a <see cref="T:System.UInt64"/> is represented by.</summary>
        </member>
        <member name="F:Riptide.Utils.RiptideConverter.FloatLength">
            <summary>How many bytes a <see cref="T:System.Single"/> is represented by.</summary>
        </member>
        <member name="F:Riptide.Utils.RiptideConverter.DoubleLength">
            <summary>How many bytes a <see cref="T:System.Double"/> is represented by.</summary>
        </member>
        <member name="M:Riptide.Utils.RiptideConverter.FromShort(System.Int16,System.Byte[],System.Int32)">
            <summary>Converts a given <see cref="T:System.Int16"/> to bytes and writes them into the given array.</summary>
            <param name="value">The <see cref="T:System.Int16"/> to convert.</param>
            <param name="array">The array to write the bytes into.</param>
            <param name="startIndex">The position in the array at which to write the bytes.</param>
        </member>
        <member name="M:Riptide.Utils.RiptideConverter.FromUShort(System.UInt16,System.Byte[],System.Int32)">
            <summary>Converts a given <see cref="T:System.UInt16"/> to bytes and writes them into the given array.</summary>
            <param name="value">The <see cref="T:System.UInt16"/> to convert.</param>
            <param name="array">The array to write the bytes into.</param>
            <param name="startIndex">The position in the array at which to write the bytes.</param>
        </member>
        <member name="M:Riptide.Utils.RiptideConverter.ToShort(System.Byte[],System.Int32)">
            <summary>Converts the 2 bytes in the array at <paramref name="startIndex"/> to a <see cref="T:System.Int16"/>.</summary>
            <param name="array">The array to read the bytes from.</param>
            <param name="startIndex">The position in the array at which to read the bytes.</param>
            <returns>The converted <see cref="T:System.Int16"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.RiptideConverter.ToUShort(System.Byte[],System.Int32)">
            <summary>Converts the 2 bytes in the array at <paramref name="startIndex"/> to a <see cref="T:System.UInt16"/>.</summary>
            <param name="array">The array to read the bytes from.</param>
            <param name="startIndex">The position in the array at which to read the bytes.</param>
            <returns>The converted <see cref="T:System.UInt16"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.RiptideConverter.FromInt(System.Int32,System.Byte[],System.Int32)">
            <summary>Converts a given <see cref="T:System.Int32"/> to bytes and writes them into the given array.</summary>
            <param name="value">The <see cref="T:System.Int32"/> to convert.</param>
            <param name="array">The array to write the bytes into.</param>
            <param name="startIndex">The position in the array at which to write the bytes.</param>
        </member>
        <member name="M:Riptide.Utils.RiptideConverter.FromUInt(System.UInt32,System.Byte[],System.Int32)">
            <summary>Converts a given <see cref="T:System.UInt32"/> to bytes and writes them into the given array.</summary>
            <param name="value">The <see cref="T:System.UInt32"/> to convert.</param>
            <param name="array">The array to write the bytes into.</param>
            <param name="startIndex">The position in the array at which to write the bytes.</param>
        </member>
        <member name="M:Riptide.Utils.RiptideConverter.ToInt(System.Byte[],System.Int32)">
            <summary>Converts the 4 bytes in the array at <paramref name="startIndex"/> to a <see cref="T:System.Int32"/>.</summary>
            <param name="array">The array to read the bytes from.</param>
            <param name="startIndex">The position in the array at which to read the bytes.</param>
            <returns>The converted <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.RiptideConverter.ToUInt(System.Byte[],System.Int32)">
            <summary>Converts the 4 bytes in the array at <paramref name="startIndex"/> to a <see cref="T:System.UInt32"/>.</summary>
            <param name="array">The array to read the bytes from.</param>
            <param name="startIndex">The position in the array at which to read the bytes.</param>
            <returns>The converted <see cref="T:System.UInt32"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.RiptideConverter.FromLong(System.Int64,System.Byte[],System.Int32)">
            <summary>Converts a given <see cref="T:System.Int64"/> to bytes and writes them into the given array.</summary>
            <param name="value">The <see cref="T:System.Int64"/> to convert.</param>
            <param name="array">The array to write the bytes into.</param>
            <param name="startIndex">The position in the array at which to write the bytes.</param>
        </member>
        <member name="M:Riptide.Utils.RiptideConverter.FromULong(System.UInt64,System.Byte[],System.Int32)">
            <summary>Converts a given <see cref="T:System.UInt64"/> to bytes and writes them into the given array.</summary>
            <param name="value">The <see cref="T:System.UInt64"/> to convert.</param>
            <param name="array">The array to write the bytes into.</param>
            <param name="startIndex">The position in the array at which to write the bytes.</param>
        </member>
        <member name="M:Riptide.Utils.RiptideConverter.ToLong(System.Byte[],System.Int32)">
            <summary>Converts the 8 bytes in the array at <paramref name="startIndex"/> to a <see cref="T:System.Int64"/>.</summary>
            <param name="array">The array to read the bytes from.</param>
            <param name="startIndex">The position in the array at which to read the bytes.</param>
            <returns>The converted <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.RiptideConverter.ToULong(System.Byte[],System.Int32)">
            <summary>Converts the 8 bytes in the array at <paramref name="startIndex"/> to a <see cref="T:System.UInt64"/>.</summary>
            <param name="array">The array to read the bytes from.</param>
            <param name="startIndex">The position in the array at which to read the bytes.</param>
            <returns>The converted <see cref="T:System.UInt64"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.RiptideConverter.FromFloat(System.Single,System.Byte[],System.Int32)">
            <summary>Converts a given <see cref="T:System.Single"/> to bytes and writes them into the given array.</summary>
            <param name="value">The <see cref="T:System.Single"/> to convert.</param>
            <param name="array">The array to write the bytes into.</param>
            <param name="startIndex">The position in the array at which to write the bytes.</param>
        </member>
        <member name="M:Riptide.Utils.RiptideConverter.ToFloat(System.Byte[],System.Int32)">
            <summary>Converts the 4 bytes in the array at <paramref name="startIndex"/> to a <see cref="T:System.Single"/>.</summary>
            <param name="array">The array to read the bytes from.</param>
            <param name="startIndex">The position in the array at which to read the bytes.</param>
            <returns>The converted <see cref="T:System.Single"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.RiptideConverter.FromDouble(System.Double,System.Byte[],System.Int32)">
            <summary>Converts a given <see cref="T:System.Double"/> to bytes and writes them into the given array.</summary>
            <param name="value">The <see cref="T:System.Double"/> to convert.</param>
            <param name="array">The array to write the bytes into.</param>
            <param name="startIndex">The position in the array at which to write the bytes.</param>
        </member>
        <member name="M:Riptide.Utils.RiptideConverter.ToDouble(System.Byte[],System.Int32)">
            <summary>Converts the 8 bytes in the array at <paramref name="startIndex"/> to a <see cref="T:System.Double"/>.</summary>
            <param name="array">The array to read the bytes from.</param>
            <param name="startIndex">The position in the array at which to read the bytes.</param>
            <returns>The converted <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="T:Riptide.Utils.LogType">
            <summary>Defines log message types.</summary>
        </member>
        <member name="F:Riptide.Utils.LogType.debug">
            <summary>Logs that are used for investigation during development.</summary>
        </member>
        <member name="F:Riptide.Utils.LogType.info">
            <summary>Logs that provide general information about application flow.</summary>
        </member>
        <member name="F:Riptide.Utils.LogType.warning">
            <summary>Logs that highlight abnormal or unexpected events in the application flow.</summary>
        </member>
        <member name="F:Riptide.Utils.LogType.error">
            <summary>Logs that highlight problematic events in the application flow which will cause unexpected behavior if not planned for.</summary>
        </member>
        <member name="T:Riptide.Utils.RiptideLogger">
            <summary>Provides functionality for logging messages.</summary>
        </member>
        <member name="P:Riptide.Utils.RiptideLogger.IsDebugLoggingEnabled">
            <summary>Whether or not <see cref="F:Riptide.Utils.LogType.debug"/> messages will be logged.</summary>
        </member>
        <member name="P:Riptide.Utils.RiptideLogger.IsInfoLoggingEnabled">
            <summary>Whether or not <see cref="F:Riptide.Utils.LogType.info"/> messages will be logged.</summary>
        </member>
        <member name="P:Riptide.Utils.RiptideLogger.IsWarningLoggingEnabled">
            <summary>Whether or not <see cref="F:Riptide.Utils.LogType.warning"/> messages will be logged.</summary>
        </member>
        <member name="P:Riptide.Utils.RiptideLogger.IsErrorLoggingEnabled">
            <summary>Whether or not <see cref="F:Riptide.Utils.LogType.error"/> messages will be logged.</summary>
        </member>
        <member name="T:Riptide.Utils.RiptideLogger.LogMethod">
            <summary>Encapsulates a method used to log messages.</summary>
            <param name="log">The message to log.</param>
        </member>
        <member name="F:Riptide.Utils.RiptideLogger.logMethods">
            <summary>Log methods, accessible by their <see cref="T:Riptide.Utils.LogType"/></summary>
        </member>
        <member name="F:Riptide.Utils.RiptideLogger.includeTimestamps">
            <summary>Whether or not to include timestamps when logging messages.</summary>
        </member>
        <member name="F:Riptide.Utils.RiptideLogger.timestampFormat">
            <summary>The format to use for timestamps.</summary>
        </member>
        <member name="M:Riptide.Utils.RiptideLogger.Initialize(Riptide.Utils.RiptideLogger.LogMethod,System.Boolean,System.String)">
            <summary>Initializes <see cref="T:Riptide.Utils.RiptideLogger"/> with all log types enabled.</summary>
            <param name="logMethod">The method to use when logging all types of messages.</param>
            <param name="includeTimestamps">Whether or not to include timestamps when logging messages.</param>
            <param name="timestampFormat">The format to use for timestamps.</param>
        </member>
        <member name="M:Riptide.Utils.RiptideLogger.Initialize(Riptide.Utils.RiptideLogger.LogMethod,Riptide.Utils.RiptideLogger.LogMethod,Riptide.Utils.RiptideLogger.LogMethod,Riptide.Utils.RiptideLogger.LogMethod,System.Boolean,System.String)">
            <summary>Initializes <see cref="T:Riptide.Utils.RiptideLogger"/> with the supplied log methods.</summary>
            <param name="debugMethod">The method to use when logging debug messages. Set to <see langword="null"/> to disable debug logs.</param>
            <param name="infoMethod">The method to use when logging info messages. Set to <see langword="null"/> to disable info logs.</param>
            <param name="warningMethod">The method to use when logging warning messages. Set to <see langword="null"/> to disable warning logs.</param>
            <param name="errorMethod">The method to use when logging error messages. Set to <see langword="null"/> to disable error logs.</param>
            <param name="includeTimestamps">Whether or not to include timestamps when logging messages.</param>
            <param name="timestampFormat">The format to use for timestamps.</param>
        </member>
        <member name="M:Riptide.Utils.RiptideLogger.EnableLoggingFor(Riptide.Utils.LogType,Riptide.Utils.RiptideLogger.LogMethod)">
            <summary>Enables logging for messages of the given <see cref="T:Riptide.Utils.LogType"/>.</summary>
            <param name="logType">The type of message to enable logging for.</param>
            <param name="logMethod">The method to use when logging this type of message.</param>
        </member>
        <member name="M:Riptide.Utils.RiptideLogger.DisableLoggingFor(Riptide.Utils.LogType)">
            <summary>Disables logging for messages of the given <see cref="T:Riptide.Utils.LogType"/>.</summary>
            <param name="logType">The type of message to enable logging for.</param>
        </member>
        <member name="M:Riptide.Utils.RiptideLogger.Log(Riptide.Utils.LogType,System.String)">
            <summary>Logs a message.</summary>
            <param name="logType">The type of log message that is being logged.</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Riptide.Utils.RiptideLogger.Log(Riptide.Utils.LogType,System.String,System.String)">
            <summary>Logs a message.</summary>
            <param name="logType">The type of log message that is being logged.</param>
            <param name="logName">Who is logging this message.</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Riptide.Utils.RiptideLogger.GetTimestamp(System.DateTime)">
            <summary>Converts a <see cref="T:System.DateTime"/> object to a formatted timestamp string.</summary>
            <param name="time">The time to format.</param>
            <returns>The formatted timestamp.</returns>
        </member>
    </members>
</doc>
