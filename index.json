{
  "api/Riptide.Client.-ctor.html": {
    "href": "api/Riptide.Client.-ctor.html",
    "title": "Client Constructor | Riptide API Docs",
    "keywords": "Client Constructor Namespace: Riptide Assembly: RiptideNetworking.dll Overloads Client(IClient, string) Handles initial setup. Client(string) Handles initial setup using the built-in UDP transport. Client(IClient, string) Handles initial setup. public Client(IClient transport, string logName = \"CLIENT\") Parameters IClient transport The transport to use for sending and receiving data. string logName The name to use when logging messages via RiptideLogger. Client(string) Handles initial setup using the built-in UDP transport. public Client(string logName = \"CLIENT\") Parameters string logName The name to use when logging messages via RiptideLogger."
  },
  "api/Riptide.Client.ChangeTransport.html": {
    "href": "api/Riptide.Client.ChangeTransport.html",
    "title": "Client.ChangeTransport Method | Riptide API Docs",
    "keywords": "Client.ChangeTransport Method Namespace: Riptide Assembly: RiptideNetworking.dll ChangeTransport(IClient) Disconnects the client if it's connected and swaps out the transport it's using. public void ChangeTransport(IClient newTransport) Parameters IClient newTransport The new transport to use for sending and receiving data. Remarks This method does not automatically reconnect to the server. To continue communicating with the server, Connect(string, int, byte, Message, bool) must be called again."
  },
  "api/Riptide.Client.ClientConnected.html": {
    "href": "api/Riptide.Client.ClientConnected.html",
    "title": "Client.ClientConnected Event | Riptide API Docs",
    "keywords": "Client.ClientConnected Event Namespace: Riptide Assembly: RiptideNetworking.dll Invoked when another non-local client connects. public event EventHandler<ClientConnectedEventArgs> ClientConnected Returns EventHandler<ClientConnectedEventArgs>"
  },
  "api/Riptide.Client.ClientDisconnected.html": {
    "href": "api/Riptide.Client.ClientDisconnected.html",
    "title": "Client.ClientDisconnected Event | Riptide API Docs",
    "keywords": "Client.ClientDisconnected Event Namespace: Riptide Assembly: RiptideNetworking.dll Invoked when another non-local client disconnects. public event EventHandler<ClientDisconnectedEventArgs> ClientDisconnected Returns EventHandler<ClientDisconnectedEventArgs>"
  },
  "api/Riptide.Client.Connect.html": {
    "href": "api/Riptide.Client.Connect.html",
    "title": "Client.Connect Method | Riptide API Docs",
    "keywords": "Client.Connect Method Namespace: Riptide Assembly: RiptideNetworking.dll Connect(string, int, byte, Message, bool) Attempts to connect to a server at the given host address. public bool Connect(string hostAddress, int maxConnectionAttempts = 5, byte messageHandlerGroupId = 0, Message message = null, bool useMessageHandlers = true) Parameters string hostAddress The host address to connect to. int maxConnectionAttempts How many connection attempts to make before giving up. byte messageHandlerGroupId The ID of the group of message handler methods to use when building messageHandlers. Message message Data that should be sent to the server with the connection attempt. Use Create() to get an empty message instance. bool useMessageHandlers Whether or not the client should use the built-in message handler system. Returns bool true if a connection attempt will be made. false if an issue occurred (such as hostAddress being in an invalid format) and a connection attempt will not be made. Remarks Riptide's default transport expects the host address to consist of an IP and port, separated by a colon. For example: 127.0.0.1:7777. If you are using a different transport, check the relevant documentation for what information it requires in the host address. Setting useMessageHandlers to false will disable the automatic detection and execution of methods with the MessageHandlerAttribute, which is beneficial if you prefer to handle messages via the MessageReceived event."
  },
  "api/Riptide.Client.Connected.html": {
    "href": "api/Riptide.Client.Connected.html",
    "title": "Client.Connected Event | Riptide API Docs",
    "keywords": "Client.Connected Event Namespace: Riptide Assembly: RiptideNetworking.dll Invoked when a connection to the server is established. public event EventHandler Connected Returns EventHandler"
  },
  "api/Riptide.Client.Connection.html": {
    "href": "api/Riptide.Client.Connection.html",
    "title": "Client.Connection Property | Riptide API Docs",
    "keywords": "Client.Connection Property Namespace: Riptide Assembly: RiptideNetworking.dll Connection The client's connection to a server. public Connection Connection { get; } Property Value Connection"
  },
  "api/Riptide.Client.ConnectionFailed.html": {
    "href": "api/Riptide.Client.ConnectionFailed.html",
    "title": "Client.ConnectionFailed Event | Riptide API Docs",
    "keywords": "Client.ConnectionFailed Event Namespace: Riptide Assembly: RiptideNetworking.dll Invoked when a connection to the server fails to be established. public event EventHandler<ConnectionFailedEventArgs> ConnectionFailed Returns EventHandler<ConnectionFailedEventArgs>"
  },
  "api/Riptide.Client.CreateMessageHandlersDictionary.html": {
    "href": "api/Riptide.Client.CreateMessageHandlersDictionary.html",
    "title": "Client.CreateMessageHandlersDictionary Method | Riptide API Docs",
    "keywords": "Client.CreateMessageHandlersDictionary Method Namespace: Riptide Assembly: RiptideNetworking.dll CreateMessageHandlersDictionary(byte) Builds a dictionary of message IDs and their corresponding message handler methods. protected override void CreateMessageHandlersDictionary(byte messageHandlerGroupId) Parameters byte messageHandlerGroupId The ID of the group of message handler methods to include in the dictionary. Overrides Peer.CreateMessageHandlersDictionary(byte)"
  },
  "api/Riptide.Client.Disconnect.html": {
    "href": "api/Riptide.Client.Disconnect.html",
    "title": "Client.Disconnect Method | Riptide API Docs",
    "keywords": "Client.Disconnect Method Namespace: Riptide Assembly: RiptideNetworking.dll Disconnect() Disconnects from the server. public void Disconnect()"
  },
  "api/Riptide.Client.Disconnected.html": {
    "href": "api/Riptide.Client.Disconnected.html",
    "title": "Client.Disconnected Event | Riptide API Docs",
    "keywords": "Client.Disconnected Event Namespace: Riptide Assembly: RiptideNetworking.dll Invoked when disconnected from the server. public event EventHandler<DisconnectedEventArgs> Disconnected Returns EventHandler<DisconnectedEventArgs>"
  },
  "api/Riptide.Client.Handle.html": {
    "href": "api/Riptide.Client.Handle.html",
    "title": "Client.Handle Method | Riptide API Docs",
    "keywords": "Client.Handle Method Namespace: Riptide Assembly: RiptideNetworking.dll Handle(Message, MessageHeader, Connection) Handles a message. protected override void Handle(Message message, MessageHeader header, Connection connection) Parameters Message message The message to handle. MessageHeader header The message's header type. Connection connection The connection which the message was received on. Overrides Peer.Handle(Message, MessageHeader, Connection)"
  },
  "api/Riptide.Client.Id.html": {
    "href": "api/Riptide.Client.Id.html",
    "title": "Client.Id Property | Riptide API Docs",
    "keywords": "Client.Id Property Namespace: Riptide Assembly: RiptideNetworking.dll Id The client's numeric ID. public ushort Id { get; } Property Value ushort"
  },
  "api/Riptide.Client.IsConnected.html": {
    "href": "api/Riptide.Client.IsConnected.html",
    "title": "Client.IsConnected Property | Riptide API Docs",
    "keywords": "Client.IsConnected Property Namespace: Riptide Assembly: RiptideNetworking.dll IsConnected Whether or not the client is currently connected. public bool IsConnected { get; } Property Value bool"
  },
  "api/Riptide.Client.IsConnecting.html": {
    "href": "api/Riptide.Client.IsConnecting.html",
    "title": "Client.IsConnecting Property | Riptide API Docs",
    "keywords": "Client.IsConnecting Property Namespace: Riptide Assembly: RiptideNetworking.dll IsConnecting Whether or not the client is currently in the process of connecting. public bool IsConnecting { get; } Property Value bool"
  },
  "api/Riptide.Client.IsNotConnected.html": {
    "href": "api/Riptide.Client.IsNotConnected.html",
    "title": "Client.IsNotConnected Property | Riptide API Docs",
    "keywords": "Client.IsNotConnected Property Namespace: Riptide Assembly: RiptideNetworking.dll IsNotConnected Whether or not the client is currently not trying to connect, pending, nor actively connected. public bool IsNotConnected { get; } Property Value bool"
  },
  "api/Riptide.Client.IsPending.html": {
    "href": "api/Riptide.Client.IsPending.html",
    "title": "Client.IsPending Property | Riptide API Docs",
    "keywords": "Client.IsPending Property Namespace: Riptide Assembly: RiptideNetworking.dll IsPending Whether or not the client's connection is currently pending (waiting to be accepted/rejected by the server). public bool IsPending { get; } Property Value bool"
  },
  "api/Riptide.Client.MessageHandler.html": {
    "href": "api/Riptide.Client.MessageHandler.html",
    "title": "Client.MessageHandler Delegate | Riptide API Docs",
    "keywords": "Client.MessageHandler Delegate Namespace: Riptide Assembly: RiptideNetworking.dll Encapsulates a method that handles a message from a server. public delegate void Client.MessageHandler(Message message) Parameters Message message The message that was received."
  },
  "api/Riptide.Client.MessageReceived.html": {
    "href": "api/Riptide.Client.MessageReceived.html",
    "title": "Client.MessageReceived Event | Riptide API Docs",
    "keywords": "Client.MessageReceived Event Namespace: Riptide Assembly: RiptideNetworking.dll Invoked when a message is received. public event EventHandler<MessageReceivedEventArgs> MessageReceived Returns EventHandler<MessageReceivedEventArgs>"
  },
  "api/Riptide.Client.OnClientConnected.html": {
    "href": "api/Riptide.Client.OnClientConnected.html",
    "title": "Client.OnClientConnected Method | Riptide API Docs",
    "keywords": "Client.OnClientConnected Method Namespace: Riptide Assembly: RiptideNetworking.dll OnClientConnected(ushort) Invokes the ClientConnected event. protected virtual void OnClientConnected(ushort clientId) Parameters ushort clientId The numeric ID of the client that connected."
  },
  "api/Riptide.Client.OnClientDisconnected.html": {
    "href": "api/Riptide.Client.OnClientDisconnected.html",
    "title": "Client.OnClientDisconnected Method | Riptide API Docs",
    "keywords": "Client.OnClientDisconnected Method Namespace: Riptide Assembly: RiptideNetworking.dll OnClientDisconnected(ushort) Invokes the ClientDisconnected event. protected virtual void OnClientDisconnected(ushort clientId) Parameters ushort clientId The numeric ID of the client that disconnected."
  },
  "api/Riptide.Client.OnConnected.html": {
    "href": "api/Riptide.Client.OnConnected.html",
    "title": "Client.OnConnected Method | Riptide API Docs",
    "keywords": "Client.OnConnected Method Namespace: Riptide Assembly: RiptideNetworking.dll OnConnected() Invokes the Connected event. protected virtual void OnConnected()"
  },
  "api/Riptide.Client.OnConnectionFailed.html": {
    "href": "api/Riptide.Client.OnConnectionFailed.html",
    "title": "Client.OnConnectionFailed Method | Riptide API Docs",
    "keywords": "Client.OnConnectionFailed Method Namespace: Riptide Assembly: RiptideNetworking.dll OnConnectionFailed(RejectReason, Message) Invokes the ConnectionFailed event. protected virtual void OnConnectionFailed(RejectReason reason, Message message = null) Parameters RejectReason reason The reason for the connection failure. Message message Additional data related to the failed connection attempt."
  },
  "api/Riptide.Client.OnDisconnected.html": {
    "href": "api/Riptide.Client.OnDisconnected.html",
    "title": "Client.OnDisconnected Method | Riptide API Docs",
    "keywords": "Client.OnDisconnected Method Namespace: Riptide Assembly: RiptideNetworking.dll OnDisconnected(DisconnectReason, Message) Invokes the Disconnected event. protected virtual void OnDisconnected(DisconnectReason reason, Message message) Parameters DisconnectReason reason The reason for the disconnection. Message message Additional data related to the disconnection."
  },
  "api/Riptide.Client.OnMessageReceived.html": {
    "href": "api/Riptide.Client.OnMessageReceived.html",
    "title": "Client.OnMessageReceived Method | Riptide API Docs",
    "keywords": "Client.OnMessageReceived Method Namespace: Riptide Assembly: RiptideNetworking.dll OnMessageReceived(Message) Invokes the MessageReceived event and initiates handling of the received message. protected virtual void OnMessageReceived(Message message) Parameters Message message The received message."
  },
  "api/Riptide.Client.RTT.html": {
    "href": "api/Riptide.Client.RTT.html",
    "title": "Client.RTT Property | Riptide API Docs",
    "keywords": "Client.RTT Property Namespace: Riptide Assembly: RiptideNetworking.dll RTT The round trip time (ping) of the connection, in milliseconds. -1 if not calculated yet. public short RTT { get; } Property Value short"
  },
  "api/Riptide.Client.Send.html": {
    "href": "api/Riptide.Client.Send.html",
    "title": "Client.Send Method | Riptide API Docs",
    "keywords": "Client.Send Method Namespace: Riptide Assembly: RiptideNetworking.dll Send(Message, bool) Sends a message to the server. public ushort Send(Message message, bool shouldRelease = true) Parameters Message message The message to send. bool shouldRelease Whether or not to return the message to the pool after it is sent. Returns ushort For reliable and notify messages, the sequence ID that the message was sent with. 0 for unreliable messages. Remarks If you intend to continue using the message instance after calling this method, you must set shouldRelease to false. Release() can be used to manually return the message to the pool at a later time."
  },
  "api/Riptide.Client.SmoothRTT.html": {
    "href": "api/Riptide.Client.SmoothRTT.html",
    "title": "Client.SmoothRTT Property | Riptide API Docs",
    "keywords": "Client.SmoothRTT Property Namespace: Riptide Assembly: RiptideNetworking.dll SmoothRTT The smoothed round trip time (ping) of the connection, in milliseconds. -1 if not calculated yet. public short SmoothRTT { get; } Property Value short Remarks This value is slower to accurately represent lasting changes in latency than RTT, but it is less susceptible to changing drastically due to significant—but temporary—jumps in latency."
  },
  "api/Riptide.Client.TimeoutTime.html": {
    "href": "api/Riptide.Client.TimeoutTime.html",
    "title": "Client.TimeoutTime Property | Riptide API Docs",
    "keywords": "Client.TimeoutTime Property Namespace: Riptide Assembly: RiptideNetworking.dll TimeoutTime Sets the client's TimeoutTime. public override int TimeoutTime { set; } Property Value int Overrides Peer.TimeoutTime"
  },
  "api/Riptide.Client.Update.html": {
    "href": "api/Riptide.Client.Update.html",
    "title": "Client.Update Method | Riptide API Docs",
    "keywords": "Client.Update Method Namespace: Riptide Assembly: RiptideNetworking.dll Update() Handles any received messages and invokes any delayed events which need to be invoked. public override void Update() Overrides Peer.Update()"
  },
  "api/Riptide.Client.html": {
    "href": "api/Riptide.Client.html",
    "title": "Client Class | Riptide API Docs",
    "keywords": "Client Class Namespace: Riptide Assembly: RiptideNetworking.dll A client that can connect to a Server. public class Client : Peer Inheritance object Peer Client Inherited Members Peer.LogName Peer.HeartbeatInterval Peer.useMessageHandlers Peer.defaultTimeout Peer.FindMessageHandlers() Peer.StartTime() Peer.StopTime() Peer.HandleMessages() Peer.HandleData(object, DataReceivedEventArgs) Peer.IncreaseActiveCount() Peer.DecreaseActiveCount() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Client(IClient, string) Handles initial setup. Client(string) Handles initial setup using the built-in UDP transport. Properties Connection The client's connection to a server. Id The client's numeric ID. IsConnected Whether or not the client is currently connected. IsConnecting Whether or not the client is currently in the process of connecting. IsNotConnected Whether or not the client is currently not trying to connect, pending, nor actively connected. IsPending Whether or not the client's connection is currently pending (waiting to be accepted/rejected by the server). RTT The round trip time (ping) of the connection, in milliseconds. -1 if not calculated yet. SmoothRTT The smoothed round trip time (ping) of the connection, in milliseconds. -1 if not calculated yet. TimeoutTime Sets the client's TimeoutTime. Methods ChangeTransport(IClient) Disconnects the client if it's connected and swaps out the transport it's using. Connect(string, int, byte, Message, bool) Attempts to connect to a server at the given host address. CreateMessageHandlersDictionary(byte) Builds a dictionary of message IDs and their corresponding message handler methods. Disconnect() Disconnects from the server. Handle(Message, MessageHeader, Connection) Handles a message. OnClientConnected(ushort) Invokes the ClientConnected event. OnClientDisconnected(ushort) Invokes the ClientDisconnected event. OnConnected() Invokes the Connected event. OnConnectionFailed(RejectReason, Message) Invokes the ConnectionFailed event. OnDisconnected(DisconnectReason, Message) Invokes the Disconnected event. OnMessageReceived(Message) Invokes the MessageReceived event and initiates handling of the received message. Send(Message, bool) Sends a message to the server. Update() Handles any received messages and invokes any delayed events which need to be invoked. Events ClientConnected Invoked when another non-local client connects. ClientDisconnected Invoked when another non-local client disconnects. Connected Invoked when a connection to the server is established. ConnectionFailed Invoked when a connection to the server fails to be established. Disconnected Invoked when disconnected from the server. MessageReceived Invoked when a message is received."
  },
  "api/Riptide.ClientConnectedEventArgs.-ctor.html": {
    "href": "api/Riptide.ClientConnectedEventArgs.-ctor.html",
    "title": "ClientConnectedEventArgs Constructor | Riptide API Docs",
    "keywords": "ClientConnectedEventArgs Constructor Namespace: Riptide Assembly: RiptideNetworking.dll ClientConnectedEventArgs(ushort) Initializes event data. public ClientConnectedEventArgs(ushort id) Parameters ushort id The numeric ID of the client that connected."
  },
  "api/Riptide.ClientConnectedEventArgs.Id.html": {
    "href": "api/Riptide.ClientConnectedEventArgs.Id.html",
    "title": "ClientConnectedEventArgs.Id Field | Riptide API Docs",
    "keywords": "ClientConnectedEventArgs.Id Field Namespace: Riptide Assembly: RiptideNetworking.dll The numeric ID of the client that connected. public readonly ushort Id Returns ushort"
  },
  "api/Riptide.ClientConnectedEventArgs.html": {
    "href": "api/Riptide.ClientConnectedEventArgs.html",
    "title": "ClientConnectedEventArgs Class | Riptide API Docs",
    "keywords": "ClientConnectedEventArgs Class Namespace: Riptide Assembly: RiptideNetworking.dll Contains event data for when a non-local client connects to the server. public class ClientConnectedEventArgs : EventArgs Inheritance object EventArgs ClientConnectedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ClientConnectedEventArgs(ushort) Initializes event data. Fields Id The numeric ID of the client that connected."
  },
  "api/Riptide.ClientDisconnectedEventArgs.-ctor.html": {
    "href": "api/Riptide.ClientDisconnectedEventArgs.-ctor.html",
    "title": "ClientDisconnectedEventArgs Constructor | Riptide API Docs",
    "keywords": "ClientDisconnectedEventArgs Constructor Namespace: Riptide Assembly: RiptideNetworking.dll ClientDisconnectedEventArgs(ushort) Initializes event data. public ClientDisconnectedEventArgs(ushort id) Parameters ushort id The numeric ID of the client that disconnected."
  },
  "api/Riptide.ClientDisconnectedEventArgs.Id.html": {
    "href": "api/Riptide.ClientDisconnectedEventArgs.Id.html",
    "title": "ClientDisconnectedEventArgs.Id Field | Riptide API Docs",
    "keywords": "ClientDisconnectedEventArgs.Id Field Namespace: Riptide Assembly: RiptideNetworking.dll The numeric ID of the client that disconnected. public readonly ushort Id Returns ushort"
  },
  "api/Riptide.ClientDisconnectedEventArgs.html": {
    "href": "api/Riptide.ClientDisconnectedEventArgs.html",
    "title": "ClientDisconnectedEventArgs Class | Riptide API Docs",
    "keywords": "ClientDisconnectedEventArgs Class Namespace: Riptide Assembly: RiptideNetworking.dll Contains event data for when a non-local client disconnects from the server. public class ClientDisconnectedEventArgs : EventArgs Inheritance object EventArgs ClientDisconnectedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ClientDisconnectedEventArgs(ushort) Initializes event data. Fields Id The numeric ID of the client that disconnected."
  },
  "api/Riptide.Connection.-ctor.html": {
    "href": "api/Riptide.Connection.-ctor.html",
    "title": "Connection Constructor | Riptide API Docs",
    "keywords": "Connection Constructor Namespace: Riptide Assembly: RiptideNetworking.dll Connection() Initializes the connection. protected Connection()"
  },
  "api/Riptide.Connection.AvgSendAttemptsResilience.html": {
    "href": "api/Riptide.Connection.AvgSendAttemptsResilience.html",
    "title": "Connection.AvgSendAttemptsResilience Field | Riptide API Docs",
    "keywords": "Connection.AvgSendAttemptsResilience Field Namespace: Riptide Assembly: RiptideNetworking.dll How many consecutive times MaxAvgSendAttempts can be exceeded before triggering a disconnect. public int AvgSendAttemptsResilience Returns int"
  },
  "api/Riptide.Connection.CanQualityDisconnect.html": {
    "href": "api/Riptide.Connection.CanQualityDisconnect.html",
    "title": "Connection.CanQualityDisconnect Field | Riptide API Docs",
    "keywords": "Connection.CanQualityDisconnect Field Namespace: Riptide Assembly: RiptideNetworking.dll Whether or not the connection can disconnect due to poor connection quality. public bool CanQualityDisconnect Returns bool Remarks When this is set to false, MaxAvgSendAttempts, MaxSendAttempts, and MaxNotifyLoss are ignored and exceeding their values will not trigger a disconnection."
  },
  "api/Riptide.Connection.CanTimeout.html": {
    "href": "api/Riptide.Connection.CanTimeout.html",
    "title": "Connection.CanTimeout Property | Riptide API Docs",
    "keywords": "Connection.CanTimeout Property Namespace: Riptide Assembly: RiptideNetworking.dll CanTimeout Whether or not the connection can time out. public bool CanTimeout { get; set; } Property Value bool"
  },
  "api/Riptide.Connection.Id.html": {
    "href": "api/Riptide.Connection.Id.html",
    "title": "Connection.Id Property | Riptide API Docs",
    "keywords": "Connection.Id Property Namespace: Riptide Assembly: RiptideNetworking.dll Id The connection's numeric ID. public ushort Id { get; } Property Value ushort"
  },
  "api/Riptide.Connection.IsConnected.html": {
    "href": "api/Riptide.Connection.IsConnected.html",
    "title": "Connection.IsConnected Property | Riptide API Docs",
    "keywords": "Connection.IsConnected Property Namespace: Riptide Assembly: RiptideNetworking.dll IsConnected Whether or not the connection is currently connected. public bool IsConnected { get; } Property Value bool"
  },
  "api/Riptide.Connection.IsConnecting.html": {
    "href": "api/Riptide.Connection.IsConnecting.html",
    "title": "Connection.IsConnecting Property | Riptide API Docs",
    "keywords": "Connection.IsConnecting Property Namespace: Riptide Assembly: RiptideNetworking.dll IsConnecting Whether or not the connection is currently in the process of connecting. public bool IsConnecting { get; } Property Value bool"
  },
  "api/Riptide.Connection.IsNotConnected.html": {
    "href": "api/Riptide.Connection.IsNotConnected.html",
    "title": "Connection.IsNotConnected Property | Riptide API Docs",
    "keywords": "Connection.IsNotConnected Property Namespace: Riptide Assembly: RiptideNetworking.dll IsNotConnected Whether or not the connection is currently not trying to connect, pending, nor actively connected. public bool IsNotConnected { get; } Property Value bool"
  },
  "api/Riptide.Connection.IsPending.html": {
    "href": "api/Riptide.Connection.IsPending.html",
    "title": "Connection.IsPending Property | Riptide API Docs",
    "keywords": "Connection.IsPending Property Namespace: Riptide Assembly: RiptideNetworking.dll IsPending Whether or not the connection is currently pending (waiting to be accepted/rejected by the server). public bool IsPending { get; } Property Value bool"
  },
  "api/Riptide.Connection.MaxAvgSendAttempts.html": {
    "href": "api/Riptide.Connection.MaxAvgSendAttempts.html",
    "title": "Connection.MaxAvgSendAttempts Field | Riptide API Docs",
    "keywords": "Connection.MaxAvgSendAttempts Field Namespace: Riptide Assembly: RiptideNetworking.dll The maximum acceptable average number of send attempts it takes to deliver a reliable message. The connection will be closed if this is exceeded more than AvgSendAttemptsResilience times in a row. public int MaxAvgSendAttempts Returns int"
  },
  "api/Riptide.Connection.MaxNotifyLoss.html": {
    "href": "api/Riptide.Connection.MaxNotifyLoss.html",
    "title": "Connection.MaxNotifyLoss Field | Riptide API Docs",
    "keywords": "Connection.MaxNotifyLoss Field Namespace: Riptide Assembly: RiptideNetworking.dll The maximum acceptable loss rate of notify messages. The connection will be closed if this is exceeded more than NotifyLossResilience times in a row. public float MaxNotifyLoss Returns float"
  },
  "api/Riptide.Connection.MaxSendAttempts.html": {
    "href": "api/Riptide.Connection.MaxSendAttempts.html",
    "title": "Connection.MaxSendAttempts Field | Riptide API Docs",
    "keywords": "Connection.MaxSendAttempts Field Namespace: Riptide Assembly: RiptideNetworking.dll The absolute maximum number of times a reliable message may be sent. A single message reaching this threshold will cause a disconnection. public int MaxSendAttempts Returns int"
  },
  "api/Riptide.Connection.Metrics.html": {
    "href": "api/Riptide.Connection.Metrics.html",
    "title": "Connection.Metrics Field | Riptide API Docs",
    "keywords": "Connection.Metrics Field Namespace: Riptide Assembly: RiptideNetworking.dll The connection's metrics. public readonly ConnectionMetrics Metrics Returns ConnectionMetrics"
  },
  "api/Riptide.Connection.NotifyDelivered.html": {
    "href": "api/Riptide.Connection.NotifyDelivered.html",
    "title": "Connection.NotifyDelivered Field | Riptide API Docs",
    "keywords": "Connection.NotifyDelivered Field Namespace: Riptide Assembly: RiptideNetworking.dll Invoked when the notify message with the given sequence ID is successfully delivered. public Action<ushort> NotifyDelivered Returns Action<ushort>"
  },
  "api/Riptide.Connection.NotifyLossResilience.html": {
    "href": "api/Riptide.Connection.NotifyLossResilience.html",
    "title": "Connection.NotifyLossResilience Field | Riptide API Docs",
    "keywords": "Connection.NotifyLossResilience Field Namespace: Riptide Assembly: RiptideNetworking.dll How many consecutive times MaxNotifyLoss can be exceeded before triggering a disconnect. public int NotifyLossResilience Returns int"
  },
  "api/Riptide.Connection.NotifyLost.html": {
    "href": "api/Riptide.Connection.NotifyLost.html",
    "title": "Connection.NotifyLost Field | Riptide API Docs",
    "keywords": "Connection.NotifyLost Field Namespace: Riptide Assembly: RiptideNetworking.dll Invoked when the notify message with the given sequence ID is lost. public Action<ushort> NotifyLost Returns Action<ushort>"
  },
  "api/Riptide.Connection.NotifyReceived.html": {
    "href": "api/Riptide.Connection.NotifyReceived.html",
    "title": "Connection.NotifyReceived Field | Riptide API Docs",
    "keywords": "Connection.NotifyReceived Field Namespace: Riptide Assembly: RiptideNetworking.dll Invoked when a notify message is received. public Action<Message> NotifyReceived Returns Action<Message>"
  },
  "api/Riptide.Connection.OnNotifyDelivered.html": {
    "href": "api/Riptide.Connection.OnNotifyDelivered.html",
    "title": "Connection.OnNotifyDelivered Method | Riptide API Docs",
    "keywords": "Connection.OnNotifyDelivered Method Namespace: Riptide Assembly: RiptideNetworking.dll OnNotifyDelivered(ushort) Invokes the NotifyDelivered event. protected virtual void OnNotifyDelivered(ushort sequenceId) Parameters ushort sequenceId The sequence ID of the delivered message."
  },
  "api/Riptide.Connection.OnNotifyLost.html": {
    "href": "api/Riptide.Connection.OnNotifyLost.html",
    "title": "Connection.OnNotifyLost Method | Riptide API Docs",
    "keywords": "Connection.OnNotifyLost Method Namespace: Riptide Assembly: RiptideNetworking.dll OnNotifyLost(ushort) Invokes the NotifyLost event. protected virtual void OnNotifyLost(ushort sequenceId) Parameters ushort sequenceId The sequence ID of the lost message."
  },
  "api/Riptide.Connection.RTT.html": {
    "href": "api/Riptide.Connection.RTT.html",
    "title": "Connection.RTT Property | Riptide API Docs",
    "keywords": "Connection.RTT Property Namespace: Riptide Assembly: RiptideNetworking.dll RTT The round trip time (ping) of the connection, in milliseconds. -1 if not calculated yet. public short RTT { get; } Property Value short"
  },
  "api/Riptide.Connection.ReliableDelivered.html": {
    "href": "api/Riptide.Connection.ReliableDelivered.html",
    "title": "Connection.ReliableDelivered Field | Riptide API Docs",
    "keywords": "Connection.ReliableDelivered Field Namespace: Riptide Assembly: RiptideNetworking.dll Invoked when the reliable message with the given sequence ID is successfully delivered. public Action<ushort> ReliableDelivered Returns Action<ushort>"
  },
  "api/Riptide.Connection.ResetTimeout.html": {
    "href": "api/Riptide.Connection.ResetTimeout.html",
    "title": "Connection.ResetTimeout Method | Riptide API Docs",
    "keywords": "Connection.ResetTimeout Method Namespace: Riptide Assembly: RiptideNetworking.dll ResetTimeout() Resets the connection's timeout time. public void ResetTimeout()"
  },
  "api/Riptide.Connection.Send.html": {
    "href": "api/Riptide.Connection.Send.html",
    "title": "Connection.Send Method | Riptide API Docs",
    "keywords": "Connection.Send Method Namespace: Riptide Assembly: RiptideNetworking.dll Overloads Send(Message, bool) Sends a message. Send(byte[], int) Sends data. Send(Message, bool) Sends a message. public ushort Send(Message message, bool shouldRelease = true) Parameters Message message The message to send. bool shouldRelease Whether or not to return the message to the pool after it is sent. Returns ushort For reliable and notify messages, the sequence ID that the message was sent with. 0 for unreliable messages. Remarks If you intend to continue using the message instance after calling this method, you must set shouldRelease to false. Release() can be used to manually return the message to the pool at a later time. Send(byte[], int) Sends data. protected abstract void Send(byte[] dataBuffer, int amount) Parameters byte[] dataBuffer The array containing the data. int amount The number of bytes in the array which should be sent."
  },
  "api/Riptide.Connection.SmoothRTT.html": {
    "href": "api/Riptide.Connection.SmoothRTT.html",
    "title": "Connection.SmoothRTT Property | Riptide API Docs",
    "keywords": "Connection.SmoothRTT Property Namespace: Riptide Assembly: RiptideNetworking.dll SmoothRTT The smoothed round trip time (ping) of the connection, in milliseconds. -1 if not calculated yet. public short SmoothRTT { get; } Property Value short Remarks This value is slower to accurately represent lasting changes in latency than RTT, but it is less susceptible to changing drastically due to significant—but temporary—jumps in latency."
  },
  "api/Riptide.Connection.TimeoutTime.html": {
    "href": "api/Riptide.Connection.TimeoutTime.html",
    "title": "Connection.TimeoutTime Property | Riptide API Docs",
    "keywords": "Connection.TimeoutTime Property Namespace: Riptide Assembly: RiptideNetworking.dll TimeoutTime The time (in milliseconds) after which to disconnect if no heartbeats are received. public int TimeoutTime { get; set; } Property Value int"
  },
  "api/Riptide.Connection.html": {
    "href": "api/Riptide.Connection.html",
    "title": "Connection Class | Riptide API Docs",
    "keywords": "Connection Class Namespace: Riptide Assembly: RiptideNetworking.dll Represents a connection to a Server or Client. public abstract class Connection Inheritance object Connection TcpConnection UdpConnection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Connection() Initializes the connection. Fields AvgSendAttemptsResilience How many consecutive times MaxAvgSendAttempts can be exceeded before triggering a disconnect. CanQualityDisconnect Whether or not the connection can disconnect due to poor connection quality. MaxAvgSendAttempts The maximum acceptable average number of send attempts it takes to deliver a reliable message. The connection will be closed if this is exceeded more than AvgSendAttemptsResilience times in a row. MaxNotifyLoss The maximum acceptable loss rate of notify messages. The connection will be closed if this is exceeded more than NotifyLossResilience times in a row. MaxSendAttempts The absolute maximum number of times a reliable message may be sent. A single message reaching this threshold will cause a disconnection. Metrics The connection's metrics. NotifyDelivered Invoked when the notify message with the given sequence ID is successfully delivered. NotifyLossResilience How many consecutive times MaxNotifyLoss can be exceeded before triggering a disconnect. NotifyLost Invoked when the notify message with the given sequence ID is lost. NotifyReceived Invoked when a notify message is received. ReliableDelivered Invoked when the reliable message with the given sequence ID is successfully delivered. Properties CanTimeout Whether or not the connection can time out. Id The connection's numeric ID. IsConnected Whether or not the connection is currently connected. IsConnecting Whether or not the connection is currently in the process of connecting. IsNotConnected Whether or not the connection is currently not trying to connect, pending, nor actively connected. IsPending Whether or not the connection is currently pending (waiting to be accepted/rejected by the server). RTT The round trip time (ping) of the connection, in milliseconds. -1 if not calculated yet. SmoothRTT The smoothed round trip time (ping) of the connection, in milliseconds. -1 if not calculated yet. TimeoutTime The time (in milliseconds) after which to disconnect if no heartbeats are received. Methods OnNotifyDelivered(ushort) Invokes the NotifyDelivered event. OnNotifyLost(ushort) Invokes the NotifyLost event. ResetTimeout() Resets the connection's timeout time. Send(Message, bool) Sends a message. Send(byte[], int) Sends data."
  },
  "api/Riptide.ConnectionFailedEventArgs.-ctor.html": {
    "href": "api/Riptide.ConnectionFailedEventArgs.-ctor.html",
    "title": "ConnectionFailedEventArgs Constructor | Riptide API Docs",
    "keywords": "ConnectionFailedEventArgs Constructor Namespace: Riptide Assembly: RiptideNetworking.dll ConnectionFailedEventArgs(RejectReason, Message) Initializes event data. public ConnectionFailedEventArgs(RejectReason reason, Message message) Parameters RejectReason reason The reason for the connection failure. Message message Additional data related to the failed connection attempt (if any)."
  },
  "api/Riptide.ConnectionFailedEventArgs.Message.html": {
    "href": "api/Riptide.ConnectionFailedEventArgs.Message.html",
    "title": "ConnectionFailedEventArgs.Message Field | Riptide API Docs",
    "keywords": "ConnectionFailedEventArgs.Message Field Namespace: Riptide Assembly: RiptideNetworking.dll Additional data related to the failed connection attempt (if any). public readonly Message Message Returns Message"
  },
  "api/Riptide.ConnectionFailedEventArgs.Reason.html": {
    "href": "api/Riptide.ConnectionFailedEventArgs.Reason.html",
    "title": "ConnectionFailedEventArgs.Reason Field | Riptide API Docs",
    "keywords": "ConnectionFailedEventArgs.Reason Field Namespace: Riptide Assembly: RiptideNetworking.dll The reason for the connection failure. public readonly RejectReason Reason Returns RejectReason"
  },
  "api/Riptide.ConnectionFailedEventArgs.html": {
    "href": "api/Riptide.ConnectionFailedEventArgs.html",
    "title": "ConnectionFailedEventArgs Class | Riptide API Docs",
    "keywords": "ConnectionFailedEventArgs Class Namespace: Riptide Assembly: RiptideNetworking.dll Contains event data for when a connection attempt to a server fails. public class ConnectionFailedEventArgs : EventArgs Inheritance object EventArgs ConnectionFailedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ConnectionFailedEventArgs(RejectReason, Message) Initializes event data. Fields Message Additional data related to the failed connection attempt (if any). Reason The reason for the connection failure."
  },
  "api/Riptide.DisconnectReason.html": {
    "href": "api/Riptide.DisconnectReason.html",
    "title": "DisconnectReason Enum | Riptide API Docs",
    "keywords": "DisconnectReason Enum Namespace: Riptide Assembly: RiptideNetworking.dll The reason for a disconnection. public enum DisconnectReason : byte Fields NeverConnected No connection was ever established. ConnectionRejected The connection attempt was rejected by the server. TransportError The active transport detected a problem with the connection. TimedOut The connection timed out. Kicked The client was forcibly disconnected by the server. ServerStopped The server shut down. Disconnected The disconnection was initiated by the client. PoorConnection The connection's loss and/or resend rates exceeded the maximum acceptable thresholds, or a reliably sent message could not be delivered."
  },
  "api/Riptide.DisconnectedEventArgs.-ctor.html": {
    "href": "api/Riptide.DisconnectedEventArgs.-ctor.html",
    "title": "DisconnectedEventArgs Constructor | Riptide API Docs",
    "keywords": "DisconnectedEventArgs Constructor Namespace: Riptide Assembly: RiptideNetworking.dll DisconnectedEventArgs(DisconnectReason, Message) Initializes event data. public DisconnectedEventArgs(DisconnectReason reason, Message message) Parameters DisconnectReason reason The reason for the disconnection. Message message Additional data related to the disconnection (if any)."
  },
  "api/Riptide.DisconnectedEventArgs.Message.html": {
    "href": "api/Riptide.DisconnectedEventArgs.Message.html",
    "title": "DisconnectedEventArgs.Message Field | Riptide API Docs",
    "keywords": "DisconnectedEventArgs.Message Field Namespace: Riptide Assembly: RiptideNetworking.dll Additional data related to the disconnection (if any). public readonly Message Message Returns Message"
  },
  "api/Riptide.DisconnectedEventArgs.Reason.html": {
    "href": "api/Riptide.DisconnectedEventArgs.Reason.html",
    "title": "DisconnectedEventArgs.Reason Field | Riptide API Docs",
    "keywords": "DisconnectedEventArgs.Reason Field Namespace: Riptide Assembly: RiptideNetworking.dll The reason for the disconnection. public readonly DisconnectReason Reason Returns DisconnectReason"
  },
  "api/Riptide.DisconnectedEventArgs.html": {
    "href": "api/Riptide.DisconnectedEventArgs.html",
    "title": "DisconnectedEventArgs Class | Riptide API Docs",
    "keywords": "DisconnectedEventArgs Class Namespace: Riptide Assembly: RiptideNetworking.dll Contains event data for when the client disconnects from a server. public class DisconnectedEventArgs : EventArgs Inheritance object EventArgs DisconnectedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DisconnectedEventArgs(DisconnectReason, Message) Initializes event data. Fields Message Additional data related to the disconnection (if any). Reason The reason for the disconnection."
  },
  "api/Riptide.DuplicateHandlerException.-ctor.html": {
    "href": "api/Riptide.DuplicateHandlerException.-ctor.html",
    "title": "DuplicateHandlerException Constructor | Riptide API Docs",
    "keywords": "DuplicateHandlerException Constructor Namespace: Riptide Assembly: RiptideNetworking.dll Overloads DuplicateHandlerException() Initializes a new DuplicateHandlerException instance with a specified error message. DuplicateHandlerException(string) Initializes a new DuplicateHandlerException instance with a specified error message. DuplicateHandlerException(string, Exception) Initializes a new DuplicateHandlerException instance with a specified error message and a reference to the inner exception that is the cause of this exception. DuplicateHandlerException(ushort, MethodInfo, MethodInfo) Initializes a new DuplicateHandlerException instance and constructs an error message from the given information. DuplicateHandlerException() Initializes a new DuplicateHandlerException instance with a specified error message. public DuplicateHandlerException() DuplicateHandlerException(string) Initializes a new DuplicateHandlerException instance with a specified error message. public DuplicateHandlerException(string message) Parameters string message The error message that explains the reason for the exception. DuplicateHandlerException(string, Exception) Initializes a new DuplicateHandlerException instance with a specified error message and a reference to the inner exception that is the cause of this exception. public DuplicateHandlerException(string message, Exception inner) Parameters string message The error message that explains the reason for the exception. Exception inner The exception that is the cause of the current exception. If inner is not a null reference, the current exception is raised in a catch block that handles the inner exception. DuplicateHandlerException(ushort, MethodInfo, MethodInfo) Initializes a new DuplicateHandlerException instance and constructs an error message from the given information. public DuplicateHandlerException(ushort id, MethodInfo method1, MethodInfo method2) Parameters ushort id The message ID with multiple handler methods. MethodInfo method1 The first handler method's info. MethodInfo method2 The second handler method's info."
  },
  "api/Riptide.DuplicateHandlerException.DeclaringType1.html": {
    "href": "api/Riptide.DuplicateHandlerException.DeclaringType1.html",
    "title": "DuplicateHandlerException.DeclaringType1 Field | Riptide API Docs",
    "keywords": "DuplicateHandlerException.DeclaringType1 Field Namespace: Riptide Assembly: RiptideNetworking.dll The type containing the first handler method. public readonly Type DeclaringType1 Returns Type"
  },
  "api/Riptide.DuplicateHandlerException.DeclaringType2.html": {
    "href": "api/Riptide.DuplicateHandlerException.DeclaringType2.html",
    "title": "DuplicateHandlerException.DeclaringType2 Field | Riptide API Docs",
    "keywords": "DuplicateHandlerException.DeclaringType2 Field Namespace: Riptide Assembly: RiptideNetworking.dll The type containing the second handler method. public readonly Type DeclaringType2 Returns Type"
  },
  "api/Riptide.DuplicateHandlerException.HandlerMethodName1.html": {
    "href": "api/Riptide.DuplicateHandlerException.HandlerMethodName1.html",
    "title": "DuplicateHandlerException.HandlerMethodName1 Field | Riptide API Docs",
    "keywords": "DuplicateHandlerException.HandlerMethodName1 Field Namespace: Riptide Assembly: RiptideNetworking.dll The name of the first handler method. public readonly string HandlerMethodName1 Returns string"
  },
  "api/Riptide.DuplicateHandlerException.HandlerMethodName2.html": {
    "href": "api/Riptide.DuplicateHandlerException.HandlerMethodName2.html",
    "title": "DuplicateHandlerException.HandlerMethodName2 Field | Riptide API Docs",
    "keywords": "DuplicateHandlerException.HandlerMethodName2 Field Namespace: Riptide Assembly: RiptideNetworking.dll The name of the second handler method. public readonly string HandlerMethodName2 Returns string"
  },
  "api/Riptide.DuplicateHandlerException.Id.html": {
    "href": "api/Riptide.DuplicateHandlerException.Id.html",
    "title": "DuplicateHandlerException.Id Field | Riptide API Docs",
    "keywords": "DuplicateHandlerException.Id Field Namespace: Riptide Assembly: RiptideNetworking.dll The message ID with multiple handler methods. public readonly ushort Id Returns ushort"
  },
  "api/Riptide.DuplicateHandlerException.html": {
    "href": "api/Riptide.DuplicateHandlerException.html",
    "title": "DuplicateHandlerException Class | Riptide API Docs",
    "keywords": "DuplicateHandlerException Class Namespace: Riptide Assembly: RiptideNetworking.dll The exception that is thrown when multiple methods with MessageHandlerAttributes are set to handle messages with the same ID and have the same method signature. public class DuplicateHandlerException : Exception, ISerializable Inheritance object Exception DuplicateHandlerException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors DuplicateHandlerException() Initializes a new DuplicateHandlerException instance with a specified error message. DuplicateHandlerException(string) Initializes a new DuplicateHandlerException instance with a specified error message. DuplicateHandlerException(string, Exception) Initializes a new DuplicateHandlerException instance with a specified error message and a reference to the inner exception that is the cause of this exception. DuplicateHandlerException(ushort, MethodInfo, MethodInfo) Initializes a new DuplicateHandlerException instance and constructs an error message from the given information. Fields DeclaringType1 The type containing the first handler method. DeclaringType2 The type containing the second handler method. HandlerMethodName1 The name of the first handler method. HandlerMethodName2 The name of the second handler method. Id The message ID with multiple handler methods."
  },
  "api/Riptide.IMessageSerializable.Deserialize.html": {
    "href": "api/Riptide.IMessageSerializable.Deserialize.html",
    "title": "IMessageSerializable.Deserialize Method | Riptide API Docs",
    "keywords": "IMessageSerializable.Deserialize Method Namespace: Riptide Assembly: RiptideNetworking.dll Deserialize(Message) Retrieves the type from the message. void Deserialize(Message message) Parameters Message message The message to retrieve the type from."
  },
  "api/Riptide.IMessageSerializable.Serialize.html": {
    "href": "api/Riptide.IMessageSerializable.Serialize.html",
    "title": "IMessageSerializable.Serialize Method | Riptide API Docs",
    "keywords": "IMessageSerializable.Serialize Method Namespace: Riptide Assembly: RiptideNetworking.dll Serialize(Message) Adds the type to the message. void Serialize(Message message) Parameters Message message The message to add the type to."
  },
  "api/Riptide.IMessageSerializable.html": {
    "href": "api/Riptide.IMessageSerializable.html",
    "title": "IMessageSerializable Interface | Riptide API Docs",
    "keywords": "IMessageSerializable Interface Namespace: Riptide Assembly: RiptideNetworking.dll Represents a type that can be added to and retrieved from messages using the AddSerializable<T>(T) and GetSerializable<T>() methods. public interface IMessageSerializable Methods Deserialize(Message) Retrieves the type from the message. Serialize(Message) Adds the type to the message."
  },
  "api/Riptide.InsufficientCapacityException.-ctor.html": {
    "href": "api/Riptide.InsufficientCapacityException.-ctor.html",
    "title": "InsufficientCapacityException Constructor | Riptide API Docs",
    "keywords": "InsufficientCapacityException Constructor Namespace: Riptide Assembly: RiptideNetworking.dll Overloads InsufficientCapacityException() Initializes a new InsufficientCapacityException instance. InsufficientCapacityException(string) Initializes a new InsufficientCapacityException instance with a specified error message. InsufficientCapacityException(string, Exception) Initializes a new InsufficientCapacityException instance with a specified error message and a reference to the inner exception that is the cause of this exception. InsufficientCapacityException(Message, int) Initializes a new InsufficientCapacityException instance and constructs an error message from the given information. InsufficientCapacityException(Message, string, int) Initializes a new InsufficientCapacityException instance and constructs an error message from the given information. InsufficientCapacityException(Message, int, string, int) Initializes a new InsufficientCapacityException instance and constructs an error message from the given information. InsufficientCapacityException() Initializes a new InsufficientCapacityException instance. public InsufficientCapacityException() InsufficientCapacityException(string) Initializes a new InsufficientCapacityException instance with a specified error message. public InsufficientCapacityException(string message) Parameters string message The error message that explains the reason for the exception. InsufficientCapacityException(string, Exception) Initializes a new InsufficientCapacityException instance with a specified error message and a reference to the inner exception that is the cause of this exception. public InsufficientCapacityException(string message, Exception inner) Parameters string message The error message that explains the reason for the exception. Exception inner The exception that is the cause of the current exception. If inner is not a null reference, the current exception is raised in a catch block that handles the inner exception. InsufficientCapacityException(Message, int) Initializes a new InsufficientCapacityException instance and constructs an error message from the given information. public InsufficientCapacityException(Message message, int reserveBits) Parameters Message message The message with insufficient remaining capacity. int reserveBits The number of bits which were attempted to be reserved. InsufficientCapacityException(Message, string, int) Initializes a new InsufficientCapacityException instance and constructs an error message from the given information. public InsufficientCapacityException(Message message, string typeName, int requiredBits) Parameters Message message The message with insufficient remaining capacity. string typeName The name of the type which could not be added to the message. int requiredBits The number of available bits required for the type to be added successfully. InsufficientCapacityException(Message, int, string, int) Initializes a new InsufficientCapacityException instance and constructs an error message from the given information. public InsufficientCapacityException(Message message, int arrayLength, string typeName, int requiredBits) Parameters Message message The message with insufficient remaining capacity. int arrayLength The length of the array which could not be added to the message. string typeName The name of the array's type. int requiredBits The number of available bits required for a single element of the array to be added successfully."
  },
  "api/Riptide.InsufficientCapacityException.RequiredBits.html": {
    "href": "api/Riptide.InsufficientCapacityException.RequiredBits.html",
    "title": "InsufficientCapacityException.RequiredBits Field | Riptide API Docs",
    "keywords": "InsufficientCapacityException.RequiredBits Field Namespace: Riptide Assembly: RiptideNetworking.dll The number of available bits the type requires in order to be added successfully. public readonly int RequiredBits Returns int"
  },
  "api/Riptide.InsufficientCapacityException.RiptideMessage.html": {
    "href": "api/Riptide.InsufficientCapacityException.RiptideMessage.html",
    "title": "InsufficientCapacityException.RiptideMessage Field | Riptide API Docs",
    "keywords": "InsufficientCapacityException.RiptideMessage Field Namespace: Riptide Assembly: RiptideNetworking.dll The message with insufficient remaining capacity. public readonly Message RiptideMessage Returns Message"
  },
  "api/Riptide.InsufficientCapacityException.TypeName.html": {
    "href": "api/Riptide.InsufficientCapacityException.TypeName.html",
    "title": "InsufficientCapacityException.TypeName Field | Riptide API Docs",
    "keywords": "InsufficientCapacityException.TypeName Field Namespace: Riptide Assembly: RiptideNetworking.dll The name of the type which could not be added to the message. public readonly string TypeName Returns string"
  },
  "api/Riptide.InsufficientCapacityException.html": {
    "href": "api/Riptide.InsufficientCapacityException.html",
    "title": "InsufficientCapacityException Class | Riptide API Docs",
    "keywords": "InsufficientCapacityException Class Namespace: Riptide Assembly: RiptideNetworking.dll The exception that is thrown when a Message does not contain enough unwritten bits to perform an operation. public class InsufficientCapacityException : Exception, ISerializable Inheritance object Exception InsufficientCapacityException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors InsufficientCapacityException() Initializes a new InsufficientCapacityException instance. InsufficientCapacityException(Message, int) Initializes a new InsufficientCapacityException instance and constructs an error message from the given information. InsufficientCapacityException(Message, int, string, int) Initializes a new InsufficientCapacityException instance and constructs an error message from the given information. InsufficientCapacityException(Message, string, int) Initializes a new InsufficientCapacityException instance and constructs an error message from the given information. InsufficientCapacityException(string) Initializes a new InsufficientCapacityException instance with a specified error message. InsufficientCapacityException(string, Exception) Initializes a new InsufficientCapacityException instance with a specified error message and a reference to the inner exception that is the cause of this exception. Fields RequiredBits The number of available bits the type requires in order to be added successfully. RiptideMessage The message with insufficient remaining capacity. TypeName The name of the type which could not be added to the message."
  },
  "api/Riptide.InvalidHandlerSignatureException.-ctor.html": {
    "href": "api/Riptide.InvalidHandlerSignatureException.-ctor.html",
    "title": "InvalidHandlerSignatureException Constructor | Riptide API Docs",
    "keywords": "InvalidHandlerSignatureException Constructor Namespace: Riptide Assembly: RiptideNetworking.dll Overloads InvalidHandlerSignatureException() Initializes a new InvalidHandlerSignatureException instance. InvalidHandlerSignatureException(string) Initializes a new InvalidHandlerSignatureException instance with a specified error message. InvalidHandlerSignatureException(string, Exception) Initializes a new InvalidHandlerSignatureException instance with a specified error message and a reference to the inner exception that is the cause of this exception. InvalidHandlerSignatureException(Type, string) Initializes a new InvalidHandlerSignatureException instance and constructs an error message from the given information. InvalidHandlerSignatureException() Initializes a new InvalidHandlerSignatureException instance. public InvalidHandlerSignatureException() InvalidHandlerSignatureException(string) Initializes a new InvalidHandlerSignatureException instance with a specified error message. public InvalidHandlerSignatureException(string message) Parameters string message The error message that explains the reason for the exception. InvalidHandlerSignatureException(string, Exception) Initializes a new InvalidHandlerSignatureException instance with a specified error message and a reference to the inner exception that is the cause of this exception. public InvalidHandlerSignatureException(string message, Exception inner) Parameters string message The error message that explains the reason for the exception. Exception inner The exception that is the cause of the current exception. If inner is not a null reference, the current exception is raised in a catch block that handles the inner exception. InvalidHandlerSignatureException(Type, string) Initializes a new InvalidHandlerSignatureException instance and constructs an error message from the given information. public InvalidHandlerSignatureException(Type declaringType, string handlerMethodName) Parameters Type declaringType The type containing the handler method. string handlerMethodName The name of the handler method."
  },
  "api/Riptide.InvalidHandlerSignatureException.DeclaringType.html": {
    "href": "api/Riptide.InvalidHandlerSignatureException.DeclaringType.html",
    "title": "InvalidHandlerSignatureException.DeclaringType Field | Riptide API Docs",
    "keywords": "InvalidHandlerSignatureException.DeclaringType Field Namespace: Riptide Assembly: RiptideNetworking.dll The type containing the handler method. public readonly Type DeclaringType Returns Type"
  },
  "api/Riptide.InvalidHandlerSignatureException.HandlerMethodName.html": {
    "href": "api/Riptide.InvalidHandlerSignatureException.HandlerMethodName.html",
    "title": "InvalidHandlerSignatureException.HandlerMethodName Field | Riptide API Docs",
    "keywords": "InvalidHandlerSignatureException.HandlerMethodName Field Namespace: Riptide Assembly: RiptideNetworking.dll The name of the handler method. public readonly string HandlerMethodName Returns string"
  },
  "api/Riptide.InvalidHandlerSignatureException.html": {
    "href": "api/Riptide.InvalidHandlerSignatureException.html",
    "title": "InvalidHandlerSignatureException Class | Riptide API Docs",
    "keywords": "InvalidHandlerSignatureException Class Namespace: Riptide Assembly: RiptideNetworking.dll The exception that is thrown when a method with a MessageHandlerAttribute does not have an acceptable message handler method signature (either Server.MessageHandler or Client.MessageHandler). public class InvalidHandlerSignatureException : Exception, ISerializable Inheritance object Exception InvalidHandlerSignatureException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors InvalidHandlerSignatureException() Initializes a new InvalidHandlerSignatureException instance. InvalidHandlerSignatureException(string) Initializes a new InvalidHandlerSignatureException instance with a specified error message. InvalidHandlerSignatureException(string, Exception) Initializes a new InvalidHandlerSignatureException instance with a specified error message and a reference to the inner exception that is the cause of this exception. InvalidHandlerSignatureException(Type, string) Initializes a new InvalidHandlerSignatureException instance and constructs an error message from the given information. Fields DeclaringType The type containing the handler method. HandlerMethodName The name of the handler method."
  },
  "api/Riptide.Message.Add.html": {
    "href": "api/Riptide.Message.Add.html",
    "title": "Message.Add Method | Riptide API Docs",
    "keywords": "Message.Add Method Namespace: Riptide Assembly: RiptideNetworking.dll Overloads Add(byte) Adds a byte to the message. Add(sbyte) Adds an sbyte to the message. Add(bool) Adds a bool to the message. Add(short) Adds a short to the message. Add(ushort) Adds a ushort to the message. Add(int) Adds an int to the message. Add(uint) Adds a uint to the message. Add(long) Adds a long to the message. Add(ulong) Adds a ulong to the message. Add(float) Adds a float to the message. Add(double) Adds a double to the message. Add(string) Adds a string to the message. Add<T>(T) Adds a serializable to the message. Add(byte[], bool) Adds a byte array to the message. Add(sbyte[], bool) Adds an sbyte array to the message. Add(bool[], bool) Adds a bool array to the message. Add(short[], bool) Adds a short array to the message. Add(ushort[], bool) Adds a ushort array to the message. Add(int[], bool) Adds an int array message. Add(uint[], bool) Adds a uint array to the message. Add(long[], bool) Adds a long array to the message. Add(ulong[], bool) Adds a ulong array to the message. Add(float[], bool) Adds a float array to the message. Add(double[], bool) Adds a double array to the message. Add(string[], bool) Adds a string array to the message. Add<T>(T[], bool) Adds an array of serializables to the message. Add(byte) Adds a byte to the message. public Message Add(byte value) Parameters byte value The byte to add. Returns Message The message that the byte was added to. Remarks This method is simply an alternative way of calling AddByte(byte). Add(sbyte) Adds an sbyte to the message. public Message Add(sbyte value) Parameters sbyte value The sbyte to add. Returns Message The message that the sbyte was added to. Remarks This method is simply an alternative way of calling AddSByte(sbyte). Add(bool) Adds a bool to the message. public Message Add(bool value) Parameters bool value The bool to add. Returns Message The message that the bool was added to. Remarks This method is simply an alternative way of calling AddBool(bool). Add(short) Adds a short to the message. public Message Add(short value) Parameters short value The short to add. Returns Message The message that the short was added to. Remarks This method is simply an alternative way of calling AddShort(short). Add(ushort) Adds a ushort to the message. public Message Add(ushort value) Parameters ushort value The ushort to add. Returns Message The message that the ushort was added to. Remarks This method is simply an alternative way of calling AddUShort(ushort). Add(int) Adds an int to the message. public Message Add(int value) Parameters int value The int to add. Returns Message The message that the int was added to. Remarks This method is simply an alternative way of calling AddInt(int). Add(uint) Adds a uint to the message. public Message Add(uint value) Parameters uint value The uint to add. Returns Message The message that the uint was added to. Remarks This method is simply an alternative way of calling AddUInt(uint). Add(long) Adds a long to the message. public Message Add(long value) Parameters long value The long to add. Returns Message The message that the long was added to. Remarks This method is simply an alternative way of calling AddLong(long). Add(ulong) Adds a ulong to the message. public Message Add(ulong value) Parameters ulong value The ulong to add. Returns Message The message that the ulong was added to. Remarks This method is simply an alternative way of calling AddULong(ulong). Add(float) Adds a float to the message. public Message Add(float value) Parameters float value The float to add. Returns Message The message that the float was added to. Remarks This method is simply an alternative way of calling AddFloat(float). Add(double) Adds a double to the message. public Message Add(double value) Parameters double value The double to add. Returns Message The message that the double was added to. Remarks This method is simply an alternative way of calling AddDouble(double). Add(string) Adds a string to the message. public Message Add(string value) Parameters string value The string to add. Returns Message The message that the string was added to. Remarks This method is simply an alternative way of calling AddString(string). Add<T>(T) Adds a serializable to the message. public Message Add<T>(T value) where T : IMessageSerializable Parameters T value The serializable to add. Returns Message The message that the serializable was added to. Type Parameters T Remarks This method is simply an alternative way of calling AddSerializable<T>(T). Add(byte[], bool) Adds a byte array to the message. public Message Add(byte[] array, bool includeLength = true) Parameters byte[] array The array to add. bool includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to. Remarks This method is simply an alternative way of calling AddBytes(byte[], bool). Add(sbyte[], bool) Adds an sbyte array to the message. public Message Add(sbyte[] array, bool includeLength = true) Parameters sbyte[] array The array to add. bool includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to. Remarks This method is simply an alternative way of calling AddSBytes(sbyte[], bool). Add(bool[], bool) Adds a bool array to the message. public Message Add(bool[] array, bool includeLength = true) Parameters bool[] array The array to add. bool includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to. Remarks This method is simply an alternative way of calling AddBools(bool[], bool). Add(short[], bool) Adds a short array to the message. public Message Add(short[] array, bool includeLength = true) Parameters short[] array The array to add. bool includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to. Remarks This method is simply an alternative way of calling AddShorts(short[], bool). Add(ushort[], bool) Adds a ushort array to the message. public Message Add(ushort[] array, bool includeLength = true) Parameters ushort[] array The array to add. bool includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to. Remarks This method is simply an alternative way of calling AddUShorts(ushort[], bool). Add(int[], bool) Adds an int array message. public Message Add(int[] array, bool includeLength = true) Parameters int[] array The array to add. bool includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to. Remarks This method is simply an alternative way of calling AddInts(int[], bool). Add(uint[], bool) Adds a uint array to the message. public Message Add(uint[] array, bool includeLength = true) Parameters uint[] array The array to add. bool includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to. Remarks This method is simply an alternative way of calling AddUInts(uint[], bool). Add(long[], bool) Adds a long array to the message. public Message Add(long[] array, bool includeLength = true) Parameters long[] array The array to add. bool includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to. Remarks This method is simply an alternative way of calling AddLongs(long[], bool). Add(ulong[], bool) Adds a ulong array to the message. public Message Add(ulong[] array, bool includeLength = true) Parameters ulong[] array The array to add. bool includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to. Remarks This method is simply an alternative way of calling AddULongs(ulong[], bool). Add(float[], bool) Adds a float array to the message. public Message Add(float[] array, bool includeLength = true) Parameters float[] array The array to add. bool includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to. Remarks This method is simply an alternative way of calling AddFloats(float[], bool). Add(double[], bool) Adds a double array to the message. public Message Add(double[] array, bool includeLength = true) Parameters double[] array The array to add. bool includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to. Remarks This method is simply an alternative way of calling AddDoubles(double[], bool). Add(string[], bool) Adds a string array to the message. public Message Add(string[] array, bool includeLength = true) Parameters string[] array The array to add. bool includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to. Remarks This method is simply an alternative way of calling AddStrings(string[], bool). Add<T>(T[], bool) Adds an array of serializables to the message. public Message Add<T>(T[] array, bool includeLength = true) where T : IMessageSerializable, new() Parameters T[] array The array to add. bool includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to. Type Parameters T Remarks This method is simply an alternative way of calling AddSerializables<T>(T[], bool)."
  },
  "api/Riptide.Message.AddBits.html": {
    "href": "api/Riptide.Message.AddBits.html",
    "title": "Message.AddBits Method | Riptide API Docs",
    "keywords": "Message.AddBits Method Namespace: Riptide Assembly: RiptideNetworking.dll Overloads AddBits(byte, int) Adds up to 8 of the given bits to the message. AddBits(ushort, int) Adds up to 16 of the given bits to the message. AddBits(uint, int) Adds up to 32 of the given bits to the message. AddBits(ulong, int) Adds up to 64 of the given bits to the message. AddBits(byte, int) Adds up to 8 of the given bits to the message. public Message AddBits(byte bitfield, int amount) Parameters byte bitfield The bits to add. int amount The number of bits to add. Returns Message The message that the bits were added to. AddBits(ushort, int) Adds up to 16 of the given bits to the message. public Message AddBits(ushort bitfield, int amount) Parameters ushort bitfield The bits to add. int amount The number of bits to add. Returns Message The message that the bits were added to. AddBits(uint, int) Adds up to 32 of the given bits to the message. public Message AddBits(uint bitfield, int amount) Parameters uint bitfield The bits to add. int amount The number of bits to add. Returns Message The message that the bits were added to. AddBits(ulong, int) Adds up to 64 of the given bits to the message. public Message AddBits(ulong bitfield, int amount) Parameters ulong bitfield The bits to add. int amount The number of bits to add. Returns Message The message that the bits were added to."
  },
  "api/Riptide.Message.AddBool.html": {
    "href": "api/Riptide.Message.AddBool.html",
    "title": "Message.AddBool Method | Riptide API Docs",
    "keywords": "Message.AddBool Method Namespace: Riptide Assembly: RiptideNetworking.dll AddBool(bool) Adds a bool to the message. public Message AddBool(bool value) Parameters bool value The bool to add. Returns Message The message that the bool was added to."
  },
  "api/Riptide.Message.AddBools.html": {
    "href": "api/Riptide.Message.AddBools.html",
    "title": "Message.AddBools Method | Riptide API Docs",
    "keywords": "Message.AddBools Method Namespace: Riptide Assembly: RiptideNetworking.dll AddBools(bool[], bool) Adds a bool array to the message. public Message AddBools(bool[] array, bool includeLength = true) Parameters bool[] array The array to add. bool includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to."
  },
  "api/Riptide.Message.AddByte.html": {
    "href": "api/Riptide.Message.AddByte.html",
    "title": "Message.AddByte Method | Riptide API Docs",
    "keywords": "Message.AddByte Method Namespace: Riptide Assembly: RiptideNetworking.dll AddByte(byte) Adds a byte to the message. public Message AddByte(byte value) Parameters byte value The byte to add. Returns Message The message that the byte was added to."
  },
  "api/Riptide.Message.AddBytes.html": {
    "href": "api/Riptide.Message.AddBytes.html",
    "title": "Message.AddBytes Method | Riptide API Docs",
    "keywords": "Message.AddBytes Method Namespace: Riptide Assembly: RiptideNetworking.dll Overloads AddBytes(byte[], bool) Adds a byte array to the message. AddBytes(byte[], int, int, bool) Adds a byte array to the message. AddBytes(byte[], bool) Adds a byte array to the message. public Message AddBytes(byte[] array, bool includeLength = true) Parameters byte[] array The array to add. bool includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to. AddBytes(byte[], int, int, bool) Adds a byte array to the message. public Message AddBytes(byte[] array, int startIndex, int amount, bool includeLength = true) Parameters byte[] array The array to add. int startIndex The position at which to start adding from the array. int amount The amount of bytes to add from the startIndex of the array. bool includeLength Whether or not to include the amount in the message. Returns Message The message that the array was added to."
  },
  "api/Riptide.Message.AddDouble.html": {
    "href": "api/Riptide.Message.AddDouble.html",
    "title": "Message.AddDouble Method | Riptide API Docs",
    "keywords": "Message.AddDouble Method Namespace: Riptide Assembly: RiptideNetworking.dll AddDouble(double) Adds a double to the message. public Message AddDouble(double value) Parameters double value The double to add. Returns Message The message that the double was added to."
  },
  "api/Riptide.Message.AddDoubles.html": {
    "href": "api/Riptide.Message.AddDoubles.html",
    "title": "Message.AddDoubles Method | Riptide API Docs",
    "keywords": "Message.AddDoubles Method Namespace: Riptide Assembly: RiptideNetworking.dll AddDoubles(double[], bool) Adds a double array to the message. public Message AddDoubles(double[] array, bool includeLength = true) Parameters double[] array The array to add. bool includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to."
  },
  "api/Riptide.Message.AddFloat.html": {
    "href": "api/Riptide.Message.AddFloat.html",
    "title": "Message.AddFloat Method | Riptide API Docs",
    "keywords": "Message.AddFloat Method Namespace: Riptide Assembly: RiptideNetworking.dll AddFloat(float) Adds a float to the message. public Message AddFloat(float value) Parameters float value The float to add. Returns Message The message that the float was added to."
  },
  "api/Riptide.Message.AddFloats.html": {
    "href": "api/Riptide.Message.AddFloats.html",
    "title": "Message.AddFloats Method | Riptide API Docs",
    "keywords": "Message.AddFloats Method Namespace: Riptide Assembly: RiptideNetworking.dll AddFloats(float[], bool) Adds a float array to the message. public Message AddFloats(float[] array, bool includeLength = true) Parameters float[] array The array to add. bool includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to."
  },
  "api/Riptide.Message.AddInt.html": {
    "href": "api/Riptide.Message.AddInt.html",
    "title": "Message.AddInt Method | Riptide API Docs",
    "keywords": "Message.AddInt Method Namespace: Riptide Assembly: RiptideNetworking.dll AddInt(int) Adds an int to the message. public Message AddInt(int value) Parameters int value The int to add. Returns Message The message that the int was added to."
  },
  "api/Riptide.Message.AddInts.html": {
    "href": "api/Riptide.Message.AddInts.html",
    "title": "Message.AddInts Method | Riptide API Docs",
    "keywords": "Message.AddInts Method Namespace: Riptide Assembly: RiptideNetworking.dll AddInts(int[], bool) Adds an int array message. public Message AddInts(int[] array, bool includeLength = true) Parameters int[] array The array to add. bool includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to."
  },
  "api/Riptide.Message.AddLong.html": {
    "href": "api/Riptide.Message.AddLong.html",
    "title": "Message.AddLong Method | Riptide API Docs",
    "keywords": "Message.AddLong Method Namespace: Riptide Assembly: RiptideNetworking.dll AddLong(long) Adds a long to the message. public Message AddLong(long value) Parameters long value The long to add. Returns Message The message that the long was added to."
  },
  "api/Riptide.Message.AddLongs.html": {
    "href": "api/Riptide.Message.AddLongs.html",
    "title": "Message.AddLongs Method | Riptide API Docs",
    "keywords": "Message.AddLongs Method Namespace: Riptide Assembly: RiptideNetworking.dll AddLongs(long[], bool) Adds a long array to the message. public Message AddLongs(long[] array, bool includeLength = true) Parameters long[] array The array to add. bool includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to."
  },
  "api/Riptide.Message.AddMessage.html": {
    "href": "api/Riptide.Message.AddMessage.html",
    "title": "Message.AddMessage Method | Riptide API Docs",
    "keywords": "Message.AddMessage Method Namespace: Riptide Assembly: RiptideNetworking.dll Overloads AddMessage(Message) Adds message's unread bits to the message. AddMessage(Message, int, int) Adds a range of bits from message to the message. AddMessage(Message) Adds message's unread bits to the message. public Message AddMessage(Message message) Parameters Message message The message whose unread bits to add. Returns Message The message that the bits were added to. Remarks This method does not move message's internal read position! AddMessage(Message, int, int) Adds a range of bits from message to the message. public Message AddMessage(Message message, int amount, int startBit) Parameters Message message The message whose bits to add. int amount The number of bits to add. int startBit The position in message from which to add the bits. Returns Message The message that the bits were added to. Remarks This method does not move message's internal read position!"
  },
  "api/Riptide.Message.AddSByte.html": {
    "href": "api/Riptide.Message.AddSByte.html",
    "title": "Message.AddSByte Method | Riptide API Docs",
    "keywords": "Message.AddSByte Method Namespace: Riptide Assembly: RiptideNetworking.dll AddSByte(sbyte) Adds an sbyte to the message. public Message AddSByte(sbyte value) Parameters sbyte value The sbyte to add. Returns Message The message that the sbyte was added to."
  },
  "api/Riptide.Message.AddSBytes.html": {
    "href": "api/Riptide.Message.AddSBytes.html",
    "title": "Message.AddSBytes Method | Riptide API Docs",
    "keywords": "Message.AddSBytes Method Namespace: Riptide Assembly: RiptideNetworking.dll AddSBytes(sbyte[], bool) Adds an sbyte array to the message. public Message AddSBytes(sbyte[] array, bool includeLength = true) Parameters sbyte[] array The array to add. bool includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to."
  },
  "api/Riptide.Message.AddSerializable.html": {
    "href": "api/Riptide.Message.AddSerializable.html",
    "title": "Message.AddSerializable Method | Riptide API Docs",
    "keywords": "Message.AddSerializable Method Namespace: Riptide Assembly: RiptideNetworking.dll AddSerializable<T>(T) Adds a serializable to the message. public Message AddSerializable<T>(T value) where T : IMessageSerializable Parameters T value The serializable to add. Returns Message The message that the serializable was added to. Type Parameters T"
  },
  "api/Riptide.Message.AddSerializables.html": {
    "href": "api/Riptide.Message.AddSerializables.html",
    "title": "Message.AddSerializables Method | Riptide API Docs",
    "keywords": "Message.AddSerializables Method Namespace: Riptide Assembly: RiptideNetworking.dll AddSerializables<T>(T[], bool) Adds an array of serializables to the message. public Message AddSerializables<T>(T[] array, bool includeLength = true) where T : IMessageSerializable Parameters T[] array The array to add. bool includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to. Type Parameters T"
  },
  "api/Riptide.Message.AddShort.html": {
    "href": "api/Riptide.Message.AddShort.html",
    "title": "Message.AddShort Method | Riptide API Docs",
    "keywords": "Message.AddShort Method Namespace: Riptide Assembly: RiptideNetworking.dll AddShort(short) Adds a short to the message. public Message AddShort(short value) Parameters short value The short to add. Returns Message The message that the short was added to."
  },
  "api/Riptide.Message.AddShorts.html": {
    "href": "api/Riptide.Message.AddShorts.html",
    "title": "Message.AddShorts Method | Riptide API Docs",
    "keywords": "Message.AddShorts Method Namespace: Riptide Assembly: RiptideNetworking.dll AddShorts(short[], bool) Adds a short array to the message. public Message AddShorts(short[] array, bool includeLength = true) Parameters short[] array The array to add. bool includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to."
  },
  "api/Riptide.Message.AddString.html": {
    "href": "api/Riptide.Message.AddString.html",
    "title": "Message.AddString Method | Riptide API Docs",
    "keywords": "Message.AddString Method Namespace: Riptide Assembly: RiptideNetworking.dll AddString(string) Adds a string to the message. public Message AddString(string value) Parameters string value The string to add. Returns Message The message that the string was added to."
  },
  "api/Riptide.Message.AddStrings.html": {
    "href": "api/Riptide.Message.AddStrings.html",
    "title": "Message.AddStrings Method | Riptide API Docs",
    "keywords": "Message.AddStrings Method Namespace: Riptide Assembly: RiptideNetworking.dll AddStrings(string[], bool) Adds a string array to the message. public Message AddStrings(string[] array, bool includeLength = true) Parameters string[] array The array to add. bool includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to."
  },
  "api/Riptide.Message.AddUInt.html": {
    "href": "api/Riptide.Message.AddUInt.html",
    "title": "Message.AddUInt Method | Riptide API Docs",
    "keywords": "Message.AddUInt Method Namespace: Riptide Assembly: RiptideNetworking.dll AddUInt(uint) Adds a uint to the message. public Message AddUInt(uint value) Parameters uint value The uint to add. Returns Message The message that the uint was added to."
  },
  "api/Riptide.Message.AddUInts.html": {
    "href": "api/Riptide.Message.AddUInts.html",
    "title": "Message.AddUInts Method | Riptide API Docs",
    "keywords": "Message.AddUInts Method Namespace: Riptide Assembly: RiptideNetworking.dll AddUInts(uint[], bool) Adds a uint array to the message. public Message AddUInts(uint[] array, bool includeLength = true) Parameters uint[] array The array to add. bool includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to."
  },
  "api/Riptide.Message.AddULong.html": {
    "href": "api/Riptide.Message.AddULong.html",
    "title": "Message.AddULong Method | Riptide API Docs",
    "keywords": "Message.AddULong Method Namespace: Riptide Assembly: RiptideNetworking.dll AddULong(ulong) Adds a ulong to the message. public Message AddULong(ulong value) Parameters ulong value The ulong to add. Returns Message The message that the ulong was added to."
  },
  "api/Riptide.Message.AddULongs.html": {
    "href": "api/Riptide.Message.AddULongs.html",
    "title": "Message.AddULongs Method | Riptide API Docs",
    "keywords": "Message.AddULongs Method Namespace: Riptide Assembly: RiptideNetworking.dll AddULongs(ulong[], bool) Adds a ulong array to the message. public Message AddULongs(ulong[] array, bool includeLength = true) Parameters ulong[] array The array to add. bool includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to."
  },
  "api/Riptide.Message.AddUShort.html": {
    "href": "api/Riptide.Message.AddUShort.html",
    "title": "Message.AddUShort Method | Riptide API Docs",
    "keywords": "Message.AddUShort Method Namespace: Riptide Assembly: RiptideNetworking.dll AddUShort(ushort) Adds a ushort to the message. public Message AddUShort(ushort value) Parameters ushort value The ushort to add. Returns Message The message that the ushort was added to."
  },
  "api/Riptide.Message.AddUShorts.html": {
    "href": "api/Riptide.Message.AddUShorts.html",
    "title": "Message.AddUShorts Method | Riptide API Docs",
    "keywords": "Message.AddUShorts Method Namespace: Riptide Assembly: RiptideNetworking.dll AddUShorts(ushort[], bool) Adds a ushort array to the message. public Message AddUShorts(ushort[] array, bool includeLength = true) Parameters ushort[] array The array to add. bool includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to."
  },
  "api/Riptide.Message.AddVarLong.html": {
    "href": "api/Riptide.Message.AddVarLong.html",
    "title": "Message.AddVarLong Method | Riptide API Docs",
    "keywords": "Message.AddVarLong Method Namespace: Riptide Assembly: RiptideNetworking.dll AddVarLong(long) Adds a positive or negative number to the message, using fewer bits for smaller values. public Message AddVarLong(long value) Parameters long value The value to add. Returns Message The message that the value was added to. Remarks The value is added in segments of 8 bits, 1 of which is used to indicate whether or not another segment follows. As a result, small values are added to the message using fewer bits, while large values will require a few more bits than they would if they were added via AddByte(byte), AddUShort(ushort), AddUInt(uint), or AddULong(ulong) (or their signed counterparts)."
  },
  "api/Riptide.Message.AddVarULong.html": {
    "href": "api/Riptide.Message.AddVarULong.html",
    "title": "Message.AddVarULong Method | Riptide API Docs",
    "keywords": "Message.AddVarULong Method Namespace: Riptide Assembly: RiptideNetworking.dll AddVarULong(ulong) Adds a positive number to the message, using fewer bits for smaller values. public Message AddVarULong(ulong value) Parameters ulong value The value to add. Returns Message The message that the value was added to. Remarks The value is added in segments of 8 bits, 1 of which is used to indicate whether or not another segment follows. As a result, small values are added to the message using fewer bits, while large values will require a few more bits than they would if they were added via AddByte(byte), AddUShort(ushort), AddUInt(uint), or AddULong(ulong) (or their signed counterparts)."
  },
  "api/Riptide.Message.BytesInUse.html": {
    "href": "api/Riptide.Message.BytesInUse.html",
    "title": "Message.BytesInUse Property | Riptide API Docs",
    "keywords": "Message.BytesInUse Property Namespace: Riptide Assembly: RiptideNetworking.dll BytesInUse How many of this message's bytes are in use. Rounds up to the next byte because only whole bytes can be sent. public int BytesInUse { get; } Property Value int"
  },
  "api/Riptide.Message.Create.html": {
    "href": "api/Riptide.Message.Create.html",
    "title": "Message.Create Method | Riptide API Docs",
    "keywords": "Message.Create Method Namespace: Riptide Assembly: RiptideNetworking.dll Overloads Create() Gets a completely empty message instance with no header. Create(MessageSendMode) Gets a message instance that can be used for sending. Create(MessageSendMode, ushort) Gets a message instance that can be used for sending. Create(MessageSendMode, Enum) Gets a message instance that can be used for sending. Create() Gets a completely empty message instance with no header. public static Message Create() Returns Message An empty message instance. Create(MessageSendMode) Gets a message instance that can be used for sending. public static Message Create(MessageSendMode sendMode) Parameters MessageSendMode sendMode The mode in which the message should be sent. Returns Message A message instance ready to be sent. Remarks This method is primarily intended for use with Notify as notify messages don't have a built-in message ID, and unlike Create(MessageSendMode, ushort) and Create(MessageSendMode, Enum), this overload does not add a message ID to the message. Create(MessageSendMode, ushort) Gets a message instance that can be used for sending. public static Message Create(MessageSendMode sendMode, ushort id) Parameters MessageSendMode sendMode The mode in which the message should be sent. ushort id The message ID. Returns Message A message instance ready to be sent. Create(MessageSendMode, Enum) Gets a message instance that can be used for sending. public static Message Create(MessageSendMode sendMode, Enum id) Parameters MessageSendMode sendMode The mode in which the message should be sent. Enum id The message ID. Returns Message A message instance ready to be sent. Remarks NOTE: id will be cast to a ushort. You should ensure that its value never exceeds that of MaxValue, otherwise you'll encounter unexpected behaviour when handling messages."
  },
  "api/Riptide.Message.GetBits.html": {
    "href": "api/Riptide.Message.GetBits.html",
    "title": "Message.GetBits Method | Riptide API Docs",
    "keywords": "Message.GetBits Method Namespace: Riptide Assembly: RiptideNetworking.dll Overloads GetBits(int, out byte) Retrieves the next amount bits (up to 8) from the message. GetBits(int, out ushort) Retrieves the next amount bits (up to 16) from the message. GetBits(int, out uint) Retrieves the next amount bits (up to 32) from the message. GetBits(int, out ulong) Retrieves the next amount bits (up to 64) from the message. GetBits(int, out byte) Retrieves the next amount bits (up to 8) from the message. public Message GetBits(int amount, out byte bitfield) Parameters int amount The number of bits to retrieve. byte bitfield The bits that were retrieved. Returns Message The messages that the bits were retrieved from. GetBits(int, out ushort) Retrieves the next amount bits (up to 16) from the message. public Message GetBits(int amount, out ushort bitfield) Parameters int amount The number of bits to retrieve. ushort bitfield The bits that were retrieved. Returns Message The messages that the bits were retrieved from. GetBits(int, out uint) Retrieves the next amount bits (up to 32) from the message. public Message GetBits(int amount, out uint bitfield) Parameters int amount The number of bits to retrieve. uint bitfield The bits that were retrieved. Returns Message The messages that the bits were retrieved from. GetBits(int, out ulong) Retrieves the next amount bits (up to 64) from the message. public Message GetBits(int amount, out ulong bitfield) Parameters int amount The number of bits to retrieve. ulong bitfield The bits that were retrieved. Returns Message The messages that the bits were retrieved from."
  },
  "api/Riptide.Message.GetBool.html": {
    "href": "api/Riptide.Message.GetBool.html",
    "title": "Message.GetBool Method | Riptide API Docs",
    "keywords": "Message.GetBool Method Namespace: Riptide Assembly: RiptideNetworking.dll GetBool() Retrieves a bool from the message. public bool GetBool() Returns bool The bool that was retrieved."
  },
  "api/Riptide.Message.GetBools.html": {
    "href": "api/Riptide.Message.GetBools.html",
    "title": "Message.GetBools Method | Riptide API Docs",
    "keywords": "Message.GetBools Method Namespace: Riptide Assembly: RiptideNetworking.dll Overloads GetBools() Retrieves a bool array from the message. GetBools(int) Retrieves a bool array from the message. GetBools(bool[], int) Populates a bool array with bools retrieved from the message. GetBools(int, bool[], int) Populates a bool array with bools retrieved from the message. GetBools() Retrieves a bool array from the message. public bool[] GetBools() Returns bool[] The array that was retrieved. GetBools(int) Retrieves a bool array from the message. public bool[] GetBools(int amount) Parameters int amount The amount of bools to retrieve. Returns bool[] The array that was retrieved. GetBools(bool[], int) Populates a bool array with bools retrieved from the message. public void GetBools(bool[] intoArray, int startIndex = 0) Parameters bool[] intoArray The array to populate. int startIndex The position at which to start populating the array. GetBools(int, bool[], int) Populates a bool array with bools retrieved from the message. public void GetBools(int amount, bool[] intoArray, int startIndex = 0) Parameters int amount The amount of bools to retrieve. bool[] intoArray The array to populate. int startIndex The position at which to start populating the array."
  },
  "api/Riptide.Message.GetByte.html": {
    "href": "api/Riptide.Message.GetByte.html",
    "title": "Message.GetByte Method | Riptide API Docs",
    "keywords": "Message.GetByte Method Namespace: Riptide Assembly: RiptideNetworking.dll GetByte() Retrieves a byte from the message. public byte GetByte() Returns byte The byte that was retrieved."
  },
  "api/Riptide.Message.GetBytes.html": {
    "href": "api/Riptide.Message.GetBytes.html",
    "title": "Message.GetBytes Method | Riptide API Docs",
    "keywords": "Message.GetBytes Method Namespace: Riptide Assembly: RiptideNetworking.dll Overloads GetBytes() Retrieves a byte array from the message. GetBytes(int) Retrieves a byte array from the message. GetBytes(byte[], int) Populates a byte array with bytes retrieved from the message. GetBytes(int, byte[], int) Populates a byte array with bytes retrieved from the message. GetBytes() Retrieves a byte array from the message. public byte[] GetBytes() Returns byte[] The array that was retrieved. GetBytes(int) Retrieves a byte array from the message. public byte[] GetBytes(int amount) Parameters int amount The amount of bytes to retrieve. Returns byte[] The array that was retrieved. GetBytes(byte[], int) Populates a byte array with bytes retrieved from the message. public void GetBytes(byte[] intoArray, int startIndex = 0) Parameters byte[] intoArray The array to populate. int startIndex The position at which to start populating the array. GetBytes(int, byte[], int) Populates a byte array with bytes retrieved from the message. public void GetBytes(int amount, byte[] intoArray, int startIndex = 0) Parameters int amount The amount of bytes to retrieve. byte[] intoArray The array to populate. int startIndex The position at which to start populating the array."
  },
  "api/Riptide.Message.GetDouble.html": {
    "href": "api/Riptide.Message.GetDouble.html",
    "title": "Message.GetDouble Method | Riptide API Docs",
    "keywords": "Message.GetDouble Method Namespace: Riptide Assembly: RiptideNetworking.dll GetDouble() Retrieves a double from the message. public double GetDouble() Returns double The double that was retrieved."
  },
  "api/Riptide.Message.GetDoubles.html": {
    "href": "api/Riptide.Message.GetDoubles.html",
    "title": "Message.GetDoubles Method | Riptide API Docs",
    "keywords": "Message.GetDoubles Method Namespace: Riptide Assembly: RiptideNetworking.dll Overloads GetDoubles() Retrieves a double array from the message. GetDoubles(int) Retrieves a double array from the message. GetDoubles(double[], int) Populates a double array with doubles retrieved from the message. GetDoubles(int, double[], int) Populates a double array with doubles retrieved from the message. GetDoubles() Retrieves a double array from the message. public double[] GetDoubles() Returns double[] The array that was retrieved. GetDoubles(int) Retrieves a double array from the message. public double[] GetDoubles(int amount) Parameters int amount The amount of doubles to retrieve. Returns double[] The array that was retrieved. GetDoubles(double[], int) Populates a double array with doubles retrieved from the message. public void GetDoubles(double[] intoArray, int startIndex = 0) Parameters double[] intoArray The array to populate. int startIndex The position at which to start populating the array. GetDoubles(int, double[], int) Populates a double array with doubles retrieved from the message. public void GetDoubles(int amount, double[] intoArray, int startIndex = 0) Parameters int amount The amount of doubles to retrieve. double[] intoArray The array to populate. int startIndex The position at which to start populating the array."
  },
  "api/Riptide.Message.GetFloat.html": {
    "href": "api/Riptide.Message.GetFloat.html",
    "title": "Message.GetFloat Method | Riptide API Docs",
    "keywords": "Message.GetFloat Method Namespace: Riptide Assembly: RiptideNetworking.dll GetFloat() Retrieves a float from the message. public float GetFloat() Returns float The float that was retrieved."
  },
  "api/Riptide.Message.GetFloats.html": {
    "href": "api/Riptide.Message.GetFloats.html",
    "title": "Message.GetFloats Method | Riptide API Docs",
    "keywords": "Message.GetFloats Method Namespace: Riptide Assembly: RiptideNetworking.dll Overloads GetFloats() Retrieves a float array from the message. GetFloats(int) Retrieves a float array from the message. GetFloats(float[], int) Populates a float array with floats retrieved from the message. GetFloats(int, float[], int) Populates a float array with floats retrieved from the message. GetFloats() Retrieves a float array from the message. public float[] GetFloats() Returns float[] The array that was retrieved. GetFloats(int) Retrieves a float array from the message. public float[] GetFloats(int amount) Parameters int amount The amount of floats to retrieve. Returns float[] The array that was retrieved. GetFloats(float[], int) Populates a float array with floats retrieved from the message. public void GetFloats(float[] intoArray, int startIndex = 0) Parameters float[] intoArray The array to populate. int startIndex The position at which to start populating the array. GetFloats(int, float[], int) Populates a float array with floats retrieved from the message. public void GetFloats(int amount, float[] intoArray, int startIndex = 0) Parameters int amount The amount of floats to retrieve. float[] intoArray The array to populate. int startIndex The position at which to start populating the array."
  },
  "api/Riptide.Message.GetInt.html": {
    "href": "api/Riptide.Message.GetInt.html",
    "title": "Message.GetInt Method | Riptide API Docs",
    "keywords": "Message.GetInt Method Namespace: Riptide Assembly: RiptideNetworking.dll GetInt() Retrieves an int from the message. public int GetInt() Returns int The int that was retrieved."
  },
  "api/Riptide.Message.GetInts.html": {
    "href": "api/Riptide.Message.GetInts.html",
    "title": "Message.GetInts Method | Riptide API Docs",
    "keywords": "Message.GetInts Method Namespace: Riptide Assembly: RiptideNetworking.dll Overloads GetInts() Retrieves an int array from the message. GetInts(int) Retrieves an int array from the message. GetInts(int[], int) Populates an int array with ints retrieved from the message. GetInts(int, int[], int) Populates an int array with ints retrieved from the message. GetInts() Retrieves an int array from the message. public int[] GetInts() Returns int[] The array that was retrieved. GetInts(int) Retrieves an int array from the message. public int[] GetInts(int amount) Parameters int amount The amount of ints to retrieve. Returns int[] The array that was retrieved. GetInts(int[], int) Populates an int array with ints retrieved from the message. public void GetInts(int[] intoArray, int startIndex = 0) Parameters int[] intoArray The array to populate. int startIndex The position at which to start populating the array. GetInts(int, int[], int) Populates an int array with ints retrieved from the message. public void GetInts(int amount, int[] intoArray, int startIndex = 0) Parameters int amount The amount of ints to retrieve. int[] intoArray The array to populate. int startIndex The position at which to start populating the array."
  },
  "api/Riptide.Message.GetLong.html": {
    "href": "api/Riptide.Message.GetLong.html",
    "title": "Message.GetLong Method | Riptide API Docs",
    "keywords": "Message.GetLong Method Namespace: Riptide Assembly: RiptideNetworking.dll GetLong() Retrieves a long from the message. public long GetLong() Returns long The long that was retrieved."
  },
  "api/Riptide.Message.GetLongs.html": {
    "href": "api/Riptide.Message.GetLongs.html",
    "title": "Message.GetLongs Method | Riptide API Docs",
    "keywords": "Message.GetLongs Method Namespace: Riptide Assembly: RiptideNetworking.dll Overloads GetLongs() Retrieves a long array from the message. GetLongs(int) Retrieves a long array from the message. GetLongs(long[], int) Populates a long array with longs retrieved from the message. GetLongs(int, long[], int) Populates a long array with longs retrieved from the message. GetLongs() Retrieves a long array from the message. public long[] GetLongs() Returns long[] The array that was retrieved. GetLongs(int) Retrieves a long array from the message. public long[] GetLongs(int amount) Parameters int amount The amount of longs to retrieve. Returns long[] The array that was retrieved. GetLongs(long[], int) Populates a long array with longs retrieved from the message. public void GetLongs(long[] intoArray, int startIndex = 0) Parameters long[] intoArray The array to populate. int startIndex The position at which to start populating the array. GetLongs(int, long[], int) Populates a long array with longs retrieved from the message. public void GetLongs(int amount, long[] intoArray, int startIndex = 0) Parameters int amount The amount of longs to retrieve. long[] intoArray The array to populate. int startIndex The position at which to start populating the array."
  },
  "api/Riptide.Message.GetSByte.html": {
    "href": "api/Riptide.Message.GetSByte.html",
    "title": "Message.GetSByte Method | Riptide API Docs",
    "keywords": "Message.GetSByte Method Namespace: Riptide Assembly: RiptideNetworking.dll GetSByte() Retrieves an sbyte from the message. public sbyte GetSByte() Returns sbyte The sbyte that was retrieved."
  },
  "api/Riptide.Message.GetSBytes.html": {
    "href": "api/Riptide.Message.GetSBytes.html",
    "title": "Message.GetSBytes Method | Riptide API Docs",
    "keywords": "Message.GetSBytes Method Namespace: Riptide Assembly: RiptideNetworking.dll Overloads GetSBytes() Retrieves an sbyte array from the message. GetSBytes(int) Retrieves an sbyte array from the message. GetSBytes(sbyte[], int) Populates a sbyte array with bytes retrieved from the message. GetSBytes(int, sbyte[], int) Populates a sbyte array with bytes retrieved from the message. GetSBytes() Retrieves an sbyte array from the message. public sbyte[] GetSBytes() Returns sbyte[] The array that was retrieved. GetSBytes(int) Retrieves an sbyte array from the message. public sbyte[] GetSBytes(int amount) Parameters int amount The amount of sbytes to retrieve. Returns sbyte[] The array that was retrieved. GetSBytes(sbyte[], int) Populates a sbyte array with bytes retrieved from the message. public void GetSBytes(sbyte[] intoArray, int startIndex = 0) Parameters sbyte[] intoArray The array to populate. int startIndex The position at which to start populating intoArray. GetSBytes(int, sbyte[], int) Populates a sbyte array with bytes retrieved from the message. public void GetSBytes(int amount, sbyte[] intoArray, int startIndex = 0) Parameters int amount The amount of sbytes to retrieve. sbyte[] intoArray The array to populate. int startIndex The position at which to start populating intoArray."
  },
  "api/Riptide.Message.GetSerializable.html": {
    "href": "api/Riptide.Message.GetSerializable.html",
    "title": "Message.GetSerializable Method | Riptide API Docs",
    "keywords": "Message.GetSerializable Method Namespace: Riptide Assembly: RiptideNetworking.dll GetSerializable<T>() Retrieves a serializable from the message. public T GetSerializable<T>() where T : IMessageSerializable, new() Returns T The serializable that was retrieved. Type Parameters T"
  },
  "api/Riptide.Message.GetSerializables.html": {
    "href": "api/Riptide.Message.GetSerializables.html",
    "title": "Message.GetSerializables Method | Riptide API Docs",
    "keywords": "Message.GetSerializables Method Namespace: Riptide Assembly: RiptideNetworking.dll Overloads GetSerializables<T>() Retrieves an array of serializables from the message. GetSerializables<T>(int) Retrieves an array of serializables from the message. GetSerializables<T>(T[], int) Populates an array of serializables retrieved from the message. GetSerializables<T>(int, T[], int) Populates an array of serializables retrieved from the message. GetSerializables<T>() Retrieves an array of serializables from the message. public T[] GetSerializables<T>() where T : IMessageSerializable, new() Returns T[] The array that was retrieved. Type Parameters T GetSerializables<T>(int) Retrieves an array of serializables from the message. public T[] GetSerializables<T>(int amount) where T : IMessageSerializable, new() Parameters int amount The amount of serializables to retrieve. Returns T[] The array that was retrieved. Type Parameters T GetSerializables<T>(T[], int) Populates an array of serializables retrieved from the message. public void GetSerializables<T>(T[] intoArray, int startIndex = 0) where T : IMessageSerializable, new() Parameters T[] intoArray The array to populate. int startIndex The position at which to start populating the array. Type Parameters T GetSerializables<T>(int, T[], int) Populates an array of serializables retrieved from the message. public void GetSerializables<T>(int amount, T[] intoArray, int startIndex = 0) where T : IMessageSerializable, new() Parameters int amount The amount of serializables to retrieve. T[] intoArray The array to populate. int startIndex The position at which to start populating the array. Type Parameters T"
  },
  "api/Riptide.Message.GetShort.html": {
    "href": "api/Riptide.Message.GetShort.html",
    "title": "Message.GetShort Method | Riptide API Docs",
    "keywords": "Message.GetShort Method Namespace: Riptide Assembly: RiptideNetworking.dll GetShort() Retrieves a short from the message. public short GetShort() Returns short The short that was retrieved."
  },
  "api/Riptide.Message.GetShorts.html": {
    "href": "api/Riptide.Message.GetShorts.html",
    "title": "Message.GetShorts Method | Riptide API Docs",
    "keywords": "Message.GetShorts Method Namespace: Riptide Assembly: RiptideNetworking.dll Overloads GetShorts() Retrieves a short array from the message. GetShorts(int) Retrieves a short array from the message. GetShorts(short[], int) Populates a short array with shorts retrieved from the message. GetShorts(int, short[], int) Populates a short array with shorts retrieved from the message. GetShorts() Retrieves a short array from the message. public short[] GetShorts() Returns short[] The array that was retrieved. GetShorts(int) Retrieves a short array from the message. public short[] GetShorts(int amount) Parameters int amount The amount of shorts to retrieve. Returns short[] The array that was retrieved. GetShorts(short[], int) Populates a short array with shorts retrieved from the message. public void GetShorts(short[] intoArray, int startIndex = 0) Parameters short[] intoArray The array to populate. int startIndex The position at which to start populating the array. GetShorts(int, short[], int) Populates a short array with shorts retrieved from the message. public void GetShorts(int amount, short[] intoArray, int startIndex = 0) Parameters int amount The amount of shorts to retrieve. short[] intoArray The array to populate. int startIndex The position at which to start populating the array."
  },
  "api/Riptide.Message.GetString.html": {
    "href": "api/Riptide.Message.GetString.html",
    "title": "Message.GetString Method | Riptide API Docs",
    "keywords": "Message.GetString Method Namespace: Riptide Assembly: RiptideNetworking.dll GetString() Retrieves a string from the message. public string GetString() Returns string The string that was retrieved."
  },
  "api/Riptide.Message.GetStrings.html": {
    "href": "api/Riptide.Message.GetStrings.html",
    "title": "Message.GetStrings Method | Riptide API Docs",
    "keywords": "Message.GetStrings Method Namespace: Riptide Assembly: RiptideNetworking.dll Overloads GetStrings() Retrieves a string array from the message. GetStrings(int) Retrieves a string array from the message. GetStrings(string[], int) Populates a string array with strings retrieved from the message. GetStrings(int, string[], int) Populates a string array with strings retrieved from the message. GetStrings() Retrieves a string array from the message. public string[] GetStrings() Returns string[] The array that was retrieved. GetStrings(int) Retrieves a string array from the message. public string[] GetStrings(int amount) Parameters int amount The amount of strings to retrieve. Returns string[] The array that was retrieved. GetStrings(string[], int) Populates a string array with strings retrieved from the message. public void GetStrings(string[] intoArray, int startIndex = 0) Parameters string[] intoArray The array to populate. int startIndex The position at which to start populating the array. GetStrings(int, string[], int) Populates a string array with strings retrieved from the message. public void GetStrings(int amount, string[] intoArray, int startIndex = 0) Parameters int amount The amount of strings to retrieve. string[] intoArray The array to populate. int startIndex The position at which to start populating the array."
  },
  "api/Riptide.Message.GetUInt.html": {
    "href": "api/Riptide.Message.GetUInt.html",
    "title": "Message.GetUInt Method | Riptide API Docs",
    "keywords": "Message.GetUInt Method Namespace: Riptide Assembly: RiptideNetworking.dll GetUInt() Retrieves a uint from the message. public uint GetUInt() Returns uint The uint that was retrieved."
  },
  "api/Riptide.Message.GetUInts.html": {
    "href": "api/Riptide.Message.GetUInts.html",
    "title": "Message.GetUInts Method | Riptide API Docs",
    "keywords": "Message.GetUInts Method Namespace: Riptide Assembly: RiptideNetworking.dll Overloads GetUInts() Retrieves a uint array from the message. GetUInts(int) Retrieves a uint array from the message. GetUInts(uint[], int) Populates a uint array with uints retrieved from the message. GetUInts(int, uint[], int) Populates a uint array with uints retrieved from the message. GetUInts() Retrieves a uint array from the message. public uint[] GetUInts() Returns uint[] The array that was retrieved. GetUInts(int) Retrieves a uint array from the message. public uint[] GetUInts(int amount) Parameters int amount The amount of uints to retrieve. Returns uint[] The array that was retrieved. GetUInts(uint[], int) Populates a uint array with uints retrieved from the message. public void GetUInts(uint[] intoArray, int startIndex = 0) Parameters uint[] intoArray The array to populate. int startIndex The position at which to start populating the array. GetUInts(int, uint[], int) Populates a uint array with uints retrieved from the message. public void GetUInts(int amount, uint[] intoArray, int startIndex = 0) Parameters int amount The amount of uints to retrieve. uint[] intoArray The array to populate. int startIndex The position at which to start populating the array."
  },
  "api/Riptide.Message.GetULong.html": {
    "href": "api/Riptide.Message.GetULong.html",
    "title": "Message.GetULong Method | Riptide API Docs",
    "keywords": "Message.GetULong Method Namespace: Riptide Assembly: RiptideNetworking.dll GetULong() Retrieves a ulong from the message. public ulong GetULong() Returns ulong The ulong that was retrieved."
  },
  "api/Riptide.Message.GetULongs.html": {
    "href": "api/Riptide.Message.GetULongs.html",
    "title": "Message.GetULongs Method | Riptide API Docs",
    "keywords": "Message.GetULongs Method Namespace: Riptide Assembly: RiptideNetworking.dll Overloads GetULongs() Retrieves a ulong array from the message. GetULongs(int) Retrieves a ulong array from the message. GetULongs(ulong[], int) Populates a ulong array with ulongs retrieved from the message. GetULongs(int, ulong[], int) Populates a ulong array with ulongs retrieved from the message. GetULongs() Retrieves a ulong array from the message. public ulong[] GetULongs() Returns ulong[] The array that was retrieved. GetULongs(int) Retrieves a ulong array from the message. public ulong[] GetULongs(int amount) Parameters int amount The amount of ulongs to retrieve. Returns ulong[] The array that was retrieved. GetULongs(ulong[], int) Populates a ulong array with ulongs retrieved from the message. public void GetULongs(ulong[] intoArray, int startIndex = 0) Parameters ulong[] intoArray The array to populate. int startIndex The position at which to start populating the array. GetULongs(int, ulong[], int) Populates a ulong array with ulongs retrieved from the message. public void GetULongs(int amount, ulong[] intoArray, int startIndex = 0) Parameters int amount The amount of ulongs to retrieve. ulong[] intoArray The array to populate. int startIndex The position at which to start populating the array."
  },
  "api/Riptide.Message.GetUShort.html": {
    "href": "api/Riptide.Message.GetUShort.html",
    "title": "Message.GetUShort Method | Riptide API Docs",
    "keywords": "Message.GetUShort Method Namespace: Riptide Assembly: RiptideNetworking.dll GetUShort() Retrieves a ushort from the message. public ushort GetUShort() Returns ushort The ushort that was retrieved."
  },
  "api/Riptide.Message.GetUShorts.html": {
    "href": "api/Riptide.Message.GetUShorts.html",
    "title": "Message.GetUShorts Method | Riptide API Docs",
    "keywords": "Message.GetUShorts Method Namespace: Riptide Assembly: RiptideNetworking.dll Overloads GetUShorts() Retrieves a ushort array from the message. GetUShorts(int) Retrieves a ushort array from the message. GetUShorts(ushort[], int) Populates a ushort array with ushorts retrieved from the message. GetUShorts(int, ushort[], int) Populates a ushort array with ushorts retrieved from the message. GetUShorts() Retrieves a ushort array from the message. public ushort[] GetUShorts() Returns ushort[] The array that was retrieved. GetUShorts(int) Retrieves a ushort array from the message. public ushort[] GetUShorts(int amount) Parameters int amount The amount of ushorts to retrieve. Returns ushort[] The array that was retrieved. GetUShorts(ushort[], int) Populates a ushort array with ushorts retrieved from the message. public void GetUShorts(ushort[] intoArray, int startIndex = 0) Parameters ushort[] intoArray The array to populate. int startIndex The position at which to start populating the array. GetUShorts(int, ushort[], int) Populates a ushort array with ushorts retrieved from the message. public void GetUShorts(int amount, ushort[] intoArray, int startIndex = 0) Parameters int amount The amount of ushorts to retrieve. ushort[] intoArray The array to populate. int startIndex The position at which to start populating the array."
  },
  "api/Riptide.Message.GetVarLong.html": {
    "href": "api/Riptide.Message.GetVarLong.html",
    "title": "Message.GetVarLong Method | Riptide API Docs",
    "keywords": "Message.GetVarLong Method Namespace: Riptide Assembly: RiptideNetworking.dll GetVarLong() Retrieves a positive or negative number from the message, using fewer bits for smaller values. public long GetVarLong() Returns long The value that was retrieved. Remarks The value is retrieved in segments of 8 bits, 1 of which is used to indicate whether or not another segment follows. As a result, small values are retrieved from the message using fewer bits, while large values will require a few more bits than they would if they were retrieved via GetByte(), GetUShort(), GetUInt(), or GetULong() (or their signed counterparts)."
  },
  "api/Riptide.Message.GetVarULong.html": {
    "href": "api/Riptide.Message.GetVarULong.html",
    "title": "Message.GetVarULong Method | Riptide API Docs",
    "keywords": "Message.GetVarULong Method Namespace: Riptide Assembly: RiptideNetworking.dll GetVarULong() Retrieves a positive number from the message, using fewer bits for smaller values. public ulong GetVarULong() Returns ulong The value that was retrieved. Remarks The value is retrieved in segments of 8 bits, 1 of which is used to indicate whether or not another segment follows. As a result, small values are retrieved from the message using fewer bits, while large values will require a few more bits than they would if they were retrieved via GetByte(), GetUShort(), GetUInt(), or GetULong() (or their signed counterparts)."
  },
  "api/Riptide.Message.InstancesPerPeer.html": {
    "href": "api/Riptide.Message.InstancesPerPeer.html",
    "title": "Message.InstancesPerPeer Property | Riptide API Docs",
    "keywords": "Message.InstancesPerPeer Property Namespace: Riptide Assembly: RiptideNetworking.dll InstancesPerPeer How many messages to add to the pool for each Server or Client instance that is started. public static byte InstancesPerPeer { get; set; } Property Value byte Remarks Changes will not affect Server and Client instances which are already running until they are restarted."
  },
  "api/Riptide.Message.MaxHeaderSize.html": {
    "href": "api/Riptide.Message.MaxHeaderSize.html",
    "title": "Message.MaxHeaderSize Field | Riptide API Docs",
    "keywords": "Message.MaxHeaderSize Field Namespace: Riptide Assembly: RiptideNetworking.dll The maximum number of bits required for a message's header. public const int MaxHeaderSize = 44 Returns int"
  },
  "api/Riptide.Message.MaxPayloadSize.html": {
    "href": "api/Riptide.Message.MaxPayloadSize.html",
    "title": "Message.MaxPayloadSize Property | Riptide API Docs",
    "keywords": "Message.MaxPayloadSize Property Namespace: Riptide Assembly: RiptideNetworking.dll MaxPayloadSize The maximum number of bytes of payload data that a message can contain. This value represents how many bytes can be added to a message on top of the MaxHeaderSize. public static int MaxPayloadSize { get; set; } Property Value int"
  },
  "api/Riptide.Message.MaxSize.html": {
    "href": "api/Riptide.Message.MaxSize.html",
    "title": "Message.MaxSize Property | Riptide API Docs",
    "keywords": "Message.MaxSize Property Namespace: Riptide Assembly: RiptideNetworking.dll MaxSize The maximum number of bytes that a message can contain, including the MaxHeaderSize. public static int MaxSize { get; } Property Value int"
  },
  "api/Riptide.Message.PeekBits.html": {
    "href": "api/Riptide.Message.PeekBits.html",
    "title": "Message.PeekBits Method | Riptide API Docs",
    "keywords": "Message.PeekBits Method Namespace: Riptide Assembly: RiptideNetworking.dll Overloads PeekBits(int, int, out byte) Retrieves up to 8 bits from the specified position in the message. PeekBits(int, int, out ushort) Retrieves up to 16 bits from the specified position in the message. PeekBits(int, int, out uint) Retrieves up to 32 bits from the specified position in the message. PeekBits(int, int, out ulong) Retrieves up to 64 bits from the specified position in the message. PeekBits(int, int, out byte) Retrieves up to 8 bits from the specified position in the message. public Message PeekBits(int amount, int startBit, out byte bitfield) Parameters int amount The number of bits to peek. int startBit The bit position in the message at which to start peeking. byte bitfield The bits that were retrieved. Returns Message The message instance. Remarks This method can be used to retrieve a range of bits from anywhere in the message without moving its internal read position. PeekBits(int, int, out ushort) Retrieves up to 16 bits from the specified position in the message. public Message PeekBits(int amount, int startBit, out ushort bitfield) Parameters int amount The number of bits to peek. int startBit The bit position in the message at which to start peeking. ushort bitfield The bits that were retrieved. Returns Message The message instance. Remarks This method can be used to retrieve a range of bits from anywhere in the message without moving its internal read position. PeekBits(int, int, out uint) Retrieves up to 32 bits from the specified position in the message. public Message PeekBits(int amount, int startBit, out uint bitfield) Parameters int amount The number of bits to peek. int startBit The bit position in the message at which to start peeking. uint bitfield The bits that were retrieved. Returns Message The message instance. Remarks This method can be used to retrieve a range of bits from anywhere in the message without moving its internal read position. PeekBits(int, int, out ulong) Retrieves up to 64 bits from the specified position in the message. public Message PeekBits(int amount, int startBit, out ulong bitfield) Parameters int amount The number of bits to peek. int startBit The bit position in the message at which to start peeking. ulong bitfield The bits that were retrieved. Returns Message The message instance. Remarks This method can be used to retrieve a range of bits from anywhere in the message without moving its internal read position."
  },
  "api/Riptide.Message.ReadBits.html": {
    "href": "api/Riptide.Message.ReadBits.html",
    "title": "Message.ReadBits Property | Riptide API Docs",
    "keywords": "Message.ReadBits Property Namespace: Riptide Assembly: RiptideNetworking.dll ReadBits How many bits have been retrieved from the message. public int ReadBits { get; } Property Value int"
  },
  "api/Riptide.Message.ReadLength.html": {
    "href": "api/Riptide.Message.ReadLength.html",
    "title": "Message.ReadLength Property | Riptide API Docs",
    "keywords": "Message.ReadLength Property Namespace: Riptide Assembly: RiptideNetworking.dll ReadLength How many bytes have been retrieved from the message. [Obsolete(\"Use ReadBits instead.\")] public int ReadLength { get; } Property Value int"
  },
  "api/Riptide.Message.Release.html": {
    "href": "api/Riptide.Message.Release.html",
    "title": "Message.Release Method | Riptide API Docs",
    "keywords": "Message.Release Method Namespace: Riptide Assembly: RiptideNetworking.dll Release() Returns the message instance to the internal pool so it can be reused. public void Release()"
  },
  "api/Riptide.Message.ReserveBits.html": {
    "href": "api/Riptide.Message.ReserveBits.html",
    "title": "Message.ReserveBits Method | Riptide API Docs",
    "keywords": "Message.ReserveBits Method Namespace: Riptide Assembly: RiptideNetworking.dll ReserveBits(int) Moves the message's internal write position by the given amount of bits, reserving them so they can be set at a later time. public Message ReserveBits(int amount) Parameters int amount The number of bits to reserve. Returns Message The message instance."
  },
  "api/Riptide.Message.SendMode.html": {
    "href": "api/Riptide.Message.SendMode.html",
    "title": "Message.SendMode Property | Riptide API Docs",
    "keywords": "Message.SendMode Property Namespace: Riptide Assembly: RiptideNetworking.dll SendMode The message's send mode. public MessageSendMode SendMode { get; } Property Value MessageSendMode"
  },
  "api/Riptide.Message.SetBits.html": {
    "href": "api/Riptide.Message.SetBits.html",
    "title": "Message.SetBits Method | Riptide API Docs",
    "keywords": "Message.SetBits Method Namespace: Riptide Assembly: RiptideNetworking.dll SetBits(ulong, int, int) Sets up to 64 bits at the specified position in the message. public Message SetBits(ulong bitfield, int amount, int startBit) Parameters ulong bitfield The bits to write into the message. int amount The number of bits to set. int startBit The bit position in the message at which to start writing. Returns Message The message instance. Remarks This method can be used to directly set a range of bits anywhere in the message without moving its internal write position. Data which was previously added to the message and which falls within the range of bits being set will be overwritten, meaning that improper use of this method will likely corrupt the message!"
  },
  "api/Riptide.Message.SkipBits.html": {
    "href": "api/Riptide.Message.SkipBits.html",
    "title": "Message.SkipBits Method | Riptide API Docs",
    "keywords": "Message.SkipBits Method Namespace: Riptide Assembly: RiptideNetworking.dll SkipBits(int) Moves the message's internal read position by the given amount of bits, skipping over them. public Message SkipBits(int amount) Parameters int amount The number of bits to skip. Returns Message The message instance."
  },
  "api/Riptide.Message.TrimPool.html": {
    "href": "api/Riptide.Message.TrimPool.html",
    "title": "Message.TrimPool Method | Riptide API Docs",
    "keywords": "Message.TrimPool Method Namespace: Riptide Assembly: RiptideNetworking.dll TrimPool() Trims the message pool to a more appropriate size for how many Server and/or Client instances are currently running. public static void TrimPool()"
  },
  "api/Riptide.Message.UnreadBits.html": {
    "href": "api/Riptide.Message.UnreadBits.html",
    "title": "Message.UnreadBits Property | Riptide API Docs",
    "keywords": "Message.UnreadBits Property Namespace: Riptide Assembly: RiptideNetworking.dll UnreadBits How many unretrieved bits remain in the message. public int UnreadBits { get; } Property Value int"
  },
  "api/Riptide.Message.UnreadLength.html": {
    "href": "api/Riptide.Message.UnreadLength.html",
    "title": "Message.UnreadLength Property | Riptide API Docs",
    "keywords": "Message.UnreadLength Property Namespace: Riptide Assembly: RiptideNetworking.dll UnreadLength How many more bytes can be retrieved from the message. [Obsolete(\"Use UnreadBits instead.\")] public int UnreadLength { get; } Property Value int"
  },
  "api/Riptide.Message.UnwrittenBits.html": {
    "href": "api/Riptide.Message.UnwrittenBits.html",
    "title": "Message.UnwrittenBits Property | Riptide API Docs",
    "keywords": "Message.UnwrittenBits Property Namespace: Riptide Assembly: RiptideNetworking.dll UnwrittenBits How many more bits can be added to the message. public int UnwrittenBits { get; } Property Value int"
  },
  "api/Riptide.Message.WrittenBits.html": {
    "href": "api/Riptide.Message.WrittenBits.html",
    "title": "Message.WrittenBits Property | Riptide API Docs",
    "keywords": "Message.WrittenBits Property Namespace: Riptide Assembly: RiptideNetworking.dll WrittenBits How many bits have been added to the message. public int WrittenBits { get; } Property Value int"
  },
  "api/Riptide.Message.WrittenLength.html": {
    "href": "api/Riptide.Message.WrittenLength.html",
    "title": "Message.WrittenLength Property | Riptide API Docs",
    "keywords": "Message.WrittenLength Property Namespace: Riptide Assembly: RiptideNetworking.dll WrittenLength How many bytes have been added to the message. [Obsolete(\"Use WrittenBits instead.\")] public int WrittenLength { get; } Property Value int"
  },
  "api/Riptide.Message.html": {
    "href": "api/Riptide.Message.html",
    "title": "Message Class | Riptide API Docs",
    "keywords": "Message Class Namespace: Riptide Assembly: RiptideNetworking.dll Provides functionality for converting data to bytes and vice versa. public class Message Inheritance object Message Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields MaxHeaderSize The maximum number of bits required for a message's header. Properties BytesInUse How many of this message's bytes are in use. Rounds up to the next byte because only whole bytes can be sent. InstancesPerPeer How many messages to add to the pool for each Server or Client instance that is started. MaxPayloadSize The maximum number of bytes of payload data that a message can contain. This value represents how many bytes can be added to a message on top of the MaxHeaderSize. MaxSize The maximum number of bytes that a message can contain, including the MaxHeaderSize. ReadBits How many bits have been retrieved from the message. ReadLength How many bytes have been retrieved from the message. SendMode The message's send mode. UnreadBits How many unretrieved bits remain in the message. UnreadLength How many more bytes can be retrieved from the message. UnwrittenBits How many more bits can be added to the message. WrittenBits How many bits have been added to the message. WrittenLength How many bytes have been added to the message. Methods Add(bool) Adds a bool to the message. Add(bool[], bool) Adds a bool array to the message. Add(byte) Adds a byte to the message. Add(byte[], bool) Adds a byte array to the message. Add(double) Adds a double to the message. Add(double[], bool) Adds a double array to the message. Add(short) Adds a short to the message. Add(short[], bool) Adds a short array to the message. Add(int) Adds an int to the message. Add(int[], bool) Adds an int array message. Add(long) Adds a long to the message. Add(long[], bool) Adds a long array to the message. Add(sbyte) Adds an sbyte to the message. Add(sbyte[], bool) Adds an sbyte array to the message. Add(float) Adds a float to the message. Add(float[], bool) Adds a float array to the message. Add(string) Adds a string to the message. Add(string[], bool) Adds a string array to the message. Add(ushort) Adds a ushort to the message. Add(ushort[], bool) Adds a ushort array to the message. Add(uint) Adds a uint to the message. Add(uint[], bool) Adds a uint array to the message. Add(ulong) Adds a ulong to the message. Add(ulong[], bool) Adds a ulong array to the message. AddBits(byte, int) Adds up to 8 of the given bits to the message. AddBits(ushort, int) Adds up to 16 of the given bits to the message. AddBits(uint, int) Adds up to 32 of the given bits to the message. AddBits(ulong, int) Adds up to 64 of the given bits to the message. AddBool(bool) Adds a bool to the message. AddBools(bool[], bool) Adds a bool array to the message. AddByte(byte) Adds a byte to the message. AddBytes(byte[], bool) Adds a byte array to the message. AddBytes(byte[], int, int, bool) Adds a byte array to the message. AddDouble(double) Adds a double to the message. AddDoubles(double[], bool) Adds a double array to the message. AddFloat(float) Adds a float to the message. AddFloats(float[], bool) Adds a float array to the message. AddInt(int) Adds an int to the message. AddInts(int[], bool) Adds an int array message. AddLong(long) Adds a long to the message. AddLongs(long[], bool) Adds a long array to the message. AddMessage(Message) Adds message's unread bits to the message. AddMessage(Message, int, int) Adds a range of bits from message to the message. AddSByte(sbyte) Adds an sbyte to the message. AddSBytes(sbyte[], bool) Adds an sbyte array to the message. AddSerializable<T>(T) Adds a serializable to the message. AddSerializables<T>(T[], bool) Adds an array of serializables to the message. AddShort(short) Adds a short to the message. AddShorts(short[], bool) Adds a short array to the message. AddString(string) Adds a string to the message. AddStrings(string[], bool) Adds a string array to the message. AddUInt(uint) Adds a uint to the message. AddUInts(uint[], bool) Adds a uint array to the message. AddULong(ulong) Adds a ulong to the message. AddULongs(ulong[], bool) Adds a ulong array to the message. AddUShort(ushort) Adds a ushort to the message. AddUShorts(ushort[], bool) Adds a ushort array to the message. AddVarLong(long) Adds a positive or negative number to the message, using fewer bits for smaller values. AddVarULong(ulong) Adds a positive number to the message, using fewer bits for smaller values. Add<T>(T) Adds a serializable to the message. Add<T>(T[], bool) Adds an array of serializables to the message. Create() Gets a completely empty message instance with no header. Create(MessageSendMode) Gets a message instance that can be used for sending. Create(MessageSendMode, Enum) Gets a message instance that can be used for sending. Create(MessageSendMode, ushort) Gets a message instance that can be used for sending. GetBits(int, out byte) Retrieves the next amount bits (up to 8) from the message. GetBits(int, out ushort) Retrieves the next amount bits (up to 16) from the message. GetBits(int, out uint) Retrieves the next amount bits (up to 32) from the message. GetBits(int, out ulong) Retrieves the next amount bits (up to 64) from the message. GetBool() Retrieves a bool from the message. GetBools() Retrieves a bool array from the message. GetBools(bool[], int) Populates a bool array with bools retrieved from the message. GetBools(int) Retrieves a bool array from the message. GetBools(int, bool[], int) Populates a bool array with bools retrieved from the message. GetByte() Retrieves a byte from the message. GetBytes() Retrieves a byte array from the message. GetBytes(byte[], int) Populates a byte array with bytes retrieved from the message. GetBytes(int) Retrieves a byte array from the message. GetBytes(int, byte[], int) Populates a byte array with bytes retrieved from the message. GetDouble() Retrieves a double from the message. GetDoubles() Retrieves a double array from the message. GetDoubles(double[], int) Populates a double array with doubles retrieved from the message. GetDoubles(int) Retrieves a double array from the message. GetDoubles(int, double[], int) Populates a double array with doubles retrieved from the message. GetFloat() Retrieves a float from the message. GetFloats() Retrieves a float array from the message. GetFloats(int) Retrieves a float array from the message. GetFloats(int, float[], int) Populates a float array with floats retrieved from the message. GetFloats(float[], int) Populates a float array with floats retrieved from the message. GetInt() Retrieves an int from the message. GetInts() Retrieves an int array from the message. GetInts(int) Retrieves an int array from the message. GetInts(int, int[], int) Populates an int array with ints retrieved from the message. GetInts(int[], int) Populates an int array with ints retrieved from the message. GetLong() Retrieves a long from the message. GetLongs() Retrieves a long array from the message. GetLongs(int) Retrieves a long array from the message. GetLongs(int, long[], int) Populates a long array with longs retrieved from the message. GetLongs(long[], int) Populates a long array with longs retrieved from the message. GetSByte() Retrieves an sbyte from the message. GetSBytes() Retrieves an sbyte array from the message. GetSBytes(int) Retrieves an sbyte array from the message. GetSBytes(int, sbyte[], int) Populates a sbyte array with bytes retrieved from the message. GetSBytes(sbyte[], int) Populates a sbyte array with bytes retrieved from the message. GetSerializable<T>() Retrieves a serializable from the message. GetSerializables<T>() Retrieves an array of serializables from the message. GetSerializables<T>(int) Retrieves an array of serializables from the message. GetSerializables<T>(int, T[], int) Populates an array of serializables retrieved from the message. GetSerializables<T>(T[], int) Populates an array of serializables retrieved from the message. GetShort() Retrieves a short from the message. GetShorts() Retrieves a short array from the message. GetShorts(short[], int) Populates a short array with shorts retrieved from the message. GetShorts(int) Retrieves a short array from the message. GetShorts(int, short[], int) Populates a short array with shorts retrieved from the message. GetString() Retrieves a string from the message. GetStrings() Retrieves a string array from the message. GetStrings(int) Retrieves a string array from the message. GetStrings(int, string[], int) Populates a string array with strings retrieved from the message. GetStrings(string[], int) Populates a string array with strings retrieved from the message. GetUInt() Retrieves a uint from the message. GetUInts() Retrieves a uint array from the message. GetUInts(int) Retrieves a uint array from the message. GetUInts(int, uint[], int) Populates a uint array with uints retrieved from the message. GetUInts(uint[], int) Populates a uint array with uints retrieved from the message. GetULong() Retrieves a ulong from the message. GetULongs() Retrieves a ulong array from the message. GetULongs(int) Retrieves a ulong array from the message. GetULongs(int, ulong[], int) Populates a ulong array with ulongs retrieved from the message. GetULongs(ulong[], int) Populates a ulong array with ulongs retrieved from the message. GetUShort() Retrieves a ushort from the message. GetUShorts() Retrieves a ushort array from the message. GetUShorts(int) Retrieves a ushort array from the message. GetUShorts(int, ushort[], int) Populates a ushort array with ushorts retrieved from the message. GetUShorts(ushort[], int) Populates a ushort array with ushorts retrieved from the message. GetVarLong() Retrieves a positive or negative number from the message, using fewer bits for smaller values. GetVarULong() Retrieves a positive number from the message, using fewer bits for smaller values. PeekBits(int, int, out byte) Retrieves up to 8 bits from the specified position in the message. PeekBits(int, int, out ushort) Retrieves up to 16 bits from the specified position in the message. PeekBits(int, int, out uint) Retrieves up to 32 bits from the specified position in the message. PeekBits(int, int, out ulong) Retrieves up to 64 bits from the specified position in the message. Release() Returns the message instance to the internal pool so it can be reused. ReserveBits(int) Moves the message's internal write position by the given amount of bits, reserving them so they can be set at a later time. SetBits(ulong, int, int) Sets up to 64 bits at the specified position in the message. SkipBits(int) Moves the message's internal read position by the given amount of bits, skipping over them. TrimPool() Trims the message pool to a more appropriate size for how many Server and/or Client instances are currently running."
  },
  "api/Riptide.MessageHandlerAttribute.-ctor.html": {
    "href": "api/Riptide.MessageHandlerAttribute.-ctor.html",
    "title": "MessageHandlerAttribute Constructor | Riptide API Docs",
    "keywords": "MessageHandlerAttribute Constructor Namespace: Riptide Assembly: RiptideNetworking.dll MessageHandlerAttribute(ushort, byte) Initializes a new instance of the MessageHandlerAttribute class with the messageId and groupId values. public MessageHandlerAttribute(ushort messageId, byte groupId = 0) Parameters ushort messageId The ID of the message type which this method is meant to handle. byte groupId The ID of the group of message handlers which this method belongs to. Remarks Servers will only use this method if its signature matches the Server.MessageHandler signature. Clients will only use this method if its signature matches the Client.MessageHandler signature. This method will be ignored if its signature matches neither of the valid message handler signatures."
  },
  "api/Riptide.MessageHandlerAttribute.GroupId.html": {
    "href": "api/Riptide.MessageHandlerAttribute.GroupId.html",
    "title": "MessageHandlerAttribute.GroupId Field | Riptide API Docs",
    "keywords": "MessageHandlerAttribute.GroupId Field Namespace: Riptide Assembly: RiptideNetworking.dll The ID of the group of message handlers which this method belongs to. public readonly byte GroupId Returns byte"
  },
  "api/Riptide.MessageHandlerAttribute.MessageId.html": {
    "href": "api/Riptide.MessageHandlerAttribute.MessageId.html",
    "title": "MessageHandlerAttribute.MessageId Field | Riptide API Docs",
    "keywords": "MessageHandlerAttribute.MessageId Field Namespace: Riptide Assembly: RiptideNetworking.dll The ID of the message type which this method is meant to handle. public readonly ushort MessageId Returns ushort"
  },
  "api/Riptide.MessageHandlerAttribute.html": {
    "href": "api/Riptide.MessageHandlerAttribute.html",
    "title": "MessageHandlerAttribute Class | Riptide API Docs",
    "keywords": "MessageHandlerAttribute Class Namespace: Riptide Assembly: RiptideNetworking.dll Specifies a method as the message handler for messages with the given ID. [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)] public sealed class MessageHandlerAttribute : Attribute Inheritance object Attribute MessageHandlerAttribute Remarks In order for a method to qualify as a message handler, it must match a valid message handler method signature. Servers will only use methods marked with this attribute if they match the Server.MessageHandler signature, and Clients will only use methods marked with this attribute if they match the Client.MessageHandler signature. Methods marked with this attribute which match neither of the valid message handler signatures will not be used by Servers or Clients and will cause warnings at runtime. If you want a Server or Client to only use a subset of all message handler methods, you can do so by setting up custom message handler groups. Simply set the group ID in the MessageHandlerAttribute(ushort, byte) constructor and pass the same value to the Start(ushort, ushort, byte, bool) or Connect(string, int, byte, Message, bool) method. This will make that Server or Client only use message handlers which have the same group ID. Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors MessageHandlerAttribute(ushort, byte) Initializes a new instance of the MessageHandlerAttribute class with the messageId and groupId values. Fields GroupId The ID of the group of message handlers which this method belongs to. MessageId The ID of the message type which this method is meant to handle."
  },
  "api/Riptide.MessageReceivedEventArgs.-ctor.html": {
    "href": "api/Riptide.MessageReceivedEventArgs.-ctor.html",
    "title": "MessageReceivedEventArgs Constructor | Riptide API Docs",
    "keywords": "MessageReceivedEventArgs Constructor Namespace: Riptide Assembly: RiptideNetworking.dll MessageReceivedEventArgs(Connection, ushort, Message) Initializes event data. public MessageReceivedEventArgs(Connection fromConnection, ushort messageId, Message message) Parameters Connection fromConnection The connection from which the message was received. ushort messageId The ID of the message. Message message The received message."
  },
  "api/Riptide.MessageReceivedEventArgs.FromConnection.html": {
    "href": "api/Riptide.MessageReceivedEventArgs.FromConnection.html",
    "title": "MessageReceivedEventArgs.FromConnection Field | Riptide API Docs",
    "keywords": "MessageReceivedEventArgs.FromConnection Field Namespace: Riptide Assembly: RiptideNetworking.dll The connection from which the message was received. public readonly Connection FromConnection Returns Connection"
  },
  "api/Riptide.MessageReceivedEventArgs.Message.html": {
    "href": "api/Riptide.MessageReceivedEventArgs.Message.html",
    "title": "MessageReceivedEventArgs.Message Field | Riptide API Docs",
    "keywords": "MessageReceivedEventArgs.Message Field Namespace: Riptide Assembly: RiptideNetworking.dll The received message. public readonly Message Message Returns Message"
  },
  "api/Riptide.MessageReceivedEventArgs.MessageId.html": {
    "href": "api/Riptide.MessageReceivedEventArgs.MessageId.html",
    "title": "MessageReceivedEventArgs.MessageId Field | Riptide API Docs",
    "keywords": "MessageReceivedEventArgs.MessageId Field Namespace: Riptide Assembly: RiptideNetworking.dll The ID of the message. public readonly ushort MessageId Returns ushort"
  },
  "api/Riptide.MessageReceivedEventArgs.html": {
    "href": "api/Riptide.MessageReceivedEventArgs.html",
    "title": "MessageReceivedEventArgs Class | Riptide API Docs",
    "keywords": "MessageReceivedEventArgs Class Namespace: Riptide Assembly: RiptideNetworking.dll Contains event data for when a message is received. public class MessageReceivedEventArgs : EventArgs Inheritance object EventArgs MessageReceivedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MessageReceivedEventArgs(Connection, ushort, Message) Initializes event data. Fields FromConnection The connection from which the message was received. Message The received message. MessageId The ID of the message."
  },
  "api/Riptide.MessageRelayFilter.-ctor.html": {
    "href": "api/Riptide.MessageRelayFilter.-ctor.html",
    "title": "MessageRelayFilter Constructor | Riptide API Docs",
    "keywords": "MessageRelayFilter Constructor Namespace: Riptide Assembly: RiptideNetworking.dll Overloads MessageRelayFilter(int) Creates a filter of a given size. MessageRelayFilter(Type) Creates a filter based on an enum of message IDs. MessageRelayFilter(int, params ushort[]) Creates a filter of a given size and enables relaying for the given message IDs. MessageRelayFilter(Type, params Enum[]) Creates a filter based on an enum of message IDs and enables relaying for the given message IDs. MessageRelayFilter(int) Creates a filter of a given size. public MessageRelayFilter(int size) Parameters int size How big to make the filter. Remarks size should be set to the value of the largest message ID, plus 1. For example, if a server will handle messages with IDs 1, 2, 3, 7, and 8, size should be set to 9 (8 is the largest possible value, and 8 + 1 = 9) despite the fact that there are only 5 unique message IDs the server will ever handle. MessageRelayFilter(Type) Creates a filter based on an enum of message IDs. public MessageRelayFilter(Type idEnum) Parameters Type idEnum The enum type. MessageRelayFilter(int, params ushort[]) Creates a filter of a given size and enables relaying for the given message IDs. public MessageRelayFilter(int size, params ushort[] idsToEnable) Parameters int size How big to make the filter. ushort[] idsToEnable Message IDs to enable auto relaying for. Remarks size should be set to the value of the largest message ID, plus 1. For example, if a server will handle messages with IDs 1, 2, 3, 7, and 8, size should be set to 9 (8 is the largest possible value, and 8 + 1 = 9) despite the fact that there are only 5 unique message IDs the server will ever handle. MessageRelayFilter(Type, params Enum[]) Creates a filter based on an enum of message IDs and enables relaying for the given message IDs. public MessageRelayFilter(Type idEnum, params Enum[] idsToEnable) Parameters Type idEnum The enum type. Enum[] idsToEnable Message IDs to enable relaying for."
  },
  "api/Riptide.MessageRelayFilter.DisableRelay.html": {
    "href": "api/Riptide.MessageRelayFilter.DisableRelay.html",
    "title": "MessageRelayFilter.DisableRelay Method | Riptide API Docs",
    "keywords": "MessageRelayFilter.DisableRelay Method Namespace: Riptide Assembly: RiptideNetworking.dll Overloads DisableRelay(ushort) Disables auto relaying for the given message ID. DisableRelay(Enum) Disables auto relaying for the given message ID. DisableRelay(ushort) Disables auto relaying for the given message ID. public void DisableRelay(ushort forMessageId) Parameters ushort forMessageId The message ID to enable relaying for. DisableRelay(Enum) Disables auto relaying for the given message ID. public void DisableRelay(Enum forMessageId) Parameters Enum forMessageId The message ID to enable relaying for."
  },
  "api/Riptide.MessageRelayFilter.EnableRelay.html": {
    "href": "api/Riptide.MessageRelayFilter.EnableRelay.html",
    "title": "MessageRelayFilter.EnableRelay Method | Riptide API Docs",
    "keywords": "MessageRelayFilter.EnableRelay Method Namespace: Riptide Assembly: RiptideNetworking.dll Overloads EnableRelay(ushort) Enables auto relaying for the given message ID. EnableRelay(Enum) Enables auto relaying for the given message ID. EnableRelay(ushort) Enables auto relaying for the given message ID. public void EnableRelay(ushort forMessageId) Parameters ushort forMessageId The message ID to enable relaying for. EnableRelay(Enum) Enables auto relaying for the given message ID. public void EnableRelay(Enum forMessageId) Parameters Enum forMessageId The message ID to enable relaying for."
  },
  "api/Riptide.MessageRelayFilter.html": {
    "href": "api/Riptide.MessageRelayFilter.html",
    "title": "MessageRelayFilter Class | Riptide API Docs",
    "keywords": "MessageRelayFilter Class Namespace: Riptide Assembly: RiptideNetworking.dll Provides functionality for enabling/disabling automatic message relaying by message type. public class MessageRelayFilter Inheritance object MessageRelayFilter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MessageRelayFilter(int) Creates a filter of a given size. MessageRelayFilter(int, params ushort[]) Creates a filter of a given size and enables relaying for the given message IDs. MessageRelayFilter(Type) Creates a filter based on an enum of message IDs. MessageRelayFilter(Type, params Enum[]) Creates a filter based on an enum of message IDs and enables relaying for the given message IDs. Methods DisableRelay(Enum) Disables auto relaying for the given message ID. DisableRelay(ushort) Disables auto relaying for the given message ID. EnableRelay(Enum) Enables auto relaying for the given message ID. EnableRelay(ushort) Enables auto relaying for the given message ID."
  },
  "api/Riptide.MessageSendMode.html": {
    "href": "api/Riptide.MessageSendMode.html",
    "title": "MessageSendMode Enum | Riptide API Docs",
    "keywords": "MessageSendMode Enum Namespace: Riptide Assembly: RiptideNetworking.dll The send mode of a Message. public enum MessageSendMode : byte Remarks For more information about the different message send modes and how they all work, see the Message Send Modes Explained article. Fields Notify Guarantees order but not delivery. Notifies the sender of what happened via the NotifyDelivered and NotifyLost events. The receiver must handle notify messages via the NotifyReceived event, which is different from the other two send modes. Unreliable Guarantees neither delivery nor order. Reliable Guarantees delivery but not order."
  },
  "api/Riptide.NonStaticHandlerException.-ctor.html": {
    "href": "api/Riptide.NonStaticHandlerException.-ctor.html",
    "title": "NonStaticHandlerException Constructor | Riptide API Docs",
    "keywords": "NonStaticHandlerException Constructor Namespace: Riptide Assembly: RiptideNetworking.dll Overloads NonStaticHandlerException() Initializes a new NonStaticHandlerException instance. NonStaticHandlerException(string) Initializes a new NonStaticHandlerException instance with a specified error message. NonStaticHandlerException(string, Exception) Initializes a new NonStaticHandlerException instance with a specified error message and a reference to the inner exception that is the cause of this exception. NonStaticHandlerException(Type, string) Initializes a new NonStaticHandlerException instance and constructs an error message from the given information. NonStaticHandlerException() Initializes a new NonStaticHandlerException instance. public NonStaticHandlerException() NonStaticHandlerException(string) Initializes a new NonStaticHandlerException instance with a specified error message. public NonStaticHandlerException(string message) Parameters string message The error message that explains the reason for the exception. NonStaticHandlerException(string, Exception) Initializes a new NonStaticHandlerException instance with a specified error message and a reference to the inner exception that is the cause of this exception. public NonStaticHandlerException(string message, Exception inner) Parameters string message The error message that explains the reason for the exception. Exception inner The exception that is the cause of the current exception. If inner is not a null reference, the current exception is raised in a catch block that handles the inner exception. NonStaticHandlerException(Type, string) Initializes a new NonStaticHandlerException instance and constructs an error message from the given information. public NonStaticHandlerException(Type declaringType, string handlerMethodName) Parameters Type declaringType The type containing the handler method. string handlerMethodName The name of the handler method."
  },
  "api/Riptide.NonStaticHandlerException.DeclaringType.html": {
    "href": "api/Riptide.NonStaticHandlerException.DeclaringType.html",
    "title": "NonStaticHandlerException.DeclaringType Field | Riptide API Docs",
    "keywords": "NonStaticHandlerException.DeclaringType Field Namespace: Riptide Assembly: RiptideNetworking.dll The type containing the handler method. public readonly Type DeclaringType Returns Type"
  },
  "api/Riptide.NonStaticHandlerException.HandlerMethodName.html": {
    "href": "api/Riptide.NonStaticHandlerException.HandlerMethodName.html",
    "title": "NonStaticHandlerException.HandlerMethodName Field | Riptide API Docs",
    "keywords": "NonStaticHandlerException.HandlerMethodName Field Namespace: Riptide Assembly: RiptideNetworking.dll The name of the handler method. public readonly string HandlerMethodName Returns string"
  },
  "api/Riptide.NonStaticHandlerException.html": {
    "href": "api/Riptide.NonStaticHandlerException.html",
    "title": "NonStaticHandlerException Class | Riptide API Docs",
    "keywords": "NonStaticHandlerException Class Namespace: Riptide Assembly: RiptideNetworking.dll The exception that is thrown when a method with a MessageHandlerAttribute is not marked as static. public class NonStaticHandlerException : Exception, ISerializable Inheritance object Exception NonStaticHandlerException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors NonStaticHandlerException() Initializes a new NonStaticHandlerException instance. NonStaticHandlerException(string) Initializes a new NonStaticHandlerException instance with a specified error message. NonStaticHandlerException(string, Exception) Initializes a new NonStaticHandlerException instance with a specified error message and a reference to the inner exception that is the cause of this exception. NonStaticHandlerException(Type, string) Initializes a new NonStaticHandlerException instance and constructs an error message from the given information. Fields DeclaringType The type containing the handler method. HandlerMethodName The name of the handler method."
  },
  "api/Riptide.Peer.-ctor.html": {
    "href": "api/Riptide.Peer.-ctor.html",
    "title": "Peer Constructor | Riptide API Docs",
    "keywords": "Peer Constructor Namespace: Riptide Assembly: RiptideNetworking.dll Peer(string) Initializes the peer. public Peer(string logName) Parameters string logName The name to use when logging messages via RiptideLogger."
  },
  "api/Riptide.Peer.CreateMessageHandlersDictionary.html": {
    "href": "api/Riptide.Peer.CreateMessageHandlersDictionary.html",
    "title": "Peer.CreateMessageHandlersDictionary Method | Riptide API Docs",
    "keywords": "Peer.CreateMessageHandlersDictionary Method Namespace: Riptide Assembly: RiptideNetworking.dll CreateMessageHandlersDictionary(byte) Builds a dictionary of message IDs and their corresponding message handler methods. protected abstract void CreateMessageHandlersDictionary(byte messageHandlerGroupId) Parameters byte messageHandlerGroupId The ID of the group of message handler methods to include in the dictionary."
  },
  "api/Riptide.Peer.DecreaseActiveCount.html": {
    "href": "api/Riptide.Peer.DecreaseActiveCount.html",
    "title": "Peer.DecreaseActiveCount Method | Riptide API Docs",
    "keywords": "Peer.DecreaseActiveCount Method Namespace: Riptide Assembly: RiptideNetworking.dll DecreaseActiveCount() Decreases ActiveCount. For use when a Server or Client is stopped. protected static void DecreaseActiveCount()"
  },
  "api/Riptide.Peer.FindMessageHandlers.html": {
    "href": "api/Riptide.Peer.FindMessageHandlers.html",
    "title": "Peer.FindMessageHandlers Method | Riptide API Docs",
    "keywords": "Peer.FindMessageHandlers Method Namespace: Riptide Assembly: RiptideNetworking.dll FindMessageHandlers() Retrieves methods marked with MessageHandlerAttribute. protected MethodInfo[] FindMessageHandlers() Returns MethodInfo[] An array containing message handler methods."
  },
  "api/Riptide.Peer.Handle.html": {
    "href": "api/Riptide.Peer.Handle.html",
    "title": "Peer.Handle Method | Riptide API Docs",
    "keywords": "Peer.Handle Method Namespace: Riptide Assembly: RiptideNetworking.dll Handle(Message, MessageHeader, Connection) Handles a message. protected abstract void Handle(Message message, MessageHeader header, Connection connection) Parameters Message message The message to handle. MessageHeader header The message's header type. Connection connection The connection which the message was received on."
  },
  "api/Riptide.Peer.HandleData.html": {
    "href": "api/Riptide.Peer.HandleData.html",
    "title": "Peer.HandleData Method | Riptide API Docs",
    "keywords": "Peer.HandleData Method Namespace: Riptide Assembly: RiptideNetworking.dll HandleData(object, DataReceivedEventArgs) Handles data received by the transport. protected void HandleData(object _, DataReceivedEventArgs e) Parameters object _ DataReceivedEventArgs e"
  },
  "api/Riptide.Peer.HandleMessages.html": {
    "href": "api/Riptide.Peer.HandleMessages.html",
    "title": "Peer.HandleMessages Method | Riptide API Docs",
    "keywords": "Peer.HandleMessages Method Namespace: Riptide Assembly: RiptideNetworking.dll HandleMessages() Handles all queued messages. protected void HandleMessages()"
  },
  "api/Riptide.Peer.HeartbeatInterval.html": {
    "href": "api/Riptide.Peer.HeartbeatInterval.html",
    "title": "Peer.HeartbeatInterval Property | Riptide API Docs",
    "keywords": "Peer.HeartbeatInterval Property Namespace: Riptide Assembly: RiptideNetworking.dll HeartbeatInterval The interval (in milliseconds) at which to send and expect heartbeats to be received. public int HeartbeatInterval { get; set; } Property Value int Remarks Changes to this value will only take effect after the next heartbeat is executed."
  },
  "api/Riptide.Peer.IncreaseActiveCount.html": {
    "href": "api/Riptide.Peer.IncreaseActiveCount.html",
    "title": "Peer.IncreaseActiveCount Method | Riptide API Docs",
    "keywords": "Peer.IncreaseActiveCount Method Namespace: Riptide Assembly: RiptideNetworking.dll IncreaseActiveCount() Increases ActiveCount. For use when a new Server or Client is started. protected static void IncreaseActiveCount()"
  },
  "api/Riptide.Peer.LogName.html": {
    "href": "api/Riptide.Peer.LogName.html",
    "title": "Peer.LogName Field | Riptide API Docs",
    "keywords": "Peer.LogName Field Namespace: Riptide Assembly: RiptideNetworking.dll The name to use when logging messages via RiptideLogger. public readonly string LogName Returns string"
  },
  "api/Riptide.Peer.StartTime.html": {
    "href": "api/Riptide.Peer.StartTime.html",
    "title": "Peer.StartTime Method | Riptide API Docs",
    "keywords": "Peer.StartTime Method Namespace: Riptide Assembly: RiptideNetworking.dll StartTime() Starts tracking how much time has passed. protected void StartTime()"
  },
  "api/Riptide.Peer.StopTime.html": {
    "href": "api/Riptide.Peer.StopTime.html",
    "title": "Peer.StopTime Method | Riptide API Docs",
    "keywords": "Peer.StopTime Method Namespace: Riptide Assembly: RiptideNetworking.dll StopTime() Stops tracking how much time has passed. protected void StopTime()"
  },
  "api/Riptide.Peer.TimeoutTime.html": {
    "href": "api/Riptide.Peer.TimeoutTime.html",
    "title": "Peer.TimeoutTime Property | Riptide API Docs",
    "keywords": "Peer.TimeoutTime Property Namespace: Riptide Assembly: RiptideNetworking.dll TimeoutTime Sets the relevant connections' TimeoutTimes. public abstract int TimeoutTime { set; } Property Value int"
  },
  "api/Riptide.Peer.Update.html": {
    "href": "api/Riptide.Peer.Update.html",
    "title": "Peer.Update Method | Riptide API Docs",
    "keywords": "Peer.Update Method Namespace: Riptide Assembly: RiptideNetworking.dll Update() Handles any received messages and invokes any delayed events which need to be invoked. public virtual void Update()"
  },
  "api/Riptide.Peer.defaultTimeout.html": {
    "href": "api/Riptide.Peer.defaultTimeout.html",
    "title": "Peer.defaultTimeout Field | Riptide API Docs",
    "keywords": "Peer.defaultTimeout Field Namespace: Riptide Assembly: RiptideNetworking.dll The default time (in milliseconds) after which to disconnect if no heartbeats are received. protected int defaultTimeout Returns int"
  },
  "api/Riptide.Peer.html": {
    "href": "api/Riptide.Peer.html",
    "title": "Peer Class | Riptide API Docs",
    "keywords": "Peer Class Namespace: Riptide Assembly: RiptideNetworking.dll Provides base functionality for Server and Client. public abstract class Peer Inheritance object Peer Client Server Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Peer(string) Initializes the peer. Fields LogName The name to use when logging messages via RiptideLogger. defaultTimeout The default time (in milliseconds) after which to disconnect if no heartbeats are received. useMessageHandlers Whether or not the peer should use the built-in message handler system. Properties HeartbeatInterval The interval (in milliseconds) at which to send and expect heartbeats to be received. TimeoutTime Sets the relevant connections' TimeoutTimes. Methods CreateMessageHandlersDictionary(byte) Builds a dictionary of message IDs and their corresponding message handler methods. DecreaseActiveCount() Decreases ActiveCount. For use when a Server or Client is stopped. FindMessageHandlers() Retrieves methods marked with MessageHandlerAttribute. Handle(Message, MessageHeader, Connection) Handles a message. HandleData(object, DataReceivedEventArgs) Handles data received by the transport. HandleMessages() Handles all queued messages. IncreaseActiveCount() Increases ActiveCount. For use when a new Server or Client is started. StartTime() Starts tracking how much time has passed. StopTime() Stops tracking how much time has passed. Update() Handles any received messages and invokes any delayed events which need to be invoked."
  },
  "api/Riptide.Peer.useMessageHandlers.html": {
    "href": "api/Riptide.Peer.useMessageHandlers.html",
    "title": "Peer.useMessageHandlers Field | Riptide API Docs",
    "keywords": "Peer.useMessageHandlers Field Namespace: Riptide Assembly: RiptideNetworking.dll Whether or not the peer should use the built-in message handler system. protected bool useMessageHandlers Returns bool"
  },
  "api/Riptide.RejectReason.html": {
    "href": "api/Riptide.RejectReason.html",
    "title": "RejectReason Enum | Riptide API Docs",
    "keywords": "RejectReason Enum Namespace: Riptide Assembly: RiptideNetworking.dll The reason the connection attempt was rejected. public enum RejectReason : byte Fields NoConnection No response was received from the server (because the client has no internet connection, the server is offline, no server is listening on the target endpoint, etc.). AlreadyConnected The client is already connected. ServerFull The server is full. Rejected The connection attempt was rejected. Custom The connection attempt was rejected and custom data may have been included with the rejection message."
  },
  "api/Riptide.Server.-ctor.html": {
    "href": "api/Riptide.Server.-ctor.html",
    "title": "Server Constructor | Riptide API Docs",
    "keywords": "Server Constructor Namespace: Riptide Assembly: RiptideNetworking.dll Overloads Server(IServer, string) Handles initial setup. Server(string) Handles initial setup using the built-in UDP transport. Server(IServer, string) Handles initial setup. public Server(IServer transport, string logName = \"SERVER\") Parameters IServer transport The transport to use for sending and receiving data. string logName The name to use when logging messages via RiptideLogger. Server(string) Handles initial setup using the built-in UDP transport. public Server(string logName = \"SERVER\") Parameters string logName The name to use when logging messages via RiptideLogger."
  },
  "api/Riptide.Server.Accept.html": {
    "href": "api/Riptide.Server.Accept.html",
    "title": "Server.Accept Method | Riptide API Docs",
    "keywords": "Server.Accept Method Namespace: Riptide Assembly: RiptideNetworking.dll Accept(Connection) Accepts the given pending connection. public void Accept(Connection connection) Parameters Connection connection The connection to accept."
  },
  "api/Riptide.Server.ChangeTransport.html": {
    "href": "api/Riptide.Server.ChangeTransport.html",
    "title": "Server.ChangeTransport Method | Riptide API Docs",
    "keywords": "Server.ChangeTransport Method Namespace: Riptide Assembly: RiptideNetworking.dll ChangeTransport(IServer) Stops the server if it's running and swaps out the transport it's using. public void ChangeTransport(IServer newTransport) Parameters IServer newTransport The new underlying transport server to use for sending and receiving data. Remarks This method does not automatically restart the server. To continue accepting connections, Start(ushort, ushort, byte, bool) must be called again."
  },
  "api/Riptide.Server.ClientConnected.html": {
    "href": "api/Riptide.Server.ClientConnected.html",
    "title": "Server.ClientConnected Event | Riptide API Docs",
    "keywords": "Server.ClientConnected Event Namespace: Riptide Assembly: RiptideNetworking.dll Invoked when a client connects. public event EventHandler<ServerConnectedEventArgs> ClientConnected Returns EventHandler<ServerConnectedEventArgs>"
  },
  "api/Riptide.Server.ClientCount.html": {
    "href": "api/Riptide.Server.ClientCount.html",
    "title": "Server.ClientCount Property | Riptide API Docs",
    "keywords": "Server.ClientCount Property Namespace: Riptide Assembly: RiptideNetworking.dll ClientCount The number of currently connected clients. public int ClientCount { get; } Property Value int"
  },
  "api/Riptide.Server.ClientDisconnected.html": {
    "href": "api/Riptide.Server.ClientDisconnected.html",
    "title": "Server.ClientDisconnected Event | Riptide API Docs",
    "keywords": "Server.ClientDisconnected Event Namespace: Riptide Assembly: RiptideNetworking.dll Invoked when a client disconnects. public event EventHandler<ServerDisconnectedEventArgs> ClientDisconnected Returns EventHandler<ServerDisconnectedEventArgs>"
  },
  "api/Riptide.Server.Clients.html": {
    "href": "api/Riptide.Server.Clients.html",
    "title": "Server.Clients Property | Riptide API Docs",
    "keywords": "Server.Clients Property Namespace: Riptide Assembly: RiptideNetworking.dll Clients An array of all the currently connected clients. public Connection[] Clients { get; } Property Value Connection[] Remarks The position of each Connection instance in the array does not correspond to that client's numeric ID (except by coincidence)."
  },
  "api/Riptide.Server.ConnectionAttemptHandler.html": {
    "href": "api/Riptide.Server.ConnectionAttemptHandler.html",
    "title": "Server.ConnectionAttemptHandler Delegate | Riptide API Docs",
    "keywords": "Server.ConnectionAttemptHandler Delegate Namespace: Riptide Assembly: RiptideNetworking.dll Encapsulates a method that determines whether or not to accept a client's connection attempt. public delegate void Server.ConnectionAttemptHandler(Connection pendingConnection, Message connectMessage) Parameters Connection pendingConnection Message connectMessage"
  },
  "api/Riptide.Server.ConnectionFailed.html": {
    "href": "api/Riptide.Server.ConnectionFailed.html",
    "title": "Server.ConnectionFailed Event | Riptide API Docs",
    "keywords": "Server.ConnectionFailed Event Namespace: Riptide Assembly: RiptideNetworking.dll Invoked when a connection fails to be fully established. public event EventHandler<ServerConnectionFailedEventArgs> ConnectionFailed Returns EventHandler<ServerConnectionFailedEventArgs>"
  },
  "api/Riptide.Server.CreateMessageHandlersDictionary.html": {
    "href": "api/Riptide.Server.CreateMessageHandlersDictionary.html",
    "title": "Server.CreateMessageHandlersDictionary Method | Riptide API Docs",
    "keywords": "Server.CreateMessageHandlersDictionary Method Namespace: Riptide Assembly: RiptideNetworking.dll CreateMessageHandlersDictionary(byte) Builds a dictionary of message IDs and their corresponding message handler methods. protected override void CreateMessageHandlersDictionary(byte messageHandlerGroupId) Parameters byte messageHandlerGroupId The ID of the group of message handler methods to include in the dictionary. Overrides Peer.CreateMessageHandlersDictionary(byte)"
  },
  "api/Riptide.Server.DisconnectClient.html": {
    "href": "api/Riptide.Server.DisconnectClient.html",
    "title": "Server.DisconnectClient Method | Riptide API Docs",
    "keywords": "Server.DisconnectClient Method Namespace: Riptide Assembly: RiptideNetworking.dll Overloads DisconnectClient(ushort, Message) Disconnects a specific client. DisconnectClient(Connection, Message) Disconnects the given client. DisconnectClient(ushort, Message) Disconnects a specific client. public void DisconnectClient(ushort id, Message message = null) Parameters ushort id The numeric ID of the client to disconnect. Message message Data that should be sent to the client being disconnected. Use Create() to get an empty message instance. DisconnectClient(Connection, Message) Disconnects the given client. public void DisconnectClient(Connection client, Message message = null) Parameters Connection client The client to disconnect. Message message Data that should be sent to the client being disconnected. Use Create() to get an empty message instance."
  },
  "api/Riptide.Server.Handle.html": {
    "href": "api/Riptide.Server.Handle.html",
    "title": "Server.Handle Method | Riptide API Docs",
    "keywords": "Server.Handle Method Namespace: Riptide Assembly: RiptideNetworking.dll Handle(Message, MessageHeader, Connection) Handles a message. protected override void Handle(Message message, MessageHeader header, Connection connection) Parameters Message message The message to handle. MessageHeader header The message's header type. Connection connection The connection which the message was received on. Overrides Peer.Handle(Message, MessageHeader, Connection)"
  },
  "api/Riptide.Server.HandleConnection.html": {
    "href": "api/Riptide.Server.HandleConnection.html",
    "title": "Server.HandleConnection Field | Riptide API Docs",
    "keywords": "Server.HandleConnection Field Namespace: Riptide Assembly: RiptideNetworking.dll An optional method which determines whether or not to accept a client's connection attempt. public Server.ConnectionAttemptHandler HandleConnection Returns Server.ConnectionAttemptHandler Remarks The Connection parameter is the pending connection and the Message parameter is a message containing any additional data the client included with the connection attempt. If you choose to subscribe a method to this delegate, you should use it to call either Accept(Connection) or Reject(Connection, Message). Not doing so will result in the connection hanging until the client times out."
  },
  "api/Riptide.Server.IsRunning.html": {
    "href": "api/Riptide.Server.IsRunning.html",
    "title": "Server.IsRunning Property | Riptide API Docs",
    "keywords": "Server.IsRunning Property Namespace: Riptide Assembly: RiptideNetworking.dll IsRunning Whether or not the server is currently running. public bool IsRunning { get; } Property Value bool"
  },
  "api/Riptide.Server.MaxClientCount.html": {
    "href": "api/Riptide.Server.MaxClientCount.html",
    "title": "Server.MaxClientCount Property | Riptide API Docs",
    "keywords": "Server.MaxClientCount Property Namespace: Riptide Assembly: RiptideNetworking.dll MaxClientCount The maximum number of concurrent connections. public ushort MaxClientCount { get; } Property Value ushort"
  },
  "api/Riptide.Server.MessageHandler.html": {
    "href": "api/Riptide.Server.MessageHandler.html",
    "title": "Server.MessageHandler Delegate | Riptide API Docs",
    "keywords": "Server.MessageHandler Delegate Namespace: Riptide Assembly: RiptideNetworking.dll Encapsulates a method that handles a message from a client. public delegate void Server.MessageHandler(ushort fromClientId, Message message) Parameters ushort fromClientId The numeric ID of the client from whom the message was received. Message message The message that was received."
  },
  "api/Riptide.Server.MessageReceived.html": {
    "href": "api/Riptide.Server.MessageReceived.html",
    "title": "Server.MessageReceived Event | Riptide API Docs",
    "keywords": "Server.MessageReceived Event Namespace: Riptide Assembly: RiptideNetworking.dll Invoked when a message is received. public event EventHandler<MessageReceivedEventArgs> MessageReceived Returns EventHandler<MessageReceivedEventArgs>"
  },
  "api/Riptide.Server.OnClientConnected.html": {
    "href": "api/Riptide.Server.OnClientConnected.html",
    "title": "Server.OnClientConnected Method | Riptide API Docs",
    "keywords": "Server.OnClientConnected Method Namespace: Riptide Assembly: RiptideNetworking.dll OnClientConnected(Connection) Invokes the ClientConnected event. protected virtual void OnClientConnected(Connection client) Parameters Connection client The newly connected client."
  },
  "api/Riptide.Server.OnClientDisconnected.html": {
    "href": "api/Riptide.Server.OnClientDisconnected.html",
    "title": "Server.OnClientDisconnected Method | Riptide API Docs",
    "keywords": "Server.OnClientDisconnected Method Namespace: Riptide Assembly: RiptideNetworking.dll OnClientDisconnected(Connection, DisconnectReason) Invokes the ClientDisconnected event. protected virtual void OnClientDisconnected(Connection connection, DisconnectReason reason) Parameters Connection connection The client that disconnected. DisconnectReason reason The reason for the disconnection."
  },
  "api/Riptide.Server.OnConnectionFailed.html": {
    "href": "api/Riptide.Server.OnConnectionFailed.html",
    "title": "Server.OnConnectionFailed Method | Riptide API Docs",
    "keywords": "Server.OnConnectionFailed Method Namespace: Riptide Assembly: RiptideNetworking.dll OnConnectionFailed(Connection) Invokes the ConnectionFailed event. protected virtual void OnConnectionFailed(Connection connection) Parameters Connection connection The connection that failed to be fully established."
  },
  "api/Riptide.Server.OnMessageReceived.html": {
    "href": "api/Riptide.Server.OnMessageReceived.html",
    "title": "Server.OnMessageReceived Method | Riptide API Docs",
    "keywords": "Server.OnMessageReceived Method Namespace: Riptide Assembly: RiptideNetworking.dll OnMessageReceived(Message, Connection) Invokes the MessageReceived event and initiates handling of the received message. protected virtual void OnMessageReceived(Message message, Connection fromConnection) Parameters Message message The received message. Connection fromConnection The client from which the message was received."
  },
  "api/Riptide.Server.Port.html": {
    "href": "api/Riptide.Server.Port.html",
    "title": "Server.Port Property | Riptide API Docs",
    "keywords": "Server.Port Property Namespace: Riptide Assembly: RiptideNetworking.dll Port The local port that the server is running on. public ushort Port { get; } Property Value ushort"
  },
  "api/Riptide.Server.Reject.html": {
    "href": "api/Riptide.Server.Reject.html",
    "title": "Server.Reject Method | Riptide API Docs",
    "keywords": "Server.Reject Method Namespace: Riptide Assembly: RiptideNetworking.dll Reject(Connection, Message) Rejects the given pending connection. public void Reject(Connection connection, Message message = null) Parameters Connection connection The connection to reject. Message message Data that should be sent to the client being rejected. Use Create() to get an empty message instance."
  },
  "api/Riptide.Server.RelayFilter.html": {
    "href": "api/Riptide.Server.RelayFilter.html",
    "title": "Server.RelayFilter Field | Riptide API Docs",
    "keywords": "Server.RelayFilter Field Namespace: Riptide Assembly: RiptideNetworking.dll Stores which message IDs have auto relaying enabled. Relaying is disabled entirely when this is null. public MessageRelayFilter RelayFilter Returns MessageRelayFilter"
  },
  "api/Riptide.Server.Send.html": {
    "href": "api/Riptide.Server.Send.html",
    "title": "Server.Send Method | Riptide API Docs",
    "keywords": "Server.Send Method Namespace: Riptide Assembly: RiptideNetworking.dll Overloads Send(Message, ushort, bool) Sends a message to a given client. Send(Message, Connection, bool) Sends a message to a given client. Send(Message, ushort, bool) Sends a message to a given client. public void Send(Message message, ushort toClient, bool shouldRelease = true) Parameters Message message The message to send. ushort toClient The numeric ID of the client to send the message to. bool shouldRelease Whether or not to return the message to the pool after it is sent. Remarks If you intend to continue using the message instance after calling this method, you must set shouldRelease to false. Release() can be used to manually return the message to the pool at a later time. Send(Message, Connection, bool) Sends a message to a given client. public ushort Send(Message message, Connection toClient, bool shouldRelease = true) Parameters Message message The message to send. Connection toClient The client to send the message to. bool shouldRelease Whether or not to return the message to the pool after it is sent. Returns ushort For reliable and notify messages, the sequence ID that the message was sent with. 0 for unreliable messages. Remarks If you intend to continue using the message instance after calling this method, you must set shouldRelease to false. Release() can be used to manually return the message to the pool at a later time."
  },
  "api/Riptide.Server.SendToAll.html": {
    "href": "api/Riptide.Server.SendToAll.html",
    "title": "Server.SendToAll Method | Riptide API Docs",
    "keywords": "Server.SendToAll Method Namespace: Riptide Assembly: RiptideNetworking.dll Overloads SendToAll(Message, bool) Sends a message to all connected clients. SendToAll(Message, ushort, bool) Sends a message to all connected clients except the given one. SendToAll(Message, bool) Sends a message to all connected clients. public void SendToAll(Message message, bool shouldRelease = true) Parameters Message message The message to send. bool shouldRelease Whether or not to return the message to the pool after it is sent. Remarks If you intend to continue using the message instance after calling this method, you must set shouldRelease to false. Release() can be used to manually return the message to the pool at a later time. SendToAll(Message, ushort, bool) Sends a message to all connected clients except the given one. public void SendToAll(Message message, ushort exceptToClientId, bool shouldRelease = true) Parameters Message message The message to send. ushort exceptToClientId The numeric ID of the client to not send the message to. bool shouldRelease Whether or not to return the message to the pool after it is sent. Remarks If you intend to continue using the message instance after calling this method, you must set shouldRelease to false. Release() can be used to manually return the message to the pool at a later time."
  },
  "api/Riptide.Server.Start.html": {
    "href": "api/Riptide.Server.Start.html",
    "title": "Server.Start Method | Riptide API Docs",
    "keywords": "Server.Start Method Namespace: Riptide Assembly: RiptideNetworking.dll Start(ushort, ushort, byte, bool) Starts the server. public void Start(ushort port, ushort maxClientCount, byte messageHandlerGroupId = 0, bool useMessageHandlers = true) Parameters ushort port The local port on which to start the server. ushort maxClientCount The maximum number of concurrent connections to allow. byte messageHandlerGroupId The ID of the group of message handler methods to use when building messageHandlers. bool useMessageHandlers Whether or not the server should use the built-in message handler system. Remarks Setting useMessageHandlers to false will disable the automatic detection and execution of methods with the MessageHandlerAttribute, which is beneficial if you prefer to handle messages via the MessageReceived event."
  },
  "api/Riptide.Server.Stop.html": {
    "href": "api/Riptide.Server.Stop.html",
    "title": "Server.Stop Method | Riptide API Docs",
    "keywords": "Server.Stop Method Namespace: Riptide Assembly: RiptideNetworking.dll Stop() Stops the server. public void Stop()"
  },
  "api/Riptide.Server.TimeoutTime.html": {
    "href": "api/Riptide.Server.TimeoutTime.html",
    "title": "Server.TimeoutTime Property | Riptide API Docs",
    "keywords": "Server.TimeoutTime Property Namespace: Riptide Assembly: RiptideNetworking.dll TimeoutTime Sets the default timeout time for future connections and updates the TimeoutTime of all connected clients. public override int TimeoutTime { set; } Property Value int Overrides Peer.TimeoutTime"
  },
  "api/Riptide.Server.TryGetClient.html": {
    "href": "api/Riptide.Server.TryGetClient.html",
    "title": "Server.TryGetClient Method | Riptide API Docs",
    "keywords": "Server.TryGetClient Method Namespace: Riptide Assembly: RiptideNetworking.dll TryGetClient(ushort, out Connection) Retrieves the client with the given ID, if a client with that ID is currently connected. public bool TryGetClient(ushort id, out Connection client) Parameters ushort id The ID of the client to retrieve. Connection client The retrieved client. Returns bool true if a client with the given ID was connected; otherwise false."
  },
  "api/Riptide.Server.Update.html": {
    "href": "api/Riptide.Server.Update.html",
    "title": "Server.Update Method | Riptide API Docs",
    "keywords": "Server.Update Method Namespace: Riptide Assembly: RiptideNetworking.dll Update() Handles any received messages and invokes any delayed events which need to be invoked. public override void Update() Overrides Peer.Update()"
  },
  "api/Riptide.Server.html": {
    "href": "api/Riptide.Server.html",
    "title": "Server Class | Riptide API Docs",
    "keywords": "Server Class Namespace: Riptide Assembly: RiptideNetworking.dll A server that can accept connections from Clients. public class Server : Peer Inheritance object Peer Server Inherited Members Peer.LogName Peer.HeartbeatInterval Peer.useMessageHandlers Peer.defaultTimeout Peer.FindMessageHandlers() Peer.StartTime() Peer.StopTime() Peer.HandleMessages() Peer.HandleData(object, DataReceivedEventArgs) Peer.IncreaseActiveCount() Peer.DecreaseActiveCount() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Server(IServer, string) Handles initial setup. Server(string) Handles initial setup using the built-in UDP transport. Fields HandleConnection An optional method which determines whether or not to accept a client's connection attempt. RelayFilter Stores which message IDs have auto relaying enabled. Relaying is disabled entirely when this is null. Properties ClientCount The number of currently connected clients. Clients An array of all the currently connected clients. IsRunning Whether or not the server is currently running. MaxClientCount The maximum number of concurrent connections. Port The local port that the server is running on. TimeoutTime Sets the default timeout time for future connections and updates the TimeoutTime of all connected clients. Methods Accept(Connection) Accepts the given pending connection. ChangeTransport(IServer) Stops the server if it's running and swaps out the transport it's using. CreateMessageHandlersDictionary(byte) Builds a dictionary of message IDs and their corresponding message handler methods. DisconnectClient(Connection, Message) Disconnects the given client. DisconnectClient(ushort, Message) Disconnects a specific client. Handle(Message, MessageHeader, Connection) Handles a message. OnClientConnected(Connection) Invokes the ClientConnected event. OnClientDisconnected(Connection, DisconnectReason) Invokes the ClientDisconnected event. OnConnectionFailed(Connection) Invokes the ConnectionFailed event. OnMessageReceived(Message, Connection) Invokes the MessageReceived event and initiates handling of the received message. Reject(Connection, Message) Rejects the given pending connection. Send(Message, Connection, bool) Sends a message to a given client. Send(Message, ushort, bool) Sends a message to a given client. SendToAll(Message, bool) Sends a message to all connected clients. SendToAll(Message, ushort, bool) Sends a message to all connected clients except the given one. Start(ushort, ushort, byte, bool) Starts the server. Stop() Stops the server. TryGetClient(ushort, out Connection) Retrieves the client with the given ID, if a client with that ID is currently connected. Update() Handles any received messages and invokes any delayed events which need to be invoked. Events ClientConnected Invoked when a client connects. ClientDisconnected Invoked when a client disconnects. ConnectionFailed Invoked when a connection fails to be fully established. MessageReceived Invoked when a message is received."
  },
  "api/Riptide.ServerConnectedEventArgs.-ctor.html": {
    "href": "api/Riptide.ServerConnectedEventArgs.-ctor.html",
    "title": "ServerConnectedEventArgs Constructor | Riptide API Docs",
    "keywords": "ServerConnectedEventArgs Constructor Namespace: Riptide Assembly: RiptideNetworking.dll ServerConnectedEventArgs(Connection) Initializes event data. public ServerConnectedEventArgs(Connection client) Parameters Connection client The newly connected client."
  },
  "api/Riptide.ServerConnectedEventArgs.Client.html": {
    "href": "api/Riptide.ServerConnectedEventArgs.Client.html",
    "title": "ServerConnectedEventArgs.Client Field | Riptide API Docs",
    "keywords": "ServerConnectedEventArgs.Client Field Namespace: Riptide Assembly: RiptideNetworking.dll The newly connected client. public readonly Connection Client Returns Connection"
  },
  "api/Riptide.ServerConnectedEventArgs.html": {
    "href": "api/Riptide.ServerConnectedEventArgs.html",
    "title": "ServerConnectedEventArgs Class | Riptide API Docs",
    "keywords": "ServerConnectedEventArgs Class Namespace: Riptide Assembly: RiptideNetworking.dll Contains event data for when a client connects to the server. public class ServerConnectedEventArgs : EventArgs Inheritance object EventArgs ServerConnectedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ServerConnectedEventArgs(Connection) Initializes event data. Fields Client The newly connected client."
  },
  "api/Riptide.ServerConnectionFailedEventArgs.-ctor.html": {
    "href": "api/Riptide.ServerConnectionFailedEventArgs.-ctor.html",
    "title": "ServerConnectionFailedEventArgs Constructor | Riptide API Docs",
    "keywords": "ServerConnectionFailedEventArgs Constructor Namespace: Riptide Assembly: RiptideNetworking.dll ServerConnectionFailedEventArgs(Connection) Initializes event data. public ServerConnectionFailedEventArgs(Connection client) Parameters Connection client The connection that failed to be established."
  },
  "api/Riptide.ServerConnectionFailedEventArgs.Client.html": {
    "href": "api/Riptide.ServerConnectionFailedEventArgs.Client.html",
    "title": "ServerConnectionFailedEventArgs.Client Field | Riptide API Docs",
    "keywords": "ServerConnectionFailedEventArgs.Client Field Namespace: Riptide Assembly: RiptideNetworking.dll The connection that failed to be established. public readonly Connection Client Returns Connection"
  },
  "api/Riptide.ServerConnectionFailedEventArgs.html": {
    "href": "api/Riptide.ServerConnectionFailedEventArgs.html",
    "title": "ServerConnectionFailedEventArgs Class | Riptide API Docs",
    "keywords": "ServerConnectionFailedEventArgs Class Namespace: Riptide Assembly: RiptideNetworking.dll Contains event data for when a connection fails to be fully established. public class ServerConnectionFailedEventArgs : EventArgs Inheritance object EventArgs ServerConnectionFailedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ServerConnectionFailedEventArgs(Connection) Initializes event data. Fields Client The connection that failed to be established."
  },
  "api/Riptide.ServerDisconnectedEventArgs.-ctor.html": {
    "href": "api/Riptide.ServerDisconnectedEventArgs.-ctor.html",
    "title": "ServerDisconnectedEventArgs Constructor | Riptide API Docs",
    "keywords": "ServerDisconnectedEventArgs Constructor Namespace: Riptide Assembly: RiptideNetworking.dll ServerDisconnectedEventArgs(Connection, DisconnectReason) Initializes event data. public ServerDisconnectedEventArgs(Connection client, DisconnectReason reason) Parameters Connection client The client that disconnected. DisconnectReason reason The reason for the disconnection."
  },
  "api/Riptide.ServerDisconnectedEventArgs.Client.html": {
    "href": "api/Riptide.ServerDisconnectedEventArgs.Client.html",
    "title": "ServerDisconnectedEventArgs.Client Field | Riptide API Docs",
    "keywords": "ServerDisconnectedEventArgs.Client Field Namespace: Riptide Assembly: RiptideNetworking.dll The client that disconnected. public readonly Connection Client Returns Connection"
  },
  "api/Riptide.ServerDisconnectedEventArgs.Reason.html": {
    "href": "api/Riptide.ServerDisconnectedEventArgs.Reason.html",
    "title": "ServerDisconnectedEventArgs.Reason Field | Riptide API Docs",
    "keywords": "ServerDisconnectedEventArgs.Reason Field Namespace: Riptide Assembly: RiptideNetworking.dll The reason for the disconnection. public readonly DisconnectReason Reason Returns DisconnectReason"
  },
  "api/Riptide.ServerDisconnectedEventArgs.html": {
    "href": "api/Riptide.ServerDisconnectedEventArgs.html",
    "title": "ServerDisconnectedEventArgs Class | Riptide API Docs",
    "keywords": "ServerDisconnectedEventArgs Class Namespace: Riptide Assembly: RiptideNetworking.dll Contains event data for when a client disconnects from the server. public class ServerDisconnectedEventArgs : EventArgs Inheritance object EventArgs ServerDisconnectedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ServerDisconnectedEventArgs(Connection, DisconnectReason) Initializes event data. Fields Client The client that disconnected. Reason The reason for the disconnection."
  },
  "api/Riptide.Transports.ConnectedEventArgs.-ctor.html": {
    "href": "api/Riptide.Transports.ConnectedEventArgs.-ctor.html",
    "title": "ConnectedEventArgs Constructor | Riptide API Docs",
    "keywords": "ConnectedEventArgs Constructor Namespace: Riptide.Transports Assembly: RiptideNetworking.dll ConnectedEventArgs(Connection) Initializes event data. public ConnectedEventArgs(Connection connection) Parameters Connection connection The newly established connection."
  },
  "api/Riptide.Transports.ConnectedEventArgs.Connection.html": {
    "href": "api/Riptide.Transports.ConnectedEventArgs.Connection.html",
    "title": "ConnectedEventArgs.Connection Field | Riptide API Docs",
    "keywords": "ConnectedEventArgs.Connection Field Namespace: Riptide.Transports Assembly: RiptideNetworking.dll The newly established connection. public readonly Connection Connection Returns Connection"
  },
  "api/Riptide.Transports.ConnectedEventArgs.html": {
    "href": "api/Riptide.Transports.ConnectedEventArgs.html",
    "title": "ConnectedEventArgs Class | Riptide API Docs",
    "keywords": "ConnectedEventArgs Class Namespace: Riptide.Transports Assembly: RiptideNetworking.dll Contains event data for when a server's transport successfully establishes a connection to a client. public class ConnectedEventArgs Inheritance object ConnectedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ConnectedEventArgs(Connection) Initializes event data. Fields Connection The newly established connection."
  },
  "api/Riptide.Transports.DataReceivedEventArgs.-ctor.html": {
    "href": "api/Riptide.Transports.DataReceivedEventArgs.-ctor.html",
    "title": "DataReceivedEventArgs Constructor | Riptide API Docs",
    "keywords": "DataReceivedEventArgs Constructor Namespace: Riptide.Transports Assembly: RiptideNetworking.dll DataReceivedEventArgs(byte[], int, Connection) Initializes event data. public DataReceivedEventArgs(byte[] dataBuffer, int amount, Connection fromConnection) Parameters byte[] dataBuffer An array containing the received data. int amount The number of bytes that were received. Connection fromConnection The connection which the data was received from."
  },
  "api/Riptide.Transports.DataReceivedEventArgs.Amount.html": {
    "href": "api/Riptide.Transports.DataReceivedEventArgs.Amount.html",
    "title": "DataReceivedEventArgs.Amount Field | Riptide API Docs",
    "keywords": "DataReceivedEventArgs.Amount Field Namespace: Riptide.Transports Assembly: RiptideNetworking.dll The number of bytes that were received. public readonly int Amount Returns int"
  },
  "api/Riptide.Transports.DataReceivedEventArgs.DataBuffer.html": {
    "href": "api/Riptide.Transports.DataReceivedEventArgs.DataBuffer.html",
    "title": "DataReceivedEventArgs.DataBuffer Field | Riptide API Docs",
    "keywords": "DataReceivedEventArgs.DataBuffer Field Namespace: Riptide.Transports Assembly: RiptideNetworking.dll An array containing the received data. public readonly byte[] DataBuffer Returns byte[]"
  },
  "api/Riptide.Transports.DataReceivedEventArgs.FromConnection.html": {
    "href": "api/Riptide.Transports.DataReceivedEventArgs.FromConnection.html",
    "title": "DataReceivedEventArgs.FromConnection Field | Riptide API Docs",
    "keywords": "DataReceivedEventArgs.FromConnection Field Namespace: Riptide.Transports Assembly: RiptideNetworking.dll The connection which the data was received from. public readonly Connection FromConnection Returns Connection"
  },
  "api/Riptide.Transports.DataReceivedEventArgs.html": {
    "href": "api/Riptide.Transports.DataReceivedEventArgs.html",
    "title": "DataReceivedEventArgs Class | Riptide API Docs",
    "keywords": "DataReceivedEventArgs Class Namespace: Riptide.Transports Assembly: RiptideNetworking.dll Contains event data for when a server's or client's transport receives data. public class DataReceivedEventArgs Inheritance object DataReceivedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DataReceivedEventArgs(byte[], int, Connection) Initializes event data. Fields Amount The number of bytes that were received. DataBuffer An array containing the received data. FromConnection The connection which the data was received from."
  },
  "api/Riptide.Transports.DisconnectedEventArgs.-ctor.html": {
    "href": "api/Riptide.Transports.DisconnectedEventArgs.-ctor.html",
    "title": "DisconnectedEventArgs Constructor | Riptide API Docs",
    "keywords": "DisconnectedEventArgs Constructor Namespace: Riptide.Transports Assembly: RiptideNetworking.dll DisconnectedEventArgs(Connection, DisconnectReason) Initializes event data. public DisconnectedEventArgs(Connection connection, DisconnectReason reason) Parameters Connection connection The closed connection. DisconnectReason reason The reason for the disconnection."
  },
  "api/Riptide.Transports.DisconnectedEventArgs.Connection.html": {
    "href": "api/Riptide.Transports.DisconnectedEventArgs.Connection.html",
    "title": "DisconnectedEventArgs.Connection Field | Riptide API Docs",
    "keywords": "DisconnectedEventArgs.Connection Field Namespace: Riptide.Transports Assembly: RiptideNetworking.dll The closed connection. public readonly Connection Connection Returns Connection"
  },
  "api/Riptide.Transports.DisconnectedEventArgs.Reason.html": {
    "href": "api/Riptide.Transports.DisconnectedEventArgs.Reason.html",
    "title": "DisconnectedEventArgs.Reason Field | Riptide API Docs",
    "keywords": "DisconnectedEventArgs.Reason Field Namespace: Riptide.Transports Assembly: RiptideNetworking.dll The reason for the disconnection. public readonly DisconnectReason Reason Returns DisconnectReason"
  },
  "api/Riptide.Transports.DisconnectedEventArgs.html": {
    "href": "api/Riptide.Transports.DisconnectedEventArgs.html",
    "title": "DisconnectedEventArgs Class | Riptide API Docs",
    "keywords": "DisconnectedEventArgs Class Namespace: Riptide.Transports Assembly: RiptideNetworking.dll Contains event data for when a server's or client's transport initiates or detects a disconnection. public class DisconnectedEventArgs Inheritance object DisconnectedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DisconnectedEventArgs(Connection, DisconnectReason) Initializes event data. Fields Connection The closed connection. Reason The reason for the disconnection."
  },
  "api/Riptide.Transports.IClient.Connect.html": {
    "href": "api/Riptide.Transports.IClient.Connect.html",
    "title": "IClient.Connect Method | Riptide API Docs",
    "keywords": "IClient.Connect Method Namespace: Riptide.Transports Assembly: RiptideNetworking.dll Connect(string, out Connection, out string) Starts the transport and attempts to connect to the given host address. bool Connect(string hostAddress, out Connection connection, out string connectError) Parameters string hostAddress The host address to connect to. Connection connection The pending connection. null if an issue occurred. string connectError The error message associated with the issue that occurred, if any. Returns bool true if a connection attempt will be made. false if an issue occurred (such as hostAddress being in an invalid format) and a connection attempt will not be made."
  },
  "api/Riptide.Transports.IClient.Connected.html": {
    "href": "api/Riptide.Transports.IClient.Connected.html",
    "title": "IClient.Connected Event | Riptide API Docs",
    "keywords": "IClient.Connected Event Namespace: Riptide.Transports Assembly: RiptideNetworking.dll Invoked when a connection is established at the transport level. event EventHandler Connected Returns EventHandler"
  },
  "api/Riptide.Transports.IClient.ConnectionFailed.html": {
    "href": "api/Riptide.Transports.IClient.ConnectionFailed.html",
    "title": "IClient.ConnectionFailed Event | Riptide API Docs",
    "keywords": "IClient.ConnectionFailed Event Namespace: Riptide.Transports Assembly: RiptideNetworking.dll Invoked when a connection attempt fails at the transport level. event EventHandler ConnectionFailed Returns EventHandler"
  },
  "api/Riptide.Transports.IClient.Disconnect.html": {
    "href": "api/Riptide.Transports.IClient.Disconnect.html",
    "title": "IClient.Disconnect Method | Riptide API Docs",
    "keywords": "IClient.Disconnect Method Namespace: Riptide.Transports Assembly: RiptideNetworking.dll Disconnect() Closes the connection to the server. void Disconnect()"
  },
  "api/Riptide.Transports.IClient.html": {
    "href": "api/Riptide.Transports.IClient.html",
    "title": "IClient Interface | Riptide API Docs",
    "keywords": "IClient Interface Namespace: Riptide.Transports Assembly: RiptideNetworking.dll Defines methods, properties, and events which every transport's client must implement. public interface IClient : IPeer Inherited Members IPeer.DataReceived IPeer.Disconnected IPeer.Poll() Methods Connect(string, out Connection, out string) Starts the transport and attempts to connect to the given host address. Disconnect() Closes the connection to the server. Events Connected Invoked when a connection is established at the transport level. ConnectionFailed Invoked when a connection attempt fails at the transport level."
  },
  "api/Riptide.Transports.IPeer.DataReceived.html": {
    "href": "api/Riptide.Transports.IPeer.DataReceived.html",
    "title": "IPeer.DataReceived Event | Riptide API Docs",
    "keywords": "IPeer.DataReceived Event Namespace: Riptide.Transports Assembly: RiptideNetworking.dll Invoked when data is received by the transport. event EventHandler<DataReceivedEventArgs> DataReceived Returns EventHandler<DataReceivedEventArgs>"
  },
  "api/Riptide.Transports.IPeer.Disconnected.html": {
    "href": "api/Riptide.Transports.IPeer.Disconnected.html",
    "title": "IPeer.Disconnected Event | Riptide API Docs",
    "keywords": "IPeer.Disconnected Event Namespace: Riptide.Transports Assembly: RiptideNetworking.dll Invoked when a disconnection is initiated or detected by the transport. event EventHandler<DisconnectedEventArgs> Disconnected Returns EventHandler<DisconnectedEventArgs>"
  },
  "api/Riptide.Transports.IPeer.Poll.html": {
    "href": "api/Riptide.Transports.IPeer.Poll.html",
    "title": "IPeer.Poll Method | Riptide API Docs",
    "keywords": "IPeer.Poll Method Namespace: Riptide.Transports Assembly: RiptideNetworking.dll Poll() Initiates handling of any received messages. void Poll()"
  },
  "api/Riptide.Transports.IPeer.html": {
    "href": "api/Riptide.Transports.IPeer.html",
    "title": "IPeer Interface | Riptide API Docs",
    "keywords": "IPeer Interface Namespace: Riptide.Transports Assembly: RiptideNetworking.dll Defines methods, properties, and events which every transport's server and client must implement. public interface IPeer Methods Poll() Initiates handling of any received messages. Events DataReceived Invoked when data is received by the transport. Disconnected Invoked when a disconnection is initiated or detected by the transport."
  },
  "api/Riptide.Transports.IServer.Close.html": {
    "href": "api/Riptide.Transports.IServer.Close.html",
    "title": "IServer.Close Method | Riptide API Docs",
    "keywords": "IServer.Close Method Namespace: Riptide.Transports Assembly: RiptideNetworking.dll Close(Connection) Closes an active connection. void Close(Connection connection) Parameters Connection connection The connection to close."
  },
  "api/Riptide.Transports.IServer.Connected.html": {
    "href": "api/Riptide.Transports.IServer.Connected.html",
    "title": "IServer.Connected Event | Riptide API Docs",
    "keywords": "IServer.Connected Event Namespace: Riptide.Transports Assembly: RiptideNetworking.dll Invoked when a connection is established at the transport level. event EventHandler<ConnectedEventArgs> Connected Returns EventHandler<ConnectedEventArgs>"
  },
  "api/Riptide.Transports.IServer.Port.html": {
    "href": "api/Riptide.Transports.IServer.Port.html",
    "title": "IServer.Port Property | Riptide API Docs",
    "keywords": "IServer.Port Property Namespace: Riptide.Transports Assembly: RiptideNetworking.dll Port The local port that the server is running on. ushort Port { get; } Property Value ushort"
  },
  "api/Riptide.Transports.IServer.Shutdown.html": {
    "href": "api/Riptide.Transports.IServer.Shutdown.html",
    "title": "IServer.Shutdown Method | Riptide API Docs",
    "keywords": "IServer.Shutdown Method Namespace: Riptide.Transports Assembly: RiptideNetworking.dll Shutdown() Closes all existing connections and stops listening for new connections. void Shutdown()"
  },
  "api/Riptide.Transports.IServer.Start.html": {
    "href": "api/Riptide.Transports.IServer.Start.html",
    "title": "IServer.Start Method | Riptide API Docs",
    "keywords": "IServer.Start Method Namespace: Riptide.Transports Assembly: RiptideNetworking.dll Start(ushort) Starts the transport and begins listening for incoming connections. void Start(ushort port) Parameters ushort port The local port on which to listen for connections."
  },
  "api/Riptide.Transports.IServer.html": {
    "href": "api/Riptide.Transports.IServer.html",
    "title": "IServer Interface | Riptide API Docs",
    "keywords": "IServer Interface Namespace: Riptide.Transports Assembly: RiptideNetworking.dll Defines methods, properties, and events which every transport's server must implement. public interface IServer : IPeer Inherited Members IPeer.DataReceived IPeer.Disconnected IPeer.Poll() Properties Port The local port that the server is running on. Methods Close(Connection) Closes an active connection. Shutdown() Closes all existing connections and stops listening for new connections. Start(ushort) Starts the transport and begins listening for incoming connections. Events Connected Invoked when a connection is established at the transport level."
  },
  "api/Riptide.Transports.MessageHeader.html": {
    "href": "api/Riptide.Transports.MessageHeader.html",
    "title": "MessageHeader Enum | Riptide API Docs",
    "keywords": "MessageHeader Enum Namespace: Riptide.Transports Assembly: RiptideNetworking.dll The header type of a Message. public enum MessageHeader : byte Fields Unreliable An unreliable user message. Ack An internal unreliable ack message. Connect An internal unreliable connect message. Reject An internal unreliable connection rejection message. Heartbeat An internal unreliable heartbeat message. Disconnect An internal unreliable disconnect message. Notify A notify message. Reliable A reliable user message. Welcome An internal reliable welcome message. ClientConnected An internal reliable client connected message. ClientDisconnected An internal reliable client disconnected message."
  },
  "api/Riptide.Transports.Tcp.TcpClient.Connect.html": {
    "href": "api/Riptide.Transports.Tcp.TcpClient.Connect.html",
    "title": "TcpClient.Connect Method | Riptide API Docs",
    "keywords": "TcpClient.Connect Method Namespace: Riptide.Transports.Tcp Assembly: RiptideNetworking.dll Connect(string, out Connection, out string) Starts the transport and attempts to connect to the given host address. public bool Connect(string hostAddress, out Connection connection, out string connectError) Parameters string hostAddress The host address to connect to. Connection connection The pending connection. null if an issue occurred. string connectError The error message associated with the issue that occurred, if any. Returns bool true if a connection attempt will be made. false if an issue occurred (such as hostAddress being in an invalid format) and a connection attempt will not be made. Implements IClient.Connect(string, out Connection, out string) Remarks Expects the host address to consist of an IP and port, separated by a colon. For example: 127.0.0.1:7777."
  },
  "api/Riptide.Transports.Tcp.TcpClient.Connected.html": {
    "href": "api/Riptide.Transports.Tcp.TcpClient.Connected.html",
    "title": "TcpClient.Connected Event | Riptide API Docs",
    "keywords": "TcpClient.Connected Event Namespace: Riptide.Transports.Tcp Assembly: RiptideNetworking.dll Invoked when a connection is established at the transport level. public event EventHandler Connected Implements Connected Returns EventHandler"
  },
  "api/Riptide.Transports.Tcp.TcpClient.ConnectionFailed.html": {
    "href": "api/Riptide.Transports.Tcp.TcpClient.ConnectionFailed.html",
    "title": "TcpClient.ConnectionFailed Event | Riptide API Docs",
    "keywords": "TcpClient.ConnectionFailed Event Namespace: Riptide.Transports.Tcp Assembly: RiptideNetworking.dll Invoked when a connection attempt fails at the transport level. public event EventHandler ConnectionFailed Implements ConnectionFailed Returns EventHandler"
  },
  "api/Riptide.Transports.Tcp.TcpClient.DataReceived.html": {
    "href": "api/Riptide.Transports.Tcp.TcpClient.DataReceived.html",
    "title": "TcpClient.DataReceived Event | Riptide API Docs",
    "keywords": "TcpClient.DataReceived Event Namespace: Riptide.Transports.Tcp Assembly: RiptideNetworking.dll Invoked when data is received by the transport. public event EventHandler<DataReceivedEventArgs> DataReceived Implements DataReceived Returns EventHandler<DataReceivedEventArgs>"
  },
  "api/Riptide.Transports.Tcp.TcpClient.Disconnect.html": {
    "href": "api/Riptide.Transports.Tcp.TcpClient.Disconnect.html",
    "title": "TcpClient.Disconnect Method | Riptide API Docs",
    "keywords": "TcpClient.Disconnect Method Namespace: Riptide.Transports.Tcp Assembly: RiptideNetworking.dll Disconnect() Closes the connection to the server. public void Disconnect() Implements IClient.Disconnect()"
  },
  "api/Riptide.Transports.Tcp.TcpClient.OnConnected.html": {
    "href": "api/Riptide.Transports.Tcp.TcpClient.OnConnected.html",
    "title": "TcpClient.OnConnected Method | Riptide API Docs",
    "keywords": "TcpClient.OnConnected Method Namespace: Riptide.Transports.Tcp Assembly: RiptideNetworking.dll OnConnected() Invokes the Connected event. protected virtual void OnConnected()"
  },
  "api/Riptide.Transports.Tcp.TcpClient.OnConnectionFailed.html": {
    "href": "api/Riptide.Transports.Tcp.TcpClient.OnConnectionFailed.html",
    "title": "TcpClient.OnConnectionFailed Method | Riptide API Docs",
    "keywords": "TcpClient.OnConnectionFailed Method Namespace: Riptide.Transports.Tcp Assembly: RiptideNetworking.dll OnConnectionFailed() Invokes the ConnectionFailed event. protected virtual void OnConnectionFailed()"
  },
  "api/Riptide.Transports.Tcp.TcpClient.OnDataReceived.html": {
    "href": "api/Riptide.Transports.Tcp.TcpClient.OnDataReceived.html",
    "title": "TcpClient.OnDataReceived Method | Riptide API Docs",
    "keywords": "TcpClient.OnDataReceived Method Namespace: Riptide.Transports.Tcp Assembly: RiptideNetworking.dll OnDataReceived(int, TcpConnection) Handles received data. protected override void OnDataReceived(int amount, TcpConnection fromConnection) Parameters int amount The number of bytes that were received. TcpConnection fromConnection The connection from which the data was received. Overrides TcpPeer.OnDataReceived(int, TcpConnection)"
  },
  "api/Riptide.Transports.Tcp.TcpClient.Poll.html": {
    "href": "api/Riptide.Transports.Tcp.TcpClient.Poll.html",
    "title": "TcpClient.Poll Method | Riptide API Docs",
    "keywords": "TcpClient.Poll Method Namespace: Riptide.Transports.Tcp Assembly: RiptideNetworking.dll Poll() Initiates handling of any received messages. public void Poll() Implements IPeer.Poll()"
  },
  "api/Riptide.Transports.Tcp.TcpClient.html": {
    "href": "api/Riptide.Transports.Tcp.TcpClient.html",
    "title": "TcpClient Class | Riptide API Docs",
    "keywords": "TcpClient Class Namespace: Riptide.Transports.Tcp Assembly: RiptideNetworking.dll A client which can connect to a TcpServer. public class TcpClient : TcpPeer, IClient, IPeer Inheritance object TcpPeer TcpClient Implements IClient IPeer Inherited Members TcpPeer.Disconnected TcpPeer.DefaultSocketBufferSize TcpPeer.socketBufferSize TcpPeer.socket TcpPeer.OnDisconnected(Connection, DisconnectReason) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Connect(string, out Connection, out string) Starts the transport and attempts to connect to the given host address. Disconnect() Closes the connection to the server. OnConnected() Invokes the Connected event. OnConnectionFailed() Invokes the ConnectionFailed event. OnDataReceived(int, TcpConnection) Handles received data. Poll() Initiates handling of any received messages. Events Connected Invoked when a connection is established at the transport level. ConnectionFailed Invoked when a connection attempt fails at the transport level. DataReceived Invoked when data is received by the transport."
  },
  "api/Riptide.Transports.Tcp.TcpConnection.Equals.html": {
    "href": "api/Riptide.Transports.Tcp.TcpConnection.Equals.html",
    "title": "TcpConnection.Equals Method | Riptide API Docs",
    "keywords": "TcpConnection.Equals Method Namespace: Riptide.Transports.Tcp Assembly: RiptideNetworking.dll Overloads Equals(object) Equals(TcpConnection) Equals(object) public override bool Equals(object obj) Parameters object obj Returns bool Overrides object.Equals(object) Equals(TcpConnection) public bool Equals(TcpConnection other) Parameters TcpConnection other Returns bool Implements IEquatable<T>.Equals(T)"
  },
  "api/Riptide.Transports.Tcp.TcpConnection.GetHashCode.html": {
    "href": "api/Riptide.Transports.Tcp.TcpConnection.GetHashCode.html",
    "title": "TcpConnection.GetHashCode Method | Riptide API Docs",
    "keywords": "TcpConnection.GetHashCode Method Namespace: Riptide.Transports.Tcp Assembly: RiptideNetworking.dll GetHashCode() public override int GetHashCode() Returns int Overrides object.GetHashCode()"
  },
  "api/Riptide.Transports.Tcp.TcpConnection.RemoteEndPoint.html": {
    "href": "api/Riptide.Transports.Tcp.TcpConnection.RemoteEndPoint.html",
    "title": "TcpConnection.RemoteEndPoint Field | Riptide API Docs",
    "keywords": "TcpConnection.RemoteEndPoint Field Namespace: Riptide.Transports.Tcp Assembly: RiptideNetworking.dll The endpoint representing the other end of the connection. public readonly IPEndPoint RemoteEndPoint Returns IPEndPoint"
  },
  "api/Riptide.Transports.Tcp.TcpConnection.Send.html": {
    "href": "api/Riptide.Transports.Tcp.TcpConnection.Send.html",
    "title": "TcpConnection.Send Method | Riptide API Docs",
    "keywords": "TcpConnection.Send Method Namespace: Riptide.Transports.Tcp Assembly: RiptideNetworking.dll Send(byte[], int) Sends data. protected override void Send(byte[] dataBuffer, int amount) Parameters byte[] dataBuffer The array containing the data. int amount The number of bytes in the array which should be sent. Overrides Connection.Send(byte[], int)"
  },
  "api/Riptide.Transports.Tcp.TcpConnection.ToString.html": {
    "href": "api/Riptide.Transports.Tcp.TcpConnection.ToString.html",
    "title": "TcpConnection.ToString Method | Riptide API Docs",
    "keywords": "TcpConnection.ToString Method Namespace: Riptide.Transports.Tcp Assembly: RiptideNetworking.dll ToString() public override string ToString() Returns string Overrides object.ToString()"
  },
  "api/Riptide.Transports.Tcp.TcpConnection.html": {
    "href": "api/Riptide.Transports.Tcp.TcpConnection.html",
    "title": "TcpConnection Class | Riptide API Docs",
    "keywords": "TcpConnection Class Namespace: Riptide.Transports.Tcp Assembly: RiptideNetworking.dll Represents a connection to a TcpServer or TcpClient. public class TcpConnection : Connection, IEquatable<TcpConnection> Inheritance object Connection TcpConnection Implements IEquatable<TcpConnection> Inherited Members Connection.NotifyDelivered Connection.NotifyLost Connection.NotifyReceived Connection.ReliableDelivered Connection.Id Connection.IsNotConnected Connection.IsConnecting Connection.IsPending Connection.IsConnected Connection.RTT Connection.SmoothRTT Connection.TimeoutTime Connection.CanTimeout Connection.CanQualityDisconnect Connection.Metrics Connection.MaxAvgSendAttempts Connection.AvgSendAttemptsResilience Connection.MaxSendAttempts Connection.MaxNotifyLoss Connection.NotifyLossResilience Connection.ResetTimeout() Connection.Send(Message, bool) Connection.OnNotifyDelivered(ushort) Connection.OnNotifyLost(ushort) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields RemoteEndPoint The endpoint representing the other end of the connection. Methods Equals(TcpConnection) Equals(object) GetHashCode() Send(byte[], int) Sends data. ToString() Operators operator ==(TcpConnection, TcpConnection) operator !=(TcpConnection, TcpConnection)"
  },
  "api/Riptide.Transports.Tcp.TcpConnection.op_Equality.html": {
    "href": "api/Riptide.Transports.Tcp.TcpConnection.op_Equality.html",
    "title": "TcpConnection.operator == Operator | Riptide API Docs",
    "keywords": "TcpConnection.operator == Operator Namespace: Riptide.Transports.Tcp Assembly: RiptideNetworking.dll operator ==(TcpConnection, TcpConnection) public static bool operator ==(TcpConnection left, TcpConnection right) Parameters TcpConnection left TcpConnection right Returns bool"
  },
  "api/Riptide.Transports.Tcp.TcpConnection.op_Inequality.html": {
    "href": "api/Riptide.Transports.Tcp.TcpConnection.op_Inequality.html",
    "title": "TcpConnection.operator != Operator | Riptide API Docs",
    "keywords": "TcpConnection.operator != Operator Namespace: Riptide.Transports.Tcp Assembly: RiptideNetworking.dll operator !=(TcpConnection, TcpConnection) public static bool operator !=(TcpConnection left, TcpConnection right) Parameters TcpConnection left TcpConnection right Returns bool"
  },
  "api/Riptide.Transports.Tcp.TcpPeer.-ctor.html": {
    "href": "api/Riptide.Transports.Tcp.TcpPeer.-ctor.html",
    "title": "TcpPeer Constructor | Riptide API Docs",
    "keywords": "TcpPeer Constructor Namespace: Riptide.Transports.Tcp Assembly: RiptideNetworking.dll TcpPeer(int) Initializes the transport. protected TcpPeer(int socketBufferSize = 1048576) Parameters int socketBufferSize How big the socket's send and receive buffers should be."
  },
  "api/Riptide.Transports.Tcp.TcpPeer.DefaultSocketBufferSize.html": {
    "href": "api/Riptide.Transports.Tcp.TcpPeer.DefaultSocketBufferSize.html",
    "title": "TcpPeer.DefaultSocketBufferSize Field | Riptide API Docs",
    "keywords": "TcpPeer.DefaultSocketBufferSize Field Namespace: Riptide.Transports.Tcp Assembly: RiptideNetworking.dll The default size used for the socket's send and receive buffers. protected const int DefaultSocketBufferSize = 1048576 Returns int"
  },
  "api/Riptide.Transports.Tcp.TcpPeer.Disconnected.html": {
    "href": "api/Riptide.Transports.Tcp.TcpPeer.Disconnected.html",
    "title": "TcpPeer.Disconnected Event | Riptide API Docs",
    "keywords": "TcpPeer.Disconnected Event Namespace: Riptide.Transports.Tcp Assembly: RiptideNetworking.dll Invoked when a disconnection is initiated or detected by the transport. public event EventHandler<DisconnectedEventArgs> Disconnected Returns EventHandler<DisconnectedEventArgs>"
  },
  "api/Riptide.Transports.Tcp.TcpPeer.OnDataReceived.html": {
    "href": "api/Riptide.Transports.Tcp.TcpPeer.OnDataReceived.html",
    "title": "TcpPeer.OnDataReceived Method | Riptide API Docs",
    "keywords": "TcpPeer.OnDataReceived Method Namespace: Riptide.Transports.Tcp Assembly: RiptideNetworking.dll OnDataReceived(int, TcpConnection) Handles received data. protected abstract void OnDataReceived(int amount, TcpConnection fromConnection) Parameters int amount The number of bytes that were received. TcpConnection fromConnection The connection from which the data was received."
  },
  "api/Riptide.Transports.Tcp.TcpPeer.OnDisconnected.html": {
    "href": "api/Riptide.Transports.Tcp.TcpPeer.OnDisconnected.html",
    "title": "TcpPeer.OnDisconnected Method | Riptide API Docs",
    "keywords": "TcpPeer.OnDisconnected Method Namespace: Riptide.Transports.Tcp Assembly: RiptideNetworking.dll OnDisconnected(Connection, DisconnectReason) Invokes the Disconnected event. protected virtual void OnDisconnected(Connection connection, DisconnectReason reason) Parameters Connection connection The closed connection. DisconnectReason reason The reason for the disconnection."
  },
  "api/Riptide.Transports.Tcp.TcpPeer.html": {
    "href": "api/Riptide.Transports.Tcp.TcpPeer.html",
    "title": "TcpPeer Class | Riptide API Docs",
    "keywords": "TcpPeer Class Namespace: Riptide.Transports.Tcp Assembly: RiptideNetworking.dll Provides base send & receive functionality for TcpServer and TcpClient. public abstract class TcpPeer Inheritance object TcpPeer TcpClient TcpServer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TcpPeer(int) Initializes the transport. Fields DefaultSocketBufferSize The default size used for the socket's send and receive buffers. socket The main socket, either used for listening for connections or for sending and receiving data. socketBufferSize The size to use for the socket's send and receive buffers. Methods OnDataReceived(int, TcpConnection) Handles received data. OnDisconnected(Connection, DisconnectReason) Invokes the Disconnected event. Events Disconnected Invoked when a disconnection is initiated or detected by the transport."
  },
  "api/Riptide.Transports.Tcp.TcpPeer.socket.html": {
    "href": "api/Riptide.Transports.Tcp.TcpPeer.socket.html",
    "title": "TcpPeer.socket Field | Riptide API Docs",
    "keywords": "TcpPeer.socket Field Namespace: Riptide.Transports.Tcp Assembly: RiptideNetworking.dll The main socket, either used for listening for connections or for sending and receiving data. protected Socket socket Returns Socket"
  },
  "api/Riptide.Transports.Tcp.TcpPeer.socketBufferSize.html": {
    "href": "api/Riptide.Transports.Tcp.TcpPeer.socketBufferSize.html",
    "title": "TcpPeer.socketBufferSize Field | Riptide API Docs",
    "keywords": "TcpPeer.socketBufferSize Field Namespace: Riptide.Transports.Tcp Assembly: RiptideNetworking.dll The size to use for the socket's send and receive buffers. protected readonly int socketBufferSize Returns int"
  },
  "api/Riptide.Transports.Tcp.TcpServer.-ctor.html": {
    "href": "api/Riptide.Transports.Tcp.TcpServer.-ctor.html",
    "title": "TcpServer Constructor | Riptide API Docs",
    "keywords": "TcpServer Constructor Namespace: Riptide.Transports.Tcp Assembly: RiptideNetworking.dll Overloads TcpServer(int) Initializes the transport. TcpServer(IPAddress, int) Initializes the transport, binding the socket to a specific IP address. TcpServer(int) Initializes the transport. public TcpServer(int socketBufferSize = 1048576) Parameters int socketBufferSize How big the socket's send and receive buffers should be. TcpServer(IPAddress, int) Initializes the transport, binding the socket to a specific IP address. public TcpServer(IPAddress listenAddress, int socketBufferSize = 1048576) Parameters IPAddress listenAddress The IP address to bind the socket to. int socketBufferSize How big the socket's send and receive buffers should be."
  },
  "api/Riptide.Transports.Tcp.TcpServer.Close.html": {
    "href": "api/Riptide.Transports.Tcp.TcpServer.Close.html",
    "title": "TcpServer.Close Method | Riptide API Docs",
    "keywords": "TcpServer.Close Method Namespace: Riptide.Transports.Tcp Assembly: RiptideNetworking.dll Close(Connection) Closes an active connection. public void Close(Connection connection) Parameters Connection connection The connection to close. Implements IServer.Close(Connection)"
  },
  "api/Riptide.Transports.Tcp.TcpServer.Connected.html": {
    "href": "api/Riptide.Transports.Tcp.TcpServer.Connected.html",
    "title": "TcpServer.Connected Event | Riptide API Docs",
    "keywords": "TcpServer.Connected Event Namespace: Riptide.Transports.Tcp Assembly: RiptideNetworking.dll Invoked when a connection is established at the transport level. public event EventHandler<ConnectedEventArgs> Connected Implements Connected Returns EventHandler<ConnectedEventArgs>"
  },
  "api/Riptide.Transports.Tcp.TcpServer.DataReceived.html": {
    "href": "api/Riptide.Transports.Tcp.TcpServer.DataReceived.html",
    "title": "TcpServer.DataReceived Event | Riptide API Docs",
    "keywords": "TcpServer.DataReceived Event Namespace: Riptide.Transports.Tcp Assembly: RiptideNetworking.dll Invoked when data is received by the transport. public event EventHandler<DataReceivedEventArgs> DataReceived Implements DataReceived Returns EventHandler<DataReceivedEventArgs>"
  },
  "api/Riptide.Transports.Tcp.TcpServer.MaxPendingConnections.html": {
    "href": "api/Riptide.Transports.Tcp.TcpServer.MaxPendingConnections.html",
    "title": "TcpServer.MaxPendingConnections Property | Riptide API Docs",
    "keywords": "TcpServer.MaxPendingConnections Property Namespace: Riptide.Transports.Tcp Assembly: RiptideNetworking.dll MaxPendingConnections The maximum number of pending connections to allow at any given time. public int MaxPendingConnections { get; } Property Value int"
  },
  "api/Riptide.Transports.Tcp.TcpServer.OnConnected.html": {
    "href": "api/Riptide.Transports.Tcp.TcpServer.OnConnected.html",
    "title": "TcpServer.OnConnected Method | Riptide API Docs",
    "keywords": "TcpServer.OnConnected Method Namespace: Riptide.Transports.Tcp Assembly: RiptideNetworking.dll OnConnected(Connection) Invokes the Connected event. protected virtual void OnConnected(Connection connection) Parameters Connection connection The successfully established connection."
  },
  "api/Riptide.Transports.Tcp.TcpServer.OnDataReceived.html": {
    "href": "api/Riptide.Transports.Tcp.TcpServer.OnDataReceived.html",
    "title": "TcpServer.OnDataReceived Method | Riptide API Docs",
    "keywords": "TcpServer.OnDataReceived Method Namespace: Riptide.Transports.Tcp Assembly: RiptideNetworking.dll OnDataReceived(int, TcpConnection) Handles received data. protected override void OnDataReceived(int amount, TcpConnection fromConnection) Parameters int amount The number of bytes that were received. TcpConnection fromConnection The connection from which the data was received. Overrides TcpPeer.OnDataReceived(int, TcpConnection)"
  },
  "api/Riptide.Transports.Tcp.TcpServer.Poll.html": {
    "href": "api/Riptide.Transports.Tcp.TcpServer.Poll.html",
    "title": "TcpServer.Poll Method | Riptide API Docs",
    "keywords": "TcpServer.Poll Method Namespace: Riptide.Transports.Tcp Assembly: RiptideNetworking.dll Poll() Initiates handling of any received messages. public void Poll() Implements IPeer.Poll()"
  },
  "api/Riptide.Transports.Tcp.TcpServer.Port.html": {
    "href": "api/Riptide.Transports.Tcp.TcpServer.Port.html",
    "title": "TcpServer.Port Property | Riptide API Docs",
    "keywords": "TcpServer.Port Property Namespace: Riptide.Transports.Tcp Assembly: RiptideNetworking.dll Port The local port that the server is running on. public ushort Port { get; } Property Value ushort Implements IServer.Port"
  },
  "api/Riptide.Transports.Tcp.TcpServer.Shutdown.html": {
    "href": "api/Riptide.Transports.Tcp.TcpServer.Shutdown.html",
    "title": "TcpServer.Shutdown Method | Riptide API Docs",
    "keywords": "TcpServer.Shutdown Method Namespace: Riptide.Transports.Tcp Assembly: RiptideNetworking.dll Shutdown() Closes all existing connections and stops listening for new connections. public void Shutdown() Implements IServer.Shutdown()"
  },
  "api/Riptide.Transports.Tcp.TcpServer.Start.html": {
    "href": "api/Riptide.Transports.Tcp.TcpServer.Start.html",
    "title": "TcpServer.Start Method | Riptide API Docs",
    "keywords": "TcpServer.Start Method Namespace: Riptide.Transports.Tcp Assembly: RiptideNetworking.dll Start(ushort) Starts the transport and begins listening for incoming connections. public void Start(ushort port) Parameters ushort port The local port on which to listen for connections. Implements IServer.Start(ushort)"
  },
  "api/Riptide.Transports.Tcp.TcpServer.html": {
    "href": "api/Riptide.Transports.Tcp.TcpServer.html",
    "title": "TcpServer Class | Riptide API Docs",
    "keywords": "TcpServer Class Namespace: Riptide.Transports.Tcp Assembly: RiptideNetworking.dll A server which can accept connections from TcpClients. public class TcpServer : TcpPeer, IServer, IPeer Inheritance object TcpPeer TcpServer Implements IServer IPeer Inherited Members TcpPeer.Disconnected TcpPeer.DefaultSocketBufferSize TcpPeer.socketBufferSize TcpPeer.socket TcpPeer.OnDisconnected(Connection, DisconnectReason) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TcpServer(int) Initializes the transport. TcpServer(IPAddress, int) Initializes the transport, binding the socket to a specific IP address. Properties MaxPendingConnections The maximum number of pending connections to allow at any given time. Port The local port that the server is running on. Methods Close(Connection) Closes an active connection. OnConnected(Connection) Invokes the Connected event. OnDataReceived(int, TcpConnection) Handles received data. Poll() Initiates handling of any received messages. Shutdown() Closes all existing connections and stops listening for new connections. Start(ushort) Starts the transport and begins listening for incoming connections. Events Connected Invoked when a connection is established at the transport level. DataReceived Invoked when data is received by the transport."
  },
  "api/Riptide.Transports.Tcp.html": {
    "href": "api/Riptide.Transports.Tcp.html",
    "title": "Riptide.Transports.Tcp Namespace | Riptide API Docs",
    "keywords": "Riptide.Transports.Tcp Namespace Provides a low level transport which communicates via TCP sockets. This transport is intended to act as a fallback for situations where Riptide's default UDP transport can't establish a connection. It primarily exists because Apple's app review center appears to have issues handling UDP traffic, with UDP-only applications frequently being rejected due to connection issues. Apple's devices do support UDP traffic—it's only their app review center that apparently doesn't allow UDP. To work around this, you can start by trying to connect with the UDP transport, and then automatically try again with the TCP transport if that connection fails. This way your end users should end up connecting via UDP, and TCP will only be used in cases where UDP doesn't work. This would obviously require a Server using the TCP transport to be running in addition to a Server using the UDP transport, as Servers cannot use both simultaneously. Important Due to its very niche purpose, the TCP transport has undergone limited testing and may have more unresolved issues than usual. Classes TcpClient A client which can connect to a TcpServer. TcpConnection Represents a connection to a TcpServer or TcpClient. TcpPeer Provides base send & receive functionality for TcpServer and TcpClient. TcpServer A server which can accept connections from TcpClients."
  },
  "api/Riptide.Transports.Udp.SocketMode.html": {
    "href": "api/Riptide.Transports.Udp.SocketMode.html",
    "title": "SocketMode Enum | Riptide API Docs",
    "keywords": "SocketMode Enum Namespace: Riptide.Transports.Udp Assembly: RiptideNetworking.dll The kind of socket to create. public enum SocketMode Fields Both Dual-mode. Works with both IPv4 and IPv6. IPv4Only IPv4 only mode. IPv6Only IPv6 only mode."
  },
  "api/Riptide.Transports.Udp.UdpClient.-ctor.html": {
    "href": "api/Riptide.Transports.Udp.UdpClient.-ctor.html",
    "title": "UdpClient Constructor | Riptide API Docs",
    "keywords": "UdpClient Constructor Namespace: Riptide.Transports.Udp Assembly: RiptideNetworking.dll UdpClient(SocketMode, int) Initializes the transport. public UdpClient(SocketMode mode = SocketMode.Both, int socketBufferSize = 1048576) Parameters SocketMode mode Whether to create an IPv4 only, IPv6 only, or dual-mode socket. int socketBufferSize How big the socket's send and receive buffers should be."
  },
  "api/Riptide.Transports.Udp.UdpClient.Connect.html": {
    "href": "api/Riptide.Transports.Udp.UdpClient.Connect.html",
    "title": "UdpClient.Connect Method | Riptide API Docs",
    "keywords": "UdpClient.Connect Method Namespace: Riptide.Transports.Udp Assembly: RiptideNetworking.dll Connect(string, out Connection, out string) Starts the transport and attempts to connect to the given host address. public bool Connect(string hostAddress, out Connection connection, out string connectError) Parameters string hostAddress The host address to connect to. Connection connection The pending connection. null if an issue occurred. string connectError The error message associated with the issue that occurred, if any. Returns bool true if a connection attempt will be made. false if an issue occurred (such as hostAddress being in an invalid format) and a connection attempt will not be made. Implements IClient.Connect(string, out Connection, out string) Remarks Expects the host address to consist of an IP and port, separated by a colon. For example: 127.0.0.1:7777."
  },
  "api/Riptide.Transports.Udp.UdpClient.Connected.html": {
    "href": "api/Riptide.Transports.Udp.UdpClient.Connected.html",
    "title": "UdpClient.Connected Event | Riptide API Docs",
    "keywords": "UdpClient.Connected Event Namespace: Riptide.Transports.Udp Assembly: RiptideNetworking.dll Invoked when a connection is established at the transport level. public event EventHandler Connected Implements Connected Returns EventHandler"
  },
  "api/Riptide.Transports.Udp.UdpClient.ConnectionFailed.html": {
    "href": "api/Riptide.Transports.Udp.UdpClient.ConnectionFailed.html",
    "title": "UdpClient.ConnectionFailed Event | Riptide API Docs",
    "keywords": "UdpClient.ConnectionFailed Event Namespace: Riptide.Transports.Udp Assembly: RiptideNetworking.dll Invoked when a connection attempt fails at the transport level. public event EventHandler ConnectionFailed Implements ConnectionFailed Returns EventHandler"
  },
  "api/Riptide.Transports.Udp.UdpClient.DataReceived.html": {
    "href": "api/Riptide.Transports.Udp.UdpClient.DataReceived.html",
    "title": "UdpClient.DataReceived Event | Riptide API Docs",
    "keywords": "UdpClient.DataReceived Event Namespace: Riptide.Transports.Udp Assembly: RiptideNetworking.dll Invoked when data is received by the transport. public event EventHandler<DataReceivedEventArgs> DataReceived Implements DataReceived Returns EventHandler<DataReceivedEventArgs>"
  },
  "api/Riptide.Transports.Udp.UdpClient.Disconnect.html": {
    "href": "api/Riptide.Transports.Udp.UdpClient.Disconnect.html",
    "title": "UdpClient.Disconnect Method | Riptide API Docs",
    "keywords": "UdpClient.Disconnect Method Namespace: Riptide.Transports.Udp Assembly: RiptideNetworking.dll Disconnect() Closes the connection to the server. public void Disconnect() Implements IClient.Disconnect()"
  },
  "api/Riptide.Transports.Udp.UdpClient.OnConnected.html": {
    "href": "api/Riptide.Transports.Udp.UdpClient.OnConnected.html",
    "title": "UdpClient.OnConnected Method | Riptide API Docs",
    "keywords": "UdpClient.OnConnected Method Namespace: Riptide.Transports.Udp Assembly: RiptideNetworking.dll OnConnected() Invokes the Connected event. protected virtual void OnConnected()"
  },
  "api/Riptide.Transports.Udp.UdpClient.OnConnectionFailed.html": {
    "href": "api/Riptide.Transports.Udp.UdpClient.OnConnectionFailed.html",
    "title": "UdpClient.OnConnectionFailed Method | Riptide API Docs",
    "keywords": "UdpClient.OnConnectionFailed Method Namespace: Riptide.Transports.Udp Assembly: RiptideNetworking.dll OnConnectionFailed() Invokes the ConnectionFailed event. protected virtual void OnConnectionFailed()"
  },
  "api/Riptide.Transports.Udp.UdpClient.OnDataReceived.html": {
    "href": "api/Riptide.Transports.Udp.UdpClient.OnDataReceived.html",
    "title": "UdpClient.OnDataReceived Method | Riptide API Docs",
    "keywords": "UdpClient.OnDataReceived Method Namespace: Riptide.Transports.Udp Assembly: RiptideNetworking.dll OnDataReceived(byte[], int, IPEndPoint) Handles received data. protected override void OnDataReceived(byte[] dataBuffer, int amount, IPEndPoint fromEndPoint) Parameters byte[] dataBuffer A byte array containing the received data. int amount The number of bytes in dataBuffer used by the received data. IPEndPoint fromEndPoint The endpoint from which the data was received. Overrides UdpPeer.OnDataReceived(byte[], int, IPEndPoint)"
  },
  "api/Riptide.Transports.Udp.UdpClient.html": {
    "href": "api/Riptide.Transports.Udp.UdpClient.html",
    "title": "UdpClient Class | Riptide API Docs",
    "keywords": "UdpClient Class Namespace: Riptide.Transports.Udp Assembly: RiptideNetworking.dll A client which can connect to a UdpServer. public class UdpClient : UdpPeer, IClient, IPeer Inheritance object UdpPeer UdpClient Implements IClient IPeer Inherited Members UdpPeer.Disconnected UdpPeer.DefaultSocketBufferSize UdpPeer.mode UdpPeer.Poll() UdpPeer.OpenSocket(IPAddress, ushort) UdpPeer.CloseSocket() UdpPeer.OnDisconnected(Connection, DisconnectReason) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UdpClient(SocketMode, int) Initializes the transport. Methods Connect(string, out Connection, out string) Starts the transport and attempts to connect to the given host address. Disconnect() Closes the connection to the server. OnConnected() Invokes the Connected event. OnConnectionFailed() Invokes the ConnectionFailed event. OnDataReceived(byte[], int, IPEndPoint) Handles received data. Events Connected Invoked when a connection is established at the transport level. ConnectionFailed Invoked when a connection attempt fails at the transport level. DataReceived Invoked when data is received by the transport."
  },
  "api/Riptide.Transports.Udp.UdpConnection.Equals.html": {
    "href": "api/Riptide.Transports.Udp.UdpConnection.Equals.html",
    "title": "UdpConnection.Equals Method | Riptide API Docs",
    "keywords": "UdpConnection.Equals Method Namespace: Riptide.Transports.Udp Assembly: RiptideNetworking.dll Overloads Equals(object) Equals(UdpConnection) Equals(object) public override bool Equals(object obj) Parameters object obj Returns bool Overrides object.Equals(object) Equals(UdpConnection) public bool Equals(UdpConnection other) Parameters UdpConnection other Returns bool Implements IEquatable<T>.Equals(T)"
  },
  "api/Riptide.Transports.Udp.UdpConnection.GetHashCode.html": {
    "href": "api/Riptide.Transports.Udp.UdpConnection.GetHashCode.html",
    "title": "UdpConnection.GetHashCode Method | Riptide API Docs",
    "keywords": "UdpConnection.GetHashCode Method Namespace: Riptide.Transports.Udp Assembly: RiptideNetworking.dll GetHashCode() public override int GetHashCode() Returns int Overrides object.GetHashCode()"
  },
  "api/Riptide.Transports.Udp.UdpConnection.RemoteEndPoint.html": {
    "href": "api/Riptide.Transports.Udp.UdpConnection.RemoteEndPoint.html",
    "title": "UdpConnection.RemoteEndPoint Field | Riptide API Docs",
    "keywords": "UdpConnection.RemoteEndPoint Field Namespace: Riptide.Transports.Udp Assembly: RiptideNetworking.dll The endpoint representing the other end of the connection. public readonly IPEndPoint RemoteEndPoint Returns IPEndPoint"
  },
  "api/Riptide.Transports.Udp.UdpConnection.Send.html": {
    "href": "api/Riptide.Transports.Udp.UdpConnection.Send.html",
    "title": "UdpConnection.Send Method | Riptide API Docs",
    "keywords": "UdpConnection.Send Method Namespace: Riptide.Transports.Udp Assembly: RiptideNetworking.dll Send(byte[], int) Sends data. protected override void Send(byte[] dataBuffer, int amount) Parameters byte[] dataBuffer The array containing the data. int amount The number of bytes in the array which should be sent. Overrides Connection.Send(byte[], int)"
  },
  "api/Riptide.Transports.Udp.UdpConnection.ToString.html": {
    "href": "api/Riptide.Transports.Udp.UdpConnection.ToString.html",
    "title": "UdpConnection.ToString Method | Riptide API Docs",
    "keywords": "UdpConnection.ToString Method Namespace: Riptide.Transports.Udp Assembly: RiptideNetworking.dll ToString() public override string ToString() Returns string Overrides object.ToString()"
  },
  "api/Riptide.Transports.Udp.UdpConnection.html": {
    "href": "api/Riptide.Transports.Udp.UdpConnection.html",
    "title": "UdpConnection Class | Riptide API Docs",
    "keywords": "UdpConnection Class Namespace: Riptide.Transports.Udp Assembly: RiptideNetworking.dll Represents a connection to a UdpServer or UdpClient. public class UdpConnection : Connection, IEquatable<UdpConnection> Inheritance object Connection UdpConnection Implements IEquatable<UdpConnection> Inherited Members Connection.NotifyDelivered Connection.NotifyLost Connection.NotifyReceived Connection.ReliableDelivered Connection.Id Connection.IsNotConnected Connection.IsConnecting Connection.IsPending Connection.IsConnected Connection.RTT Connection.SmoothRTT Connection.TimeoutTime Connection.CanTimeout Connection.CanQualityDisconnect Connection.Metrics Connection.MaxAvgSendAttempts Connection.AvgSendAttemptsResilience Connection.MaxSendAttempts Connection.MaxNotifyLoss Connection.NotifyLossResilience Connection.ResetTimeout() Connection.Send(Message, bool) Connection.OnNotifyDelivered(ushort) Connection.OnNotifyLost(ushort) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields RemoteEndPoint The endpoint representing the other end of the connection. Methods Equals(UdpConnection) Equals(object) GetHashCode() Send(byte[], int) Sends data. ToString() Operators operator ==(UdpConnection, UdpConnection) operator !=(UdpConnection, UdpConnection)"
  },
  "api/Riptide.Transports.Udp.UdpConnection.op_Equality.html": {
    "href": "api/Riptide.Transports.Udp.UdpConnection.op_Equality.html",
    "title": "UdpConnection.operator == Operator | Riptide API Docs",
    "keywords": "UdpConnection.operator == Operator Namespace: Riptide.Transports.Udp Assembly: RiptideNetworking.dll operator ==(UdpConnection, UdpConnection) public static bool operator ==(UdpConnection left, UdpConnection right) Parameters UdpConnection left UdpConnection right Returns bool"
  },
  "api/Riptide.Transports.Udp.UdpConnection.op_Inequality.html": {
    "href": "api/Riptide.Transports.Udp.UdpConnection.op_Inequality.html",
    "title": "UdpConnection.operator != Operator | Riptide API Docs",
    "keywords": "UdpConnection.operator != Operator Namespace: Riptide.Transports.Udp Assembly: RiptideNetworking.dll operator !=(UdpConnection, UdpConnection) public static bool operator !=(UdpConnection left, UdpConnection right) Parameters UdpConnection left UdpConnection right Returns bool"
  },
  "api/Riptide.Transports.Udp.UdpPeer.-ctor.html": {
    "href": "api/Riptide.Transports.Udp.UdpPeer.-ctor.html",
    "title": "UdpPeer Constructor | Riptide API Docs",
    "keywords": "UdpPeer Constructor Namespace: Riptide.Transports.Udp Assembly: RiptideNetworking.dll UdpPeer(SocketMode, int) Initializes the transport. protected UdpPeer(SocketMode mode, int socketBufferSize) Parameters SocketMode mode Whether to create an IPv4 only, IPv6 only, or dual-mode socket. int socketBufferSize How big the socket's send and receive buffers should be."
  },
  "api/Riptide.Transports.Udp.UdpPeer.CloseSocket.html": {
    "href": "api/Riptide.Transports.Udp.UdpPeer.CloseSocket.html",
    "title": "UdpPeer.CloseSocket Method | Riptide API Docs",
    "keywords": "UdpPeer.CloseSocket Method Namespace: Riptide.Transports.Udp Assembly: RiptideNetworking.dll CloseSocket() Closes the socket and stops the transport. protected void CloseSocket()"
  },
  "api/Riptide.Transports.Udp.UdpPeer.DefaultSocketBufferSize.html": {
    "href": "api/Riptide.Transports.Udp.UdpPeer.DefaultSocketBufferSize.html",
    "title": "UdpPeer.DefaultSocketBufferSize Field | Riptide API Docs",
    "keywords": "UdpPeer.DefaultSocketBufferSize Field Namespace: Riptide.Transports.Udp Assembly: RiptideNetworking.dll The default size used for the socket's send and receive buffers. protected const int DefaultSocketBufferSize = 1048576 Returns int"
  },
  "api/Riptide.Transports.Udp.UdpPeer.Disconnected.html": {
    "href": "api/Riptide.Transports.Udp.UdpPeer.Disconnected.html",
    "title": "UdpPeer.Disconnected Event | Riptide API Docs",
    "keywords": "UdpPeer.Disconnected Event Namespace: Riptide.Transports.Udp Assembly: RiptideNetworking.dll Invoked when a disconnection is initiated or detected by the transport. public event EventHandler<DisconnectedEventArgs> Disconnected Returns EventHandler<DisconnectedEventArgs>"
  },
  "api/Riptide.Transports.Udp.UdpPeer.OnDataReceived.html": {
    "href": "api/Riptide.Transports.Udp.UdpPeer.OnDataReceived.html",
    "title": "UdpPeer.OnDataReceived Method | Riptide API Docs",
    "keywords": "UdpPeer.OnDataReceived Method Namespace: Riptide.Transports.Udp Assembly: RiptideNetworking.dll OnDataReceived(byte[], int, IPEndPoint) Handles received data. protected abstract void OnDataReceived(byte[] dataBuffer, int amount, IPEndPoint fromEndPoint) Parameters byte[] dataBuffer A byte array containing the received data. int amount The number of bytes in dataBuffer used by the received data. IPEndPoint fromEndPoint The endpoint from which the data was received."
  },
  "api/Riptide.Transports.Udp.UdpPeer.OnDisconnected.html": {
    "href": "api/Riptide.Transports.Udp.UdpPeer.OnDisconnected.html",
    "title": "UdpPeer.OnDisconnected Method | Riptide API Docs",
    "keywords": "UdpPeer.OnDisconnected Method Namespace: Riptide.Transports.Udp Assembly: RiptideNetworking.dll OnDisconnected(Connection, DisconnectReason) Invokes the Disconnected event. protected virtual void OnDisconnected(Connection connection, DisconnectReason reason) Parameters Connection connection The closed connection. DisconnectReason reason The reason for the disconnection."
  },
  "api/Riptide.Transports.Udp.UdpPeer.OpenSocket.html": {
    "href": "api/Riptide.Transports.Udp.UdpPeer.OpenSocket.html",
    "title": "UdpPeer.OpenSocket Method | Riptide API Docs",
    "keywords": "UdpPeer.OpenSocket Method Namespace: Riptide.Transports.Udp Assembly: RiptideNetworking.dll OpenSocket(IPAddress, ushort) Opens the socket and starts the transport. protected void OpenSocket(IPAddress listenAddress = null, ushort port = 0) Parameters IPAddress listenAddress The IP address to bind the socket to, if any. ushort port The port to bind the socket to."
  },
  "api/Riptide.Transports.Udp.UdpPeer.Poll.html": {
    "href": "api/Riptide.Transports.Udp.UdpPeer.Poll.html",
    "title": "UdpPeer.Poll Method | Riptide API Docs",
    "keywords": "UdpPeer.Poll Method Namespace: Riptide.Transports.Udp Assembly: RiptideNetworking.dll Poll() Initiates handling of any received messages. public void Poll()"
  },
  "api/Riptide.Transports.Udp.UdpPeer.html": {
    "href": "api/Riptide.Transports.Udp.UdpPeer.html",
    "title": "UdpPeer Class | Riptide API Docs",
    "keywords": "UdpPeer Class Namespace: Riptide.Transports.Udp Assembly: RiptideNetworking.dll Provides base send & receive functionality for UdpServer and UdpClient. public abstract class UdpPeer Inheritance object UdpPeer UdpClient UdpServer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UdpPeer(SocketMode, int) Initializes the transport. Fields DefaultSocketBufferSize The default size used for the socket's send and receive buffers. mode Whether to create an IPv4 only, IPv6 only, or dual-mode socket. Methods CloseSocket() Closes the socket and stops the transport. OnDataReceived(byte[], int, IPEndPoint) Handles received data. OnDisconnected(Connection, DisconnectReason) Invokes the Disconnected event. OpenSocket(IPAddress, ushort) Opens the socket and starts the transport. Poll() Initiates handling of any received messages. Events Disconnected Invoked when a disconnection is initiated or detected by the transport."
  },
  "api/Riptide.Transports.Udp.UdpPeer.mode.html": {
    "href": "api/Riptide.Transports.Udp.UdpPeer.mode.html",
    "title": "UdpPeer.mode Field | Riptide API Docs",
    "keywords": "UdpPeer.mode Field Namespace: Riptide.Transports.Udp Assembly: RiptideNetworking.dll Whether to create an IPv4 only, IPv6 only, or dual-mode socket. protected readonly SocketMode mode Returns SocketMode"
  },
  "api/Riptide.Transports.Udp.UdpServer.-ctor.html": {
    "href": "api/Riptide.Transports.Udp.UdpServer.-ctor.html",
    "title": "UdpServer Constructor | Riptide API Docs",
    "keywords": "UdpServer Constructor Namespace: Riptide.Transports.Udp Assembly: RiptideNetworking.dll Overloads UdpServer(SocketMode, int) Initializes the transport. UdpServer(IPAddress, int) Initializes the transport, binding the socket to a specific IP address. UdpServer(SocketMode, int) Initializes the transport. public UdpServer(SocketMode mode = SocketMode.Both, int socketBufferSize = 1048576) Parameters SocketMode mode Whether to create an IPv4 only, IPv6 only, or dual-mode socket. int socketBufferSize How big the socket's send and receive buffers should be. UdpServer(IPAddress, int) Initializes the transport, binding the socket to a specific IP address. public UdpServer(IPAddress listenAddress, int socketBufferSize = 1048576) Parameters IPAddress listenAddress The IP address to bind the socket to. int socketBufferSize How big the socket's send and receive buffers should be."
  },
  "api/Riptide.Transports.Udp.UdpServer.Close.html": {
    "href": "api/Riptide.Transports.Udp.UdpServer.Close.html",
    "title": "UdpServer.Close Method | Riptide API Docs",
    "keywords": "UdpServer.Close Method Namespace: Riptide.Transports.Udp Assembly: RiptideNetworking.dll Close(Connection) Closes an active connection. public void Close(Connection connection) Parameters Connection connection The connection to close. Implements IServer.Close(Connection)"
  },
  "api/Riptide.Transports.Udp.UdpServer.Connected.html": {
    "href": "api/Riptide.Transports.Udp.UdpServer.Connected.html",
    "title": "UdpServer.Connected Event | Riptide API Docs",
    "keywords": "UdpServer.Connected Event Namespace: Riptide.Transports.Udp Assembly: RiptideNetworking.dll Invoked when a connection is established at the transport level. public event EventHandler<ConnectedEventArgs> Connected Implements Connected Returns EventHandler<ConnectedEventArgs>"
  },
  "api/Riptide.Transports.Udp.UdpServer.DataReceived.html": {
    "href": "api/Riptide.Transports.Udp.UdpServer.DataReceived.html",
    "title": "UdpServer.DataReceived Event | Riptide API Docs",
    "keywords": "UdpServer.DataReceived Event Namespace: Riptide.Transports.Udp Assembly: RiptideNetworking.dll Invoked when data is received by the transport. public event EventHandler<DataReceivedEventArgs> DataReceived Implements DataReceived Returns EventHandler<DataReceivedEventArgs>"
  },
  "api/Riptide.Transports.Udp.UdpServer.OnConnected.html": {
    "href": "api/Riptide.Transports.Udp.UdpServer.OnConnected.html",
    "title": "UdpServer.OnConnected Method | Riptide API Docs",
    "keywords": "UdpServer.OnConnected Method Namespace: Riptide.Transports.Udp Assembly: RiptideNetworking.dll OnConnected(Connection) Invokes the Connected event. protected virtual void OnConnected(Connection connection) Parameters Connection connection The successfully established connection."
  },
  "api/Riptide.Transports.Udp.UdpServer.OnDataReceived.html": {
    "href": "api/Riptide.Transports.Udp.UdpServer.OnDataReceived.html",
    "title": "UdpServer.OnDataReceived Method | Riptide API Docs",
    "keywords": "UdpServer.OnDataReceived Method Namespace: Riptide.Transports.Udp Assembly: RiptideNetworking.dll OnDataReceived(byte[], int, IPEndPoint) Handles received data. protected override void OnDataReceived(byte[] dataBuffer, int amount, IPEndPoint fromEndPoint) Parameters byte[] dataBuffer A byte array containing the received data. int amount The number of bytes in dataBuffer used by the received data. IPEndPoint fromEndPoint The endpoint from which the data was received. Overrides UdpPeer.OnDataReceived(byte[], int, IPEndPoint)"
  },
  "api/Riptide.Transports.Udp.UdpServer.Port.html": {
    "href": "api/Riptide.Transports.Udp.UdpServer.Port.html",
    "title": "UdpServer.Port Property | Riptide API Docs",
    "keywords": "UdpServer.Port Property Namespace: Riptide.Transports.Udp Assembly: RiptideNetworking.dll Port The local port that the server is running on. public ushort Port { get; } Property Value ushort Implements IServer.Port"
  },
  "api/Riptide.Transports.Udp.UdpServer.Shutdown.html": {
    "href": "api/Riptide.Transports.Udp.UdpServer.Shutdown.html",
    "title": "UdpServer.Shutdown Method | Riptide API Docs",
    "keywords": "UdpServer.Shutdown Method Namespace: Riptide.Transports.Udp Assembly: RiptideNetworking.dll Shutdown() Closes all existing connections and stops listening for new connections. public void Shutdown() Implements IServer.Shutdown()"
  },
  "api/Riptide.Transports.Udp.UdpServer.Start.html": {
    "href": "api/Riptide.Transports.Udp.UdpServer.Start.html",
    "title": "UdpServer.Start Method | Riptide API Docs",
    "keywords": "UdpServer.Start Method Namespace: Riptide.Transports.Udp Assembly: RiptideNetworking.dll Start(ushort) Starts the transport and begins listening for incoming connections. public void Start(ushort port) Parameters ushort port The local port on which to listen for connections. Implements IServer.Start(ushort)"
  },
  "api/Riptide.Transports.Udp.UdpServer.html": {
    "href": "api/Riptide.Transports.Udp.UdpServer.html",
    "title": "UdpServer Class | Riptide API Docs",
    "keywords": "UdpServer Class Namespace: Riptide.Transports.Udp Assembly: RiptideNetworking.dll A server which can accept connections from UdpClients. public class UdpServer : UdpPeer, IServer, IPeer Inheritance object UdpPeer UdpServer Implements IServer IPeer Inherited Members UdpPeer.Disconnected UdpPeer.DefaultSocketBufferSize UdpPeer.mode UdpPeer.Poll() UdpPeer.OpenSocket(IPAddress, ushort) UdpPeer.CloseSocket() UdpPeer.OnDisconnected(Connection, DisconnectReason) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UdpServer(SocketMode, int) Initializes the transport. UdpServer(IPAddress, int) Initializes the transport, binding the socket to a specific IP address. Properties Port The local port that the server is running on. Methods Close(Connection) Closes an active connection. OnConnected(Connection) Invokes the Connected event. OnDataReceived(byte[], int, IPEndPoint) Handles received data. Shutdown() Closes all existing connections and stops listening for new connections. Start(ushort) Starts the transport and begins listening for incoming connections. Events Connected Invoked when a connection is established at the transport level. DataReceived Invoked when data is received by the transport."
  },
  "api/Riptide.Transports.Udp.html": {
    "href": "api/Riptide.Transports.Udp.html",
    "title": "Riptide.Transports.Udp Namespace | Riptide API Docs",
    "keywords": "Riptide.Transports.Udp Namespace Provides a low level transport which communicates via UDP sockets. Classes UdpClient A client which can connect to a UdpServer. UdpConnection Represents a connection to a UdpServer or UdpClient. UdpPeer Provides base send & receive functionality for UdpServer and UdpClient. UdpServer A server which can accept connections from UdpClients. Enums SocketMode The kind of socket to create."
  },
  "api/Riptide.Transports.html": {
    "href": "api/Riptide.Transports.html",
    "title": "Riptide.Transports Namespace | Riptide API Docs",
    "keywords": "Riptide.Transports Namespace Provides low level transport-related functionality. Classes ConnectedEventArgs Contains event data for when a server's transport successfully establishes a connection to a client. DataReceivedEventArgs Contains event data for when a server's or client's transport receives data. DisconnectedEventArgs Contains event data for when a server's or client's transport initiates or detects a disconnection. Interfaces IClient Defines methods, properties, and events which every transport's client must implement. IPeer Defines methods, properties, and events which every transport's server and client must implement. IServer Defines methods, properties, and events which every transport's server must implement. Enums MessageHeader The header type of a Message."
  },
  "api/Riptide.Utils.ConnectionMetrics.-ctor.html": {
    "href": "api/Riptide.Utils.ConnectionMetrics.-ctor.html",
    "title": "ConnectionMetrics Constructor | Riptide API Docs",
    "keywords": "ConnectionMetrics Constructor Namespace: Riptide.Utils Assembly: RiptideNetworking.dll ConnectionMetrics() Initializes metrics. public ConnectionMetrics()"
  },
  "api/Riptide.Utils.ConnectionMetrics.BytesIn.html": {
    "href": "api/Riptide.Utils.ConnectionMetrics.BytesIn.html",
    "title": "ConnectionMetrics.BytesIn Property | Riptide API Docs",
    "keywords": "ConnectionMetrics.BytesIn Property Namespace: Riptide.Utils Assembly: RiptideNetworking.dll BytesIn The total number of bytes received across all send modes since the last Reset() call, including those in duplicate and, in the case of notify messages, out-of-order packets. Does not include packet header bytes, which may vary by transport. public int BytesIn { get; } Property Value int"
  },
  "api/Riptide.Utils.ConnectionMetrics.BytesOut.html": {
    "href": "api/Riptide.Utils.ConnectionMetrics.BytesOut.html",
    "title": "ConnectionMetrics.BytesOut Property | Riptide API Docs",
    "keywords": "ConnectionMetrics.BytesOut Property Namespace: Riptide.Utils Assembly: RiptideNetworking.dll BytesOut The total number of bytes sent across all send modes since the last Reset() call, including those in automatic resends. Does not include packet header bytes, which may vary by transport. public int BytesOut { get; } Property Value int"
  },
  "api/Riptide.Utils.ConnectionMetrics.MessagesIn.html": {
    "href": "api/Riptide.Utils.ConnectionMetrics.MessagesIn.html",
    "title": "ConnectionMetrics.MessagesIn Property | Riptide API Docs",
    "keywords": "ConnectionMetrics.MessagesIn Property Namespace: Riptide.Utils Assembly: RiptideNetworking.dll MessagesIn The total number of messages received across all send modes since the last Reset() call, including duplicate and out-of-order notify messages. public int MessagesIn { get; } Property Value int"
  },
  "api/Riptide.Utils.ConnectionMetrics.MessagesOut.html": {
    "href": "api/Riptide.Utils.ConnectionMetrics.MessagesOut.html",
    "title": "ConnectionMetrics.MessagesOut Property | Riptide API Docs",
    "keywords": "ConnectionMetrics.MessagesOut Property Namespace: Riptide.Utils Assembly: RiptideNetworking.dll MessagesOut The total number of messages sent across all send modes since the last Reset() call, including automatic resends. public int MessagesOut { get; } Property Value int"
  },
  "api/Riptide.Utils.ConnectionMetrics.NotifyBytesIn.html": {
    "href": "api/Riptide.Utils.ConnectionMetrics.NotifyBytesIn.html",
    "title": "ConnectionMetrics.NotifyBytesIn Property | Riptide API Docs",
    "keywords": "ConnectionMetrics.NotifyBytesIn Property Namespace: Riptide.Utils Assembly: RiptideNetworking.dll NotifyBytesIn The total number of bytes received in notify messages since the last Reset() call, including those in duplicate and out-of-order packets. Does not include packet header bytes, which may vary by transport. public int NotifyBytesIn { get; } Property Value int"
  },
  "api/Riptide.Utils.ConnectionMetrics.NotifyBytesOut.html": {
    "href": "api/Riptide.Utils.ConnectionMetrics.NotifyBytesOut.html",
    "title": "ConnectionMetrics.NotifyBytesOut Property | Riptide API Docs",
    "keywords": "ConnectionMetrics.NotifyBytesOut Property Namespace: Riptide.Utils Assembly: RiptideNetworking.dll NotifyBytesOut The total number of bytes sent in notify messages since the last Reset() call. Does not include packet header bytes, which may vary by transport. public int NotifyBytesOut { get; } Property Value int"
  },
  "api/Riptide.Utils.ConnectionMetrics.NotifyDelivered.html": {
    "href": "api/Riptide.Utils.ConnectionMetrics.NotifyDelivered.html",
    "title": "ConnectionMetrics.NotifyDelivered Property | Riptide API Docs",
    "keywords": "ConnectionMetrics.NotifyDelivered Property Namespace: Riptide.Utils Assembly: RiptideNetworking.dll NotifyDelivered The number of notify messages delivered since the last Reset() call. public int NotifyDelivered { get; } Property Value int"
  },
  "api/Riptide.Utils.ConnectionMetrics.NotifyDiscarded.html": {
    "href": "api/Riptide.Utils.ConnectionMetrics.NotifyDiscarded.html",
    "title": "ConnectionMetrics.NotifyDiscarded Property | Riptide API Docs",
    "keywords": "ConnectionMetrics.NotifyDiscarded Property Namespace: Riptide.Utils Assembly: RiptideNetworking.dll NotifyDiscarded The number of duplicate or out-of-order notify messages which were received, but discarded (not handled) since the last Reset() call. public int NotifyDiscarded { get; } Property Value int"
  },
  "api/Riptide.Utils.ConnectionMetrics.NotifyIn.html": {
    "href": "api/Riptide.Utils.ConnectionMetrics.NotifyIn.html",
    "title": "ConnectionMetrics.NotifyIn Property | Riptide API Docs",
    "keywords": "ConnectionMetrics.NotifyIn Property Namespace: Riptide.Utils Assembly: RiptideNetworking.dll NotifyIn The number of notify messages received since the last Reset() call, including duplicate and out-of-order ones. public int NotifyIn { get; } Property Value int"
  },
  "api/Riptide.Utils.ConnectionMetrics.NotifyLost.html": {
    "href": "api/Riptide.Utils.ConnectionMetrics.NotifyLost.html",
    "title": "ConnectionMetrics.NotifyLost Property | Riptide API Docs",
    "keywords": "ConnectionMetrics.NotifyLost Property Namespace: Riptide.Utils Assembly: RiptideNetworking.dll NotifyLost The number of notify messages lost since the last Reset() call. public int NotifyLost { get; } Property Value int"
  },
  "api/Riptide.Utils.ConnectionMetrics.NotifyOut.html": {
    "href": "api/Riptide.Utils.ConnectionMetrics.NotifyOut.html",
    "title": "ConnectionMetrics.NotifyOut Property | Riptide API Docs",
    "keywords": "ConnectionMetrics.NotifyOut Property Namespace: Riptide.Utils Assembly: RiptideNetworking.dll NotifyOut The number of notify messages sent since the last Reset() call. public int NotifyOut { get; } Property Value int"
  },
  "api/Riptide.Utils.ConnectionMetrics.ReliableBytesIn.html": {
    "href": "api/Riptide.Utils.ConnectionMetrics.ReliableBytesIn.html",
    "title": "ConnectionMetrics.ReliableBytesIn Property | Riptide API Docs",
    "keywords": "ConnectionMetrics.ReliableBytesIn Property Namespace: Riptide.Utils Assembly: RiptideNetworking.dll ReliableBytesIn The total number of bytes received in reliable messages since the last Reset() call, including those in duplicate packets. Does not include packet header bytes, which may vary by transport. public int ReliableBytesIn { get; } Property Value int"
  },
  "api/Riptide.Utils.ConnectionMetrics.ReliableBytesOut.html": {
    "href": "api/Riptide.Utils.ConnectionMetrics.ReliableBytesOut.html",
    "title": "ConnectionMetrics.ReliableBytesOut Property | Riptide API Docs",
    "keywords": "ConnectionMetrics.ReliableBytesOut Property Namespace: Riptide.Utils Assembly: RiptideNetworking.dll ReliableBytesOut The total number of bytes sent in reliable messages since the last Reset() call, including those in automatic resends. Does not include packet header bytes, which may vary by transport. public int ReliableBytesOut { get; } Property Value int"
  },
  "api/Riptide.Utils.ConnectionMetrics.ReliableDiscarded.html": {
    "href": "api/Riptide.Utils.ConnectionMetrics.ReliableDiscarded.html",
    "title": "ConnectionMetrics.ReliableDiscarded Property | Riptide API Docs",
    "keywords": "ConnectionMetrics.ReliableDiscarded Property Namespace: Riptide.Utils Assembly: RiptideNetworking.dll ReliableDiscarded The number of duplicate reliable messages which were received, but discarded (and not handled) since the last Reset() call. public int ReliableDiscarded { get; } Property Value int"
  },
  "api/Riptide.Utils.ConnectionMetrics.ReliableIn.html": {
    "href": "api/Riptide.Utils.ConnectionMetrics.ReliableIn.html",
    "title": "ConnectionMetrics.ReliableIn Property | Riptide API Docs",
    "keywords": "ConnectionMetrics.ReliableIn Property Namespace: Riptide.Utils Assembly: RiptideNetworking.dll ReliableIn The number of reliable messages received since the last Reset() call, including duplicates. public int ReliableIn { get; } Property Value int"
  },
  "api/Riptide.Utils.ConnectionMetrics.ReliableOut.html": {
    "href": "api/Riptide.Utils.ConnectionMetrics.ReliableOut.html",
    "title": "ConnectionMetrics.ReliableOut Property | Riptide API Docs",
    "keywords": "ConnectionMetrics.ReliableOut Property Namespace: Riptide.Utils Assembly: RiptideNetworking.dll ReliableOut The number of reliable messages sent since the last Reset() call, including automatic resends (each resend adds to this value). public int ReliableOut { get; } Property Value int"
  },
  "api/Riptide.Utils.ConnectionMetrics.ReliableUniques.html": {
    "href": "api/Riptide.Utils.ConnectionMetrics.ReliableUniques.html",
    "title": "ConnectionMetrics.ReliableUniques Property | Riptide API Docs",
    "keywords": "ConnectionMetrics.ReliableUniques Property Namespace: Riptide.Utils Assembly: RiptideNetworking.dll ReliableUniques The number of unique reliable messages sent since the last Reset() call. A message only counts towards this the first time it is sent—subsequent resends are not counted. public int ReliableUniques { get; } Property Value int"
  },
  "api/Riptide.Utils.ConnectionMetrics.Reset.html": {
    "href": "api/Riptide.Utils.ConnectionMetrics.Reset.html",
    "title": "ConnectionMetrics.Reset Method | Riptide API Docs",
    "keywords": "ConnectionMetrics.Reset Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Reset() Resets all non-rolling metrics to 0. public void Reset()"
  },
  "api/Riptide.Utils.ConnectionMetrics.RollingNotifyDelivered.html": {
    "href": "api/Riptide.Utils.ConnectionMetrics.RollingNotifyDelivered.html",
    "title": "ConnectionMetrics.RollingNotifyDelivered Property | Riptide API Docs",
    "keywords": "ConnectionMetrics.RollingNotifyDelivered Property Namespace: Riptide.Utils Assembly: RiptideNetworking.dll RollingNotifyDelivered The number of notify messages delivered of the last 64 notify messages to be lost or delivered. public int RollingNotifyDelivered { get; } Property Value int"
  },
  "api/Riptide.Utils.ConnectionMetrics.RollingNotifyLossRate.html": {
    "href": "api/Riptide.Utils.ConnectionMetrics.RollingNotifyLossRate.html",
    "title": "ConnectionMetrics.RollingNotifyLossRate Property | Riptide API Docs",
    "keywords": "ConnectionMetrics.RollingNotifyLossRate Property Namespace: Riptide.Utils Assembly: RiptideNetworking.dll RollingNotifyLossRate The loss rate (0-1) among the last 64 notify messages. public float RollingNotifyLossRate { get; } Property Value float"
  },
  "api/Riptide.Utils.ConnectionMetrics.RollingNotifyLost.html": {
    "href": "api/Riptide.Utils.ConnectionMetrics.RollingNotifyLost.html",
    "title": "ConnectionMetrics.RollingNotifyLost Property | Riptide API Docs",
    "keywords": "ConnectionMetrics.RollingNotifyLost Property Namespace: Riptide.Utils Assembly: RiptideNetworking.dll RollingNotifyLost The number of notify messages lost of the last 64 notify messages to be lost or delivered. public int RollingNotifyLost { get; } Property Value int"
  },
  "api/Riptide.Utils.ConnectionMetrics.RollingReliableSends.html": {
    "href": "api/Riptide.Utils.ConnectionMetrics.RollingReliableSends.html",
    "title": "ConnectionMetrics.RollingReliableSends Field | Riptide API Docs",
    "keywords": "ConnectionMetrics.RollingReliableSends Field Namespace: Riptide.Utils Assembly: RiptideNetworking.dll The number of send attempts that were required to deliver recent reliable messages. public readonly RollingStat RollingReliableSends Returns RollingStat"
  },
  "api/Riptide.Utils.ConnectionMetrics.UnreliableBytesIn.html": {
    "href": "api/Riptide.Utils.ConnectionMetrics.UnreliableBytesIn.html",
    "title": "ConnectionMetrics.UnreliableBytesIn Property | Riptide API Docs",
    "keywords": "ConnectionMetrics.UnreliableBytesIn Property Namespace: Riptide.Utils Assembly: RiptideNetworking.dll UnreliableBytesIn The total number of bytes received in unreliable messages since the last Reset() call. Does not include packet header bytes, which may vary by transport. public int UnreliableBytesIn { get; } Property Value int"
  },
  "api/Riptide.Utils.ConnectionMetrics.UnreliableBytesOut.html": {
    "href": "api/Riptide.Utils.ConnectionMetrics.UnreliableBytesOut.html",
    "title": "ConnectionMetrics.UnreliableBytesOut Property | Riptide API Docs",
    "keywords": "ConnectionMetrics.UnreliableBytesOut Property Namespace: Riptide.Utils Assembly: RiptideNetworking.dll UnreliableBytesOut The total number of bytes sent in unreliable messages since the last Reset() call. Does not include packet header bytes, which may vary by transport. public int UnreliableBytesOut { get; } Property Value int"
  },
  "api/Riptide.Utils.ConnectionMetrics.UnreliableIn.html": {
    "href": "api/Riptide.Utils.ConnectionMetrics.UnreliableIn.html",
    "title": "ConnectionMetrics.UnreliableIn Property | Riptide API Docs",
    "keywords": "ConnectionMetrics.UnreliableIn Property Namespace: Riptide.Utils Assembly: RiptideNetworking.dll UnreliableIn The number of unreliable messages received since the last Reset() call. public int UnreliableIn { get; } Property Value int"
  },
  "api/Riptide.Utils.ConnectionMetrics.UnreliableOut.html": {
    "href": "api/Riptide.Utils.ConnectionMetrics.UnreliableOut.html",
    "title": "ConnectionMetrics.UnreliableOut Property | Riptide API Docs",
    "keywords": "ConnectionMetrics.UnreliableOut Property Namespace: Riptide.Utils Assembly: RiptideNetworking.dll UnreliableOut The number of unreliable messages sent since the last Reset() call. public int UnreliableOut { get; } Property Value int"
  },
  "api/Riptide.Utils.ConnectionMetrics.html": {
    "href": "api/Riptide.Utils.ConnectionMetrics.html",
    "title": "ConnectionMetrics Class | Riptide API Docs",
    "keywords": "ConnectionMetrics Class Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Tracks and manages various metrics of a Connection. public class ConnectionMetrics Inheritance object ConnectionMetrics Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ConnectionMetrics() Initializes metrics. Fields RollingReliableSends The number of send attempts that were required to deliver recent reliable messages. Properties BytesIn The total number of bytes received across all send modes since the last Reset() call, including those in duplicate and, in the case of notify messages, out-of-order packets. Does not include packet header bytes, which may vary by transport. BytesOut The total number of bytes sent across all send modes since the last Reset() call, including those in automatic resends. Does not include packet header bytes, which may vary by transport. MessagesIn The total number of messages received across all send modes since the last Reset() call, including duplicate and out-of-order notify messages. MessagesOut The total number of messages sent across all send modes since the last Reset() call, including automatic resends. NotifyBytesIn The total number of bytes received in notify messages since the last Reset() call, including those in duplicate and out-of-order packets. Does not include packet header bytes, which may vary by transport. NotifyBytesOut The total number of bytes sent in notify messages since the last Reset() call. Does not include packet header bytes, which may vary by transport. NotifyDelivered The number of notify messages delivered since the last Reset() call. NotifyDiscarded The number of duplicate or out-of-order notify messages which were received, but discarded (not handled) since the last Reset() call. NotifyIn The number of notify messages received since the last Reset() call, including duplicate and out-of-order ones. NotifyLost The number of notify messages lost since the last Reset() call. NotifyOut The number of notify messages sent since the last Reset() call. ReliableBytesIn The total number of bytes received in reliable messages since the last Reset() call, including those in duplicate packets. Does not include packet header bytes, which may vary by transport. ReliableBytesOut The total number of bytes sent in reliable messages since the last Reset() call, including those in automatic resends. Does not include packet header bytes, which may vary by transport. ReliableDiscarded The number of duplicate reliable messages which were received, but discarded (and not handled) since the last Reset() call. ReliableIn The number of reliable messages received since the last Reset() call, including duplicates. ReliableOut The number of reliable messages sent since the last Reset() call, including automatic resends (each resend adds to this value). ReliableUniques The number of unique reliable messages sent since the last Reset() call. A message only counts towards this the first time it is sent—subsequent resends are not counted. RollingNotifyDelivered The number of notify messages delivered of the last 64 notify messages to be lost or delivered. RollingNotifyLossRate The loss rate (0-1) among the last 64 notify messages. RollingNotifyLost The number of notify messages lost of the last 64 notify messages to be lost or delivered. UnreliableBytesIn The total number of bytes received in unreliable messages since the last Reset() call. Does not include packet header bytes, which may vary by transport. UnreliableBytesOut The total number of bytes sent in unreliable messages since the last Reset() call. Does not include packet header bytes, which may vary by transport. UnreliableIn The number of unreliable messages received since the last Reset() call. UnreliableOut The number of unreliable messages sent since the last Reset() call. Methods Reset() Resets all non-rolling metrics to 0."
  },
  "api/Riptide.Utils.Converter.BitsPerByte.html": {
    "href": "api/Riptide.Utils.Converter.BitsPerByte.html",
    "title": "Converter.BitsPerByte Field | Riptide API Docs",
    "keywords": "Converter.BitsPerByte Field Namespace: Riptide.Utils Assembly: RiptideNetworking.dll The number of bits in a byte. public const int BitsPerByte = 8 Returns int"
  },
  "api/Riptide.Utils.Converter.BitsPerULong.html": {
    "href": "api/Riptide.Utils.Converter.BitsPerULong.html",
    "title": "Converter.BitsPerULong Field | Riptide API Docs",
    "keywords": "Converter.BitsPerULong Field Namespace: Riptide.Utils Assembly: RiptideNetworking.dll The number of bits in a ulong. public const int BitsPerULong = 64 Returns int"
  },
  "api/Riptide.Utils.Converter.BoolFromBit.html": {
    "href": "api/Riptide.Utils.Converter.BoolFromBit.html",
    "title": "Converter.BoolFromBit Method | Riptide API Docs",
    "keywords": "Converter.BoolFromBit Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Overloads BoolFromBit(byte[], int) Converts the bit at startBit in array to a bool. BoolFromBit(ulong[], int) Converts the bit at startBit in array to a bool. BoolFromBit(byte[], int) Converts the bit at startBit in array to a bool. public static bool BoolFromBit(byte[] array, int startBit) Parameters byte[] array The array to convert the bit from. int startBit The position in the array from which to read the bit. Returns bool The converted bool. BoolFromBit(ulong[], int) Converts the bit at startBit in array to a bool. public static bool BoolFromBit(ulong[] array, int startBit) Parameters ulong[] array The array to convert the bit from. int startBit The position in the array from which to read the bit. Returns bool The converted bool."
  },
  "api/Riptide.Utils.Converter.BoolToBit.html": {
    "href": "api/Riptide.Utils.Converter.BoolToBit.html",
    "title": "Converter.BoolToBit Method | Riptide API Docs",
    "keywords": "Converter.BoolToBit Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Overloads BoolToBit(bool, byte[], int) Converts value to a bit and writes it into array at startBit. BoolToBit(bool, ulong[], int) Converts value to a bit and writes it into array at startBit. BoolToBit(bool, byte[], int) Converts value to a bit and writes it into array at startBit. public static void BoolToBit(bool value, byte[] array, int startBit) Parameters bool value The bool to convert. byte[] array The array to write the bit into. int startBit The position in the array at which to write the bit. BoolToBit(bool, ulong[], int) Converts value to a bit and writes it into array at startBit. public static void BoolToBit(bool value, ulong[] array, int startBit) Parameters bool value The bool to convert. ulong[] array The array to write the bit into. int startBit The position in the array at which to write the bit."
  },
  "api/Riptide.Utils.Converter.ByteFromBits.html": {
    "href": "api/Riptide.Utils.Converter.ByteFromBits.html",
    "title": "Converter.ByteFromBits Method | Riptide API Docs",
    "keywords": "Converter.ByteFromBits Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Overloads ByteFromBits(byte[], int) Converts the 8 bits at startBit in array to a byte. ByteFromBits(ulong[], int) Converts the 8 bits at startBit in array to a byte. ByteFromBits(byte[], int) Converts the 8 bits at startBit in array to a byte. public static byte ByteFromBits(byte[] array, int startBit) Parameters byte[] array The array to convert the bits from. int startBit The position in the array from which to read the bits. Returns byte The converted byte. ByteFromBits(ulong[], int) Converts the 8 bits at startBit in array to a byte. public static byte ByteFromBits(ulong[] array, int startBit) Parameters ulong[] array The array to convert the bits from. int startBit The position in the array from which to read the bits. Returns byte The converted byte."
  },
  "api/Riptide.Utils.Converter.ByteToBits.html": {
    "href": "api/Riptide.Utils.Converter.ByteToBits.html",
    "title": "Converter.ByteToBits Method | Riptide API Docs",
    "keywords": "Converter.ByteToBits Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Overloads ByteToBits(byte, byte[], int) Converts value to 8 bits and writes them into array at startBit. ByteToBits(byte, ulong[], int) Converts value to 8 bits and writes them into array at startBit. ByteToBits(byte, byte[], int) Converts value to 8 bits and writes them into array at startBit. public static void ByteToBits(byte value, byte[] array, int startBit) Parameters byte value The byte to convert. byte[] array The array to write the bits into. int startBit The position in the array at which to write the bits. ByteToBits(byte, ulong[], int) Converts value to 8 bits and writes them into array at startBit. public static void ByteToBits(byte value, ulong[] array, int startBit) Parameters byte value The byte to convert. ulong[] array The array to write the bits into. int startBit The position in the array at which to write the bits."
  },
  "api/Riptide.Utils.Converter.DoubleFromBits.html": {
    "href": "api/Riptide.Utils.Converter.DoubleFromBits.html",
    "title": "Converter.DoubleFromBits Method | Riptide API Docs",
    "keywords": "Converter.DoubleFromBits Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Overloads DoubleFromBits(byte[], int) Converts the 64 bits at startBit in array to a double. DoubleFromBits(ulong[], int) Converts the 64 bits at startBit in array to a double. DoubleFromBits(byte[], int) Converts the 64 bits at startBit in array to a double. public static double DoubleFromBits(byte[] array, int startBit) Parameters byte[] array The array to convert the bits from. int startBit The position in the array from which to read the bits. Returns double The converted double. DoubleFromBits(ulong[], int) Converts the 64 bits at startBit in array to a double. public static double DoubleFromBits(ulong[] array, int startBit) Parameters ulong[] array The array to convert the bits from. int startBit The position in the array from which to read the bits. Returns double The converted double."
  },
  "api/Riptide.Utils.Converter.DoubleToBits.html": {
    "href": "api/Riptide.Utils.Converter.DoubleToBits.html",
    "title": "Converter.DoubleToBits Method | Riptide API Docs",
    "keywords": "Converter.DoubleToBits Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Overloads DoubleToBits(double, byte[], int) Converts value to 64 bits and writes them into array at startBit. DoubleToBits(double, ulong[], int) Converts value to 64 bits and writes them into array at startBit. DoubleToBits(double, byte[], int) Converts value to 64 bits and writes them into array at startBit. public static void DoubleToBits(double value, byte[] array, int startBit) Parameters double value The double to convert. byte[] array The array to write the bits into. int startBit The position in the array at which to write the bits. DoubleToBits(double, ulong[], int) Converts value to 64 bits and writes them into array at startBit. public static void DoubleToBits(double value, ulong[] array, int startBit) Parameters double value The double to convert. ulong[] array The array to write the bits into. int startBit The position in the array at which to write the bits."
  },
  "api/Riptide.Utils.Converter.FloatFromBits.html": {
    "href": "api/Riptide.Utils.Converter.FloatFromBits.html",
    "title": "Converter.FloatFromBits Method | Riptide API Docs",
    "keywords": "Converter.FloatFromBits Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Overloads FloatFromBits(byte[], int) Converts the 32 bits at startBit in array to a float. FloatFromBits(ulong[], int) Converts the 32 bits at startBit in array to a float. FloatFromBits(byte[], int) Converts the 32 bits at startBit in array to a float. public static float FloatFromBits(byte[] array, int startBit) Parameters byte[] array The array to convert the bits from. int startBit The position in the array from which to read the bits. Returns float The converted float. FloatFromBits(ulong[], int) Converts the 32 bits at startBit in array to a float. public static float FloatFromBits(ulong[] array, int startBit) Parameters ulong[] array The array to convert the bits from. int startBit The position in the array from which to read the bits. Returns float The converted float."
  },
  "api/Riptide.Utils.Converter.FloatToBits.html": {
    "href": "api/Riptide.Utils.Converter.FloatToBits.html",
    "title": "Converter.FloatToBits Method | Riptide API Docs",
    "keywords": "Converter.FloatToBits Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Overloads FloatToBits(float, byte[], int) Converts value to 32 bits and writes them into array at startBit. FloatToBits(float, ulong[], int) Converts value to 32 bits and writes them into array at startBit. FloatToBits(float, byte[], int) Converts value to 32 bits and writes them into array at startBit. public static void FloatToBits(float value, byte[] array, int startBit) Parameters float value The float to convert. byte[] array The array to write the bits into. int startBit The position in the array at which to write the bits. FloatToBits(float, ulong[], int) Converts value to 32 bits and writes them into array at startBit. public static void FloatToBits(float value, ulong[] array, int startBit) Parameters float value The float to convert. ulong[] array The array to write the bits into. int startBit The position in the array at which to write the bits."
  },
  "api/Riptide.Utils.Converter.FromDouble.html": {
    "href": "api/Riptide.Utils.Converter.FromDouble.html",
    "title": "Converter.FromDouble Method | Riptide API Docs",
    "keywords": "Converter.FromDouble Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll FromDouble(double, byte[], int) Converts a given double to bytes and writes them into the given array. public static void FromDouble(double value, byte[] array, int startIndex) Parameters double value The double to convert. byte[] array The array to write the bytes into. int startIndex The position in the array at which to write the bytes."
  },
  "api/Riptide.Utils.Converter.FromFloat.html": {
    "href": "api/Riptide.Utils.Converter.FromFloat.html",
    "title": "Converter.FromFloat Method | Riptide API Docs",
    "keywords": "Converter.FromFloat Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll FromFloat(float, byte[], int) Converts a given float to bytes and writes them into the given array. public static void FromFloat(float value, byte[] array, int startIndex) Parameters float value The float to convert. byte[] array The array to write the bytes into. int startIndex The position in the array at which to write the bytes."
  },
  "api/Riptide.Utils.Converter.FromInt.html": {
    "href": "api/Riptide.Utils.Converter.FromInt.html",
    "title": "Converter.FromInt Method | Riptide API Docs",
    "keywords": "Converter.FromInt Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll FromInt(int, byte[], int) Converts a given int to bytes and writes them into the given array. public static void FromInt(int value, byte[] array, int startIndex) Parameters int value The int to convert. byte[] array The array to write the bytes into. int startIndex The position in the array at which to write the bytes."
  },
  "api/Riptide.Utils.Converter.FromLong.html": {
    "href": "api/Riptide.Utils.Converter.FromLong.html",
    "title": "Converter.FromLong Method | Riptide API Docs",
    "keywords": "Converter.FromLong Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll FromLong(long, byte[], int) Converts a given long to bytes and writes them into the given array. public static void FromLong(long value, byte[] array, int startIndex) Parameters long value The long to convert. byte[] array The array to write the bytes into. int startIndex The position in the array at which to write the bytes."
  },
  "api/Riptide.Utils.Converter.FromShort.html": {
    "href": "api/Riptide.Utils.Converter.FromShort.html",
    "title": "Converter.FromShort Method | Riptide API Docs",
    "keywords": "Converter.FromShort Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll FromShort(short, byte[], int) Converts a given short to bytes and writes them into the given array. public static void FromShort(short value, byte[] array, int startIndex) Parameters short value The short to convert. byte[] array The array to write the bytes into. int startIndex The position in the array at which to write the bytes."
  },
  "api/Riptide.Utils.Converter.FromUInt.html": {
    "href": "api/Riptide.Utils.Converter.FromUInt.html",
    "title": "Converter.FromUInt Method | Riptide API Docs",
    "keywords": "Converter.FromUInt Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll FromUInt(uint, byte[], int) Converts a given uint to bytes and writes them into the given array. public static void FromUInt(uint value, byte[] array, int startIndex) Parameters uint value The uint to convert. byte[] array The array to write the bytes into. int startIndex The position in the array at which to write the bytes."
  },
  "api/Riptide.Utils.Converter.FromULong.html": {
    "href": "api/Riptide.Utils.Converter.FromULong.html",
    "title": "Converter.FromULong Method | Riptide API Docs",
    "keywords": "Converter.FromULong Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll FromULong(ulong, byte[], int) Converts a given ulong to bytes and writes them into the given array. public static void FromULong(ulong value, byte[] array, int startIndex) Parameters ulong value The ulong to convert. byte[] array The array to write the bytes into. int startIndex The position in the array at which to write the bytes."
  },
  "api/Riptide.Utils.Converter.FromUShort.html": {
    "href": "api/Riptide.Utils.Converter.FromUShort.html",
    "title": "Converter.FromUShort Method | Riptide API Docs",
    "keywords": "Converter.FromUShort Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll FromUShort(ushort, byte[], int) Converts a given ushort to bytes and writes them into the given array. public static void FromUShort(ushort value, byte[] array, int startIndex) Parameters ushort value The ushort to convert. byte[] array The array to write the bytes into. int startIndex The position in the array at which to write the bytes."
  },
  "api/Riptide.Utils.Converter.GetBits.html": {
    "href": "api/Riptide.Utils.Converter.GetBits.html",
    "title": "Converter.GetBits Method | Riptide API Docs",
    "keywords": "Converter.GetBits Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Overloads GetBits(int, byte[], int, out byte) Starting at startBit, reads amount bits from array into bitfield. GetBits(int, byte[], int, out ushort) Starting at startBit, reads amount bits from array into bitfield. GetBits(int, byte[], int, out uint) Starting at startBit, reads amount bits from array into bitfield. GetBits(int, byte[], int, out ulong) Starting at startBit, reads amount bits from array into bitfield. GetBits(int, ulong[], int, out byte) Starting at startBit, reads amount bits from array into bitfield. GetBits(int, ulong[], int, out ushort) Starting at startBit, reads amount bits from array into bitfield. GetBits(int, ulong[], int, out uint) Starting at startBit, reads amount bits from array into bitfield. GetBits(int, ulong[], int, out ulong) Starting at startBit, reads amount bits from array into bitfield. GetBits(int, byte[], int, out byte) Starting at startBit, reads amount bits from array into bitfield. public static void GetBits(int amount, byte[] array, int startBit, out byte bitfield) Parameters int amount The number of bits to read. byte[] array The array to read the bits from. int startBit The bit position in the array at which to start reading. byte bitfield The bitfield into which to write the bits from the array. GetBits(int, byte[], int, out ushort) Starting at startBit, reads amount bits from array into bitfield. public static void GetBits(int amount, byte[] array, int startBit, out ushort bitfield) Parameters int amount The number of bits to read. byte[] array The array to read the bits from. int startBit The bit position in the array at which to start reading. ushort bitfield The bitfield into which to write the bits from the array. GetBits(int, byte[], int, out uint) Starting at startBit, reads amount bits from array into bitfield. public static void GetBits(int amount, byte[] array, int startBit, out uint bitfield) Parameters int amount The number of bits to read. byte[] array The array to read the bits from. int startBit The bit position in the array at which to start reading. uint bitfield The bitfield into which to write the bits from the array. GetBits(int, byte[], int, out ulong) Starting at startBit, reads amount bits from array into bitfield. public static void GetBits(int amount, byte[] array, int startBit, out ulong bitfield) Parameters int amount The number of bits to read. byte[] array The array to read the bits from. int startBit The bit position in the array at which to start reading. ulong bitfield The bitfield into which to write the bits from the array. GetBits(int, ulong[], int, out byte) Starting at startBit, reads amount bits from array into bitfield. public static void GetBits(int amount, ulong[] array, int startBit, out byte bitfield) Parameters int amount The number of bits to read. ulong[] array The array to read the bits from. int startBit The bit position in the array at which to start reading. byte bitfield The bitfield into which to write the bits from the array. GetBits(int, ulong[], int, out ushort) Starting at startBit, reads amount bits from array into bitfield. public static void GetBits(int amount, ulong[] array, int startBit, out ushort bitfield) Parameters int amount The number of bits to read. ulong[] array The array to read the bits from. int startBit The bit position in the array at which to start reading. ushort bitfield The bitfield into which to write the bits from the array. GetBits(int, ulong[], int, out uint) Starting at startBit, reads amount bits from array into bitfield. public static void GetBits(int amount, ulong[] array, int startBit, out uint bitfield) Parameters int amount The number of bits to read. ulong[] array The array to read the bits from. int startBit The bit position in the array at which to start reading. uint bitfield The bitfield into which to write the bits from the array. GetBits(int, ulong[], int, out ulong) Starting at startBit, reads amount bits from array into bitfield. public static void GetBits(int amount, ulong[] array, int startBit, out ulong bitfield) Parameters int amount The number of bits to read. ulong[] array The array to read the bits from. int startBit The bit position in the array at which to start reading. ulong bitfield The bitfield into which to write the bits from the array."
  },
  "api/Riptide.Utils.Converter.IntFromBits.html": {
    "href": "api/Riptide.Utils.Converter.IntFromBits.html",
    "title": "Converter.IntFromBits Method | Riptide API Docs",
    "keywords": "Converter.IntFromBits Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Overloads IntFromBits(byte[], int) Converts the 32 bits at startBit in array to an int. IntFromBits(ulong[], int) Converts the 32 bits at startBit in array to an int. IntFromBits(byte[], int) Converts the 32 bits at startBit in array to an int. public static int IntFromBits(byte[] array, int startBit) Parameters byte[] array The array to convert the bits from. int startBit The position in the array from which to read the bits. Returns int The converted int. IntFromBits(ulong[], int) Converts the 32 bits at startBit in array to an int. public static int IntFromBits(ulong[] array, int startBit) Parameters ulong[] array The array to convert the bits from. int startBit The position in the array from which to read the bits. Returns int The converted int."
  },
  "api/Riptide.Utils.Converter.IntToBits.html": {
    "href": "api/Riptide.Utils.Converter.IntToBits.html",
    "title": "Converter.IntToBits Method | Riptide API Docs",
    "keywords": "Converter.IntToBits Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Overloads IntToBits(int, byte[], int) Converts value to 32 bits and writes them into array at startBit. IntToBits(int, ulong[], int) Converts value to 32 bits and writes them into array at startBit. IntToBits(int, byte[], int) Converts value to 32 bits and writes them into array at startBit. public static void IntToBits(int value, byte[] array, int startBit) Parameters int value The int to convert. byte[] array The array to write the bits into. int startBit The position in the array at which to write the bits. IntToBits(int, ulong[], int) Converts value to 32 bits and writes them into array at startBit. public static void IntToBits(int value, ulong[] array, int startBit) Parameters int value The int to convert. ulong[] array The array to write the bits into. int startBit The position in the array at which to write the bits."
  },
  "api/Riptide.Utils.Converter.LongFromBits.html": {
    "href": "api/Riptide.Utils.Converter.LongFromBits.html",
    "title": "Converter.LongFromBits Method | Riptide API Docs",
    "keywords": "Converter.LongFromBits Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Overloads LongFromBits(byte[], int) Converts the 64 bits at startBit in array to a long. LongFromBits(ulong[], int) Converts the 64 bits at startBit in array to a long. LongFromBits(byte[], int) Converts the 64 bits at startBit in array to a long. public static long LongFromBits(byte[] array, int startBit) Parameters byte[] array The array to convert the bits from. int startBit The position in the array from which to read the bits. Returns long The converted long. LongFromBits(ulong[], int) Converts the 64 bits at startBit in array to a long. public static long LongFromBits(ulong[] array, int startBit) Parameters ulong[] array The array to convert the bits from. int startBit The position in the array from which to read the bits. Returns long The converted long."
  },
  "api/Riptide.Utils.Converter.LongToBits.html": {
    "href": "api/Riptide.Utils.Converter.LongToBits.html",
    "title": "Converter.LongToBits Method | Riptide API Docs",
    "keywords": "Converter.LongToBits Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Overloads LongToBits(long, byte[], int) Converts value to 64 bits and writes them into array at startBit. LongToBits(long, ulong[], int) Converts value to 64 bits and writes them into array at startBit. LongToBits(long, byte[], int) Converts value to 64 bits and writes them into array at startBit. public static void LongToBits(long value, byte[] array, int startBit) Parameters long value The long to convert. byte[] array The array to write the bits into. int startBit The position in the array at which to write the bits. LongToBits(long, ulong[], int) Converts value to 64 bits and writes them into array at startBit. public static void LongToBits(long value, ulong[] array, int startBit) Parameters long value The long to convert. ulong[] array The array to write the bits into. int startBit The position in the array at which to write the bits."
  },
  "api/Riptide.Utils.Converter.SByteFromBits.html": {
    "href": "api/Riptide.Utils.Converter.SByteFromBits.html",
    "title": "Converter.SByteFromBits Method | Riptide API Docs",
    "keywords": "Converter.SByteFromBits Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Overloads SByteFromBits(byte[], int) Converts the 8 bits at startBit in array to an sbyte. SByteFromBits(ulong[], int) Converts the 8 bits at startBit in array to an sbyte. SByteFromBits(byte[], int) Converts the 8 bits at startBit in array to an sbyte. public static sbyte SByteFromBits(byte[] array, int startBit) Parameters byte[] array The array to convert the bits from. int startBit The position in the array from which to read the bits. Returns sbyte The converted sbyte. SByteFromBits(ulong[], int) Converts the 8 bits at startBit in array to an sbyte. public static sbyte SByteFromBits(ulong[] array, int startBit) Parameters ulong[] array The array to convert the bits from. int startBit The position in the array from which to read the bits. Returns sbyte The converted sbyte."
  },
  "api/Riptide.Utils.Converter.SByteToBits.html": {
    "href": "api/Riptide.Utils.Converter.SByteToBits.html",
    "title": "Converter.SByteToBits Method | Riptide API Docs",
    "keywords": "Converter.SByteToBits Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Overloads SByteToBits(sbyte, byte[], int) Converts value to 8 bits and writes them into array at startBit. SByteToBits(sbyte, ulong[], int) Converts value to 8 bits and writes them into array at startBit. SByteToBits(sbyte, byte[], int) Converts value to 8 bits and writes them into array at startBit. public static void SByteToBits(sbyte value, byte[] array, int startBit) Parameters sbyte value The sbyte to convert. byte[] array The array to write the bits into. int startBit The position in the array at which to write the bits. SByteToBits(sbyte, ulong[], int) Converts value to 8 bits and writes them into array at startBit. public static void SByteToBits(sbyte value, ulong[] array, int startBit) Parameters sbyte value The sbyte to convert. ulong[] array The array to write the bits into. int startBit The position in the array at which to write the bits."
  },
  "api/Riptide.Utils.Converter.SetBits.html": {
    "href": "api/Riptide.Utils.Converter.SetBits.html",
    "title": "Converter.SetBits Method | Riptide API Docs",
    "keywords": "Converter.SetBits Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Overloads SetBits(byte, int, byte[], int) Takes amount bits from bitfield and writes them into array, starting at startBit. SetBits(ushort, int, byte[], int) Takes amount bits from bitfield and writes them into array, starting at startBit. SetBits(uint, int, byte[], int) Takes amount bits from bitfield and writes them into array, starting at startBit. SetBits(ulong, int, byte[], int) Takes amount bits from bitfield and writes them into array, starting at startBit. SetBits(ulong, int, ulong[], int) Takes amount bits from bitfield and writes them into array, starting at startBit. SetBits(byte, int, byte[], int) Takes amount bits from bitfield and writes them into array, starting at startBit. public static void SetBits(byte bitfield, int amount, byte[] array, int startBit) Parameters byte bitfield The bitfield from which to write the bits into the array. int amount The number of bits to write. byte[] array The array to write the bits into. int startBit The bit position in the array at which to start writing. SetBits(ushort, int, byte[], int) Takes amount bits from bitfield and writes them into array, starting at startBit. public static void SetBits(ushort bitfield, int amount, byte[] array, int startBit) Parameters ushort bitfield The bitfield from which to write the bits into the array. int amount The number of bits to write. byte[] array The array to write the bits into. int startBit The bit position in the array at which to start writing. SetBits(uint, int, byte[], int) Takes amount bits from bitfield and writes them into array, starting at startBit. public static void SetBits(uint bitfield, int amount, byte[] array, int startBit) Parameters uint bitfield The bitfield from which to write the bits into the array. int amount The number of bits to write. byte[] array The array to write the bits into. int startBit The bit position in the array at which to start writing. SetBits(ulong, int, byte[], int) Takes amount bits from bitfield and writes them into array, starting at startBit. public static void SetBits(ulong bitfield, int amount, byte[] array, int startBit) Parameters ulong bitfield The bitfield from which to write the bits into the array. int amount The number of bits to write. byte[] array The array to write the bits into. int startBit The bit position in the array at which to start writing. SetBits(ulong, int, ulong[], int) Takes amount bits from bitfield and writes them into array, starting at startBit. public static void SetBits(ulong bitfield, int amount, ulong[] array, int startBit) Parameters ulong bitfield The bitfield from which to write the bits into the array. int amount The number of bits to write. ulong[] array The array to write the bits into. int startBit The bit position in the array at which to start writing."
  },
  "api/Riptide.Utils.Converter.ShortFromBits.html": {
    "href": "api/Riptide.Utils.Converter.ShortFromBits.html",
    "title": "Converter.ShortFromBits Method | Riptide API Docs",
    "keywords": "Converter.ShortFromBits Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Overloads ShortFromBits(byte[], int) Converts the 16 bits at startBit in array to a short. ShortFromBits(ulong[], int) Converts the 16 bits at startBit in array to a short. ShortFromBits(byte[], int) Converts the 16 bits at startBit in array to a short. public static short ShortFromBits(byte[] array, int startBit) Parameters byte[] array The array to convert the bits from. int startBit The position in the array from which to read the bits. Returns short The converted short. ShortFromBits(ulong[], int) Converts the 16 bits at startBit in array to a short. public static short ShortFromBits(ulong[] array, int startBit) Parameters ulong[] array The array to convert the bits from. int startBit The position in the array from which to read the bits. Returns short The converted short."
  },
  "api/Riptide.Utils.Converter.ShortToBits.html": {
    "href": "api/Riptide.Utils.Converter.ShortToBits.html",
    "title": "Converter.ShortToBits Method | Riptide API Docs",
    "keywords": "Converter.ShortToBits Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Overloads ShortToBits(short, byte[], int) Converts value to 16 bits and writes them into array at startBit. ShortToBits(short, ulong[], int) Converts value to 16 bits and writes them into array at startBit. ShortToBits(short, byte[], int) Converts value to 16 bits and writes them into array at startBit. public static void ShortToBits(short value, byte[] array, int startBit) Parameters short value The short to convert. byte[] array The array to write the bits into. int startBit The position in the array at which to write the bits. ShortToBits(short, ulong[], int) Converts value to 16 bits and writes them into array at startBit. public static void ShortToBits(short value, ulong[] array, int startBit) Parameters short value The short to convert. ulong[] array The array to write the bits into. int startBit The position in the array at which to write the bits."
  },
  "api/Riptide.Utils.Converter.ToDouble.html": {
    "href": "api/Riptide.Utils.Converter.ToDouble.html",
    "title": "Converter.ToDouble Method | Riptide API Docs",
    "keywords": "Converter.ToDouble Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll ToDouble(byte[], int) Converts the 8 bytes in the array at startIndex to a double. public static double ToDouble(byte[] array, int startIndex) Parameters byte[] array The array to read the bytes from. int startIndex The position in the array at which to read the bytes. Returns double The converted double."
  },
  "api/Riptide.Utils.Converter.ToFloat.html": {
    "href": "api/Riptide.Utils.Converter.ToFloat.html",
    "title": "Converter.ToFloat Method | Riptide API Docs",
    "keywords": "Converter.ToFloat Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll ToFloat(byte[], int) Converts the 4 bytes in the array at startIndex to a float. public static float ToFloat(byte[] array, int startIndex) Parameters byte[] array The array to read the bytes from. int startIndex The position in the array at which to read the bytes. Returns float The converted float."
  },
  "api/Riptide.Utils.Converter.ToInt.html": {
    "href": "api/Riptide.Utils.Converter.ToInt.html",
    "title": "Converter.ToInt Method | Riptide API Docs",
    "keywords": "Converter.ToInt Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll ToInt(byte[], int) Converts the 4 bytes in the array at startIndex to a int. public static int ToInt(byte[] array, int startIndex) Parameters byte[] array The array to read the bytes from. int startIndex The position in the array at which to read the bytes. Returns int The converted int."
  },
  "api/Riptide.Utils.Converter.ToLong.html": {
    "href": "api/Riptide.Utils.Converter.ToLong.html",
    "title": "Converter.ToLong Method | Riptide API Docs",
    "keywords": "Converter.ToLong Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll ToLong(byte[], int) Converts the 8 bytes in the array at startIndex to a long. public static long ToLong(byte[] array, int startIndex) Parameters byte[] array The array to read the bytes from. int startIndex The position in the array at which to read the bytes. Returns long The converted long."
  },
  "api/Riptide.Utils.Converter.ToShort.html": {
    "href": "api/Riptide.Utils.Converter.ToShort.html",
    "title": "Converter.ToShort Method | Riptide API Docs",
    "keywords": "Converter.ToShort Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll ToShort(byte[], int) Converts the 2 bytes in the array at startIndex to a short. public static short ToShort(byte[] array, int startIndex) Parameters byte[] array The array to read the bytes from. int startIndex The position in the array at which to read the bytes. Returns short The converted short."
  },
  "api/Riptide.Utils.Converter.ToUInt.html": {
    "href": "api/Riptide.Utils.Converter.ToUInt.html",
    "title": "Converter.ToUInt Method | Riptide API Docs",
    "keywords": "Converter.ToUInt Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll ToUInt(byte[], int) Converts the 4 bytes in the array at startIndex to a uint. public static uint ToUInt(byte[] array, int startIndex) Parameters byte[] array The array to read the bytes from. int startIndex The position in the array at which to read the bytes. Returns uint The converted uint."
  },
  "api/Riptide.Utils.Converter.ToULong.html": {
    "href": "api/Riptide.Utils.Converter.ToULong.html",
    "title": "Converter.ToULong Method | Riptide API Docs",
    "keywords": "Converter.ToULong Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll ToULong(byte[], int) Converts the 8 bytes in the array at startIndex to a ulong. public static ulong ToULong(byte[] array, int startIndex) Parameters byte[] array The array to read the bytes from. int startIndex The position in the array at which to read the bytes. Returns ulong The converted ulong."
  },
  "api/Riptide.Utils.Converter.ToUShort.html": {
    "href": "api/Riptide.Utils.Converter.ToUShort.html",
    "title": "Converter.ToUShort Method | Riptide API Docs",
    "keywords": "Converter.ToUShort Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll ToUShort(byte[], int) Converts the 2 bytes in the array at startIndex to a ushort. public static ushort ToUShort(byte[] array, int startIndex) Parameters byte[] array The array to read the bytes from. int startIndex The position in the array at which to read the bytes. Returns ushort The converted ushort."
  },
  "api/Riptide.Utils.Converter.UIntFromBits.html": {
    "href": "api/Riptide.Utils.Converter.UIntFromBits.html",
    "title": "Converter.UIntFromBits Method | Riptide API Docs",
    "keywords": "Converter.UIntFromBits Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Overloads UIntFromBits(byte[], int) Converts the 32 bits at startBit in array to a uint. UIntFromBits(ulong[], int) Converts the 32 bits at startBit in array to a uint. UIntFromBits(byte[], int) Converts the 32 bits at startBit in array to a uint. public static uint UIntFromBits(byte[] array, int startBit) Parameters byte[] array The array to convert the bits from. int startBit The position in the array from which to read the bits. Returns uint The converted uint. UIntFromBits(ulong[], int) Converts the 32 bits at startBit in array to a uint. public static uint UIntFromBits(ulong[] array, int startBit) Parameters ulong[] array The array to convert the bits from. int startBit The position in the array from which to read the bits. Returns uint The converted uint."
  },
  "api/Riptide.Utils.Converter.UIntToBits.html": {
    "href": "api/Riptide.Utils.Converter.UIntToBits.html",
    "title": "Converter.UIntToBits Method | Riptide API Docs",
    "keywords": "Converter.UIntToBits Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Overloads UIntToBits(uint, byte[], int) Converts value to 32 bits and writes them into array at startBit. UIntToBits(uint, ulong[], int) Converts value to 32 bits and writes them into array at startBit. UIntToBits(uint, byte[], int) Converts value to 32 bits and writes them into array at startBit. public static void UIntToBits(uint value, byte[] array, int startBit) Parameters uint value The uint to convert. byte[] array The array to write the bits into. int startBit The position in the array at which to write the bits. UIntToBits(uint, ulong[], int) Converts value to 32 bits and writes them into array at startBit. public static void UIntToBits(uint value, ulong[] array, int startBit) Parameters uint value The uint to convert. ulong[] array The array to write the bits into. int startBit The position in the array at which to write the bits."
  },
  "api/Riptide.Utils.Converter.ULongFromBits.html": {
    "href": "api/Riptide.Utils.Converter.ULongFromBits.html",
    "title": "Converter.ULongFromBits Method | Riptide API Docs",
    "keywords": "Converter.ULongFromBits Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Overloads ULongFromBits(byte[], int) Converts the 64 bits at startBit in array to a ulong. ULongFromBits(ulong[], int) Converts the 64 bits at startBit in array to a ulong. ULongFromBits(byte[], int) Converts the 64 bits at startBit in array to a ulong. public static ulong ULongFromBits(byte[] array, int startBit) Parameters byte[] array The array to convert the bits from. int startBit The position in the array from which to read the bits. Returns ulong The converted ulong. ULongFromBits(ulong[], int) Converts the 64 bits at startBit in array to a ulong. public static ulong ULongFromBits(ulong[] array, int startBit) Parameters ulong[] array The array to convert the bits from. int startBit The position in the array from which to read the bits. Returns ulong The converted ulong."
  },
  "api/Riptide.Utils.Converter.ULongToBits.html": {
    "href": "api/Riptide.Utils.Converter.ULongToBits.html",
    "title": "Converter.ULongToBits Method | Riptide API Docs",
    "keywords": "Converter.ULongToBits Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Overloads ULongToBits(ulong, byte[], int) Converts value to 64 bits and writes them into array at startBit. ULongToBits(ulong, ulong[], int) Converts value to 64 bits and writes them into array at startBit. ULongToBits(ulong, byte[], int) Converts value to 64 bits and writes them into array at startBit. public static void ULongToBits(ulong value, byte[] array, int startBit) Parameters ulong value The ulong to convert. byte[] array The array to write the bits into. int startBit The position in the array at which to write the bits. ULongToBits(ulong, ulong[], int) Converts value to 64 bits and writes them into array at startBit. public static void ULongToBits(ulong value, ulong[] array, int startBit) Parameters ulong value The ulong to convert. ulong[] array The array to write the bits into. int startBit The position in the array at which to write the bits."
  },
  "api/Riptide.Utils.Converter.UShortFromBits.html": {
    "href": "api/Riptide.Utils.Converter.UShortFromBits.html",
    "title": "Converter.UShortFromBits Method | Riptide API Docs",
    "keywords": "Converter.UShortFromBits Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Overloads UShortFromBits(byte[], int) Converts the 16 bits at startBit in array to a ushort. UShortFromBits(ulong[], int) Converts the 16 bits at startBit in array to a ushort. UShortFromBits(byte[], int) Converts the 16 bits at startBit in array to a ushort. public static ushort UShortFromBits(byte[] array, int startBit) Parameters byte[] array The array to convert the bits from. int startBit The position in the array from which to read the bits. Returns ushort The converted ushort. UShortFromBits(ulong[], int) Converts the 16 bits at startBit in array to a ushort. public static ushort UShortFromBits(ulong[] array, int startBit) Parameters ulong[] array The array to convert the bits from. int startBit The position in the array from which to read the bits. Returns ushort The converted ushort."
  },
  "api/Riptide.Utils.Converter.UShortToBits.html": {
    "href": "api/Riptide.Utils.Converter.UShortToBits.html",
    "title": "Converter.UShortToBits Method | Riptide API Docs",
    "keywords": "Converter.UShortToBits Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Overloads UShortToBits(ushort, byte[], int) Converts value to 16 bits and writes them into array at startBit. UShortToBits(ushort, ulong[], int) Converts value to 16 bits and writes them into array at startBit. UShortToBits(ushort, byte[], int) Converts value to 16 bits and writes them into array at startBit. public static void UShortToBits(ushort value, byte[] array, int startBit) Parameters ushort value The ushort to convert. byte[] array The array to write the bits into. int startBit The position in the array at which to write the bits. UShortToBits(ushort, ulong[], int) Converts value to 16 bits and writes them into array at startBit. public static void UShortToBits(ushort value, ulong[] array, int startBit) Parameters ushort value The ushort to convert. ulong[] array The array to write the bits into. int startBit The position in the array at which to write the bits."
  },
  "api/Riptide.Utils.Converter.ZigZagDecode.html": {
    "href": "api/Riptide.Utils.Converter.ZigZagDecode.html",
    "title": "Converter.ZigZagDecode Method | Riptide API Docs",
    "keywords": "Converter.ZigZagDecode Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Overloads ZigZagDecode(int) Zig zag decodes value. ZigZagDecode(long) Zig zag decodes value. ZigZagDecode(int) Zig zag decodes value. public static int ZigZagDecode(int value) Parameters int value The value to decode. Returns int The zig zag-decoded value. Remarks Zig zag encoding allows small negative numbers to be represented as small positive numbers. All positive numbers are doubled and become even numbers, while all negative numbers become positive odd numbers. In contrast, simply casting a negative value to its unsigned counterpart would result in a large positive number which uses the high bit, rendering compression via AddVarULong(ulong) and GetVarULong() ineffective. ZigZagDecode(long) Zig zag decodes value. public static long ZigZagDecode(long value) Parameters long value The value to decode. Returns long The zig zag-decoded value. Remarks Zig zag encoding allows small negative numbers to be represented as small positive numbers. All positive numbers are doubled and become even numbers, while all negative numbers become positive odd numbers. In contrast, simply casting a negative value to its unsigned counterpart would result in a large positive number which uses the high bit, rendering compression via AddVarULong(ulong) and GetVarULong() ineffective."
  },
  "api/Riptide.Utils.Converter.ZigZagEncode.html": {
    "href": "api/Riptide.Utils.Converter.ZigZagEncode.html",
    "title": "Converter.ZigZagEncode Method | Riptide API Docs",
    "keywords": "Converter.ZigZagEncode Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Overloads ZigZagEncode(int) Zig zag encodes value. ZigZagEncode(long) Zig zag encodes value. ZigZagEncode(int) Zig zag encodes value. public static int ZigZagEncode(int value) Parameters int value The value to encode. Returns int The zig zag-encoded value. Remarks Zig zag encoding allows small negative numbers to be represented as small positive numbers. All positive numbers are doubled and become even numbers, while all negative numbers become positive odd numbers. In contrast, simply casting a negative value to its unsigned counterpart would result in a large positive number which uses the high bit, rendering compression via AddVarULong(ulong) and GetVarULong() ineffective. ZigZagEncode(long) Zig zag encodes value. public static long ZigZagEncode(long value) Parameters long value The value to encode. Returns long The zig zag-encoded value. Remarks Zig zag encoding allows small negative numbers to be represented as small positive numbers. All positive numbers are doubled and become even numbers, while all negative numbers become positive odd numbers. In contrast, simply casting a negative value to its unsigned counterpart would result in a large positive number which uses the high bit, rendering compression via AddVarULong(ulong) and GetVarULong() ineffective."
  },
  "api/Riptide.Utils.Converter.html": {
    "href": "api/Riptide.Utils.Converter.html",
    "title": "Converter Class | Riptide API Docs",
    "keywords": "Converter Class Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Provides functionality for converting bits and bytes to various value types and vice versa. public class Converter Inheritance object Converter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields BitsPerByte The number of bits in a byte. BitsPerULong The number of bits in a ulong. Methods BoolFromBit(byte[], int) Converts the bit at startBit in array to a bool. BoolFromBit(ulong[], int) Converts the bit at startBit in array to a bool. BoolToBit(bool, byte[], int) Converts value to a bit and writes it into array at startBit. BoolToBit(bool, ulong[], int) Converts value to a bit and writes it into array at startBit. ByteFromBits(byte[], int) Converts the 8 bits at startBit in array to a byte. ByteFromBits(ulong[], int) Converts the 8 bits at startBit in array to a byte. ByteToBits(byte, byte[], int) Converts value to 8 bits and writes them into array at startBit. ByteToBits(byte, ulong[], int) Converts value to 8 bits and writes them into array at startBit. DoubleFromBits(byte[], int) Converts the 64 bits at startBit in array to a double. DoubleFromBits(ulong[], int) Converts the 64 bits at startBit in array to a double. DoubleToBits(double, byte[], int) Converts value to 64 bits and writes them into array at startBit. DoubleToBits(double, ulong[], int) Converts value to 64 bits and writes them into array at startBit. FloatFromBits(byte[], int) Converts the 32 bits at startBit in array to a float. FloatFromBits(ulong[], int) Converts the 32 bits at startBit in array to a float. FloatToBits(float, byte[], int) Converts value to 32 bits and writes them into array at startBit. FloatToBits(float, ulong[], int) Converts value to 32 bits and writes them into array at startBit. FromDouble(double, byte[], int) Converts a given double to bytes and writes them into the given array. FromFloat(float, byte[], int) Converts a given float to bytes and writes them into the given array. FromInt(int, byte[], int) Converts a given int to bytes and writes them into the given array. FromLong(long, byte[], int) Converts a given long to bytes and writes them into the given array. FromShort(short, byte[], int) Converts a given short to bytes and writes them into the given array. FromUInt(uint, byte[], int) Converts a given uint to bytes and writes them into the given array. FromULong(ulong, byte[], int) Converts a given ulong to bytes and writes them into the given array. FromUShort(ushort, byte[], int) Converts a given ushort to bytes and writes them into the given array. GetBits(int, byte[], int, out byte) Starting at startBit, reads amount bits from array into bitfield. GetBits(int, byte[], int, out ushort) Starting at startBit, reads amount bits from array into bitfield. GetBits(int, byte[], int, out uint) Starting at startBit, reads amount bits from array into bitfield. GetBits(int, byte[], int, out ulong) Starting at startBit, reads amount bits from array into bitfield. GetBits(int, ulong[], int, out byte) Starting at startBit, reads amount bits from array into bitfield. GetBits(int, ulong[], int, out ushort) Starting at startBit, reads amount bits from array into bitfield. GetBits(int, ulong[], int, out uint) Starting at startBit, reads amount bits from array into bitfield. GetBits(int, ulong[], int, out ulong) Starting at startBit, reads amount bits from array into bitfield. IntFromBits(byte[], int) Converts the 32 bits at startBit in array to an int. IntFromBits(ulong[], int) Converts the 32 bits at startBit in array to an int. IntToBits(int, byte[], int) Converts value to 32 bits and writes them into array at startBit. IntToBits(int, ulong[], int) Converts value to 32 bits and writes them into array at startBit. LongFromBits(byte[], int) Converts the 64 bits at startBit in array to a long. LongFromBits(ulong[], int) Converts the 64 bits at startBit in array to a long. LongToBits(long, byte[], int) Converts value to 64 bits and writes them into array at startBit. LongToBits(long, ulong[], int) Converts value to 64 bits and writes them into array at startBit. SByteFromBits(byte[], int) Converts the 8 bits at startBit in array to an sbyte. SByteFromBits(ulong[], int) Converts the 8 bits at startBit in array to an sbyte. SByteToBits(sbyte, byte[], int) Converts value to 8 bits and writes them into array at startBit. SByteToBits(sbyte, ulong[], int) Converts value to 8 bits and writes them into array at startBit. SetBits(byte, int, byte[], int) Takes amount bits from bitfield and writes them into array, starting at startBit. SetBits(ushort, int, byte[], int) Takes amount bits from bitfield and writes them into array, starting at startBit. SetBits(uint, int, byte[], int) Takes amount bits from bitfield and writes them into array, starting at startBit. SetBits(ulong, int, byte[], int) Takes amount bits from bitfield and writes them into array, starting at startBit. SetBits(ulong, int, ulong[], int) Takes amount bits from bitfield and writes them into array, starting at startBit. ShortFromBits(byte[], int) Converts the 16 bits at startBit in array to a short. ShortFromBits(ulong[], int) Converts the 16 bits at startBit in array to a short. ShortToBits(short, byte[], int) Converts value to 16 bits and writes them into array at startBit. ShortToBits(short, ulong[], int) Converts value to 16 bits and writes them into array at startBit. ToDouble(byte[], int) Converts the 8 bytes in the array at startIndex to a double. ToFloat(byte[], int) Converts the 4 bytes in the array at startIndex to a float. ToInt(byte[], int) Converts the 4 bytes in the array at startIndex to a int. ToLong(byte[], int) Converts the 8 bytes in the array at startIndex to a long. ToShort(byte[], int) Converts the 2 bytes in the array at startIndex to a short. ToUInt(byte[], int) Converts the 4 bytes in the array at startIndex to a uint. ToULong(byte[], int) Converts the 8 bytes in the array at startIndex to a ulong. ToUShort(byte[], int) Converts the 2 bytes in the array at startIndex to a ushort. UIntFromBits(byte[], int) Converts the 32 bits at startBit in array to a uint. UIntFromBits(ulong[], int) Converts the 32 bits at startBit in array to a uint. UIntToBits(uint, byte[], int) Converts value to 32 bits and writes them into array at startBit. UIntToBits(uint, ulong[], int) Converts value to 32 bits and writes them into array at startBit. ULongFromBits(byte[], int) Converts the 64 bits at startBit in array to a ulong. ULongFromBits(ulong[], int) Converts the 64 bits at startBit in array to a ulong. ULongToBits(ulong, byte[], int) Converts value to 64 bits and writes them into array at startBit. ULongToBits(ulong, ulong[], int) Converts value to 64 bits and writes them into array at startBit. UShortFromBits(byte[], int) Converts the 16 bits at startBit in array to a ushort. UShortFromBits(ulong[], int) Converts the 16 bits at startBit in array to a ushort. UShortToBits(ushort, byte[], int) Converts value to 16 bits and writes them into array at startBit. UShortToBits(ushort, ulong[], int) Converts value to 16 bits and writes them into array at startBit. ZigZagDecode(int) Zig zag decodes value. ZigZagDecode(long) Zig zag decodes value. ZigZagEncode(int) Zig zag encodes value. ZigZagEncode(long) Zig zag encodes value."
  },
  "api/Riptide.Utils.Extensions.ToStringBasedOnIPFormat.html": {
    "href": "api/Riptide.Utils.Extensions.ToStringBasedOnIPFormat.html",
    "title": "Extensions.ToStringBasedOnIPFormat Method | Riptide API Docs",
    "keywords": "Extensions.ToStringBasedOnIPFormat Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll ToStringBasedOnIPFormat(IPEndPoint) Takes the IPEndPoint's IP address and port number and converts it to a string, accounting for whether the address is an IPv4 or IPv6 address. public static string ToStringBasedOnIPFormat(this IPEndPoint endPoint) Parameters IPEndPoint endPoint Returns string A string containing the IP address and port number of the endpoint."
  },
  "api/Riptide.Utils.Extensions.html": {
    "href": "api/Riptide.Utils.Extensions.html",
    "title": "Extensions Class | Riptide API Docs",
    "keywords": "Extensions Class Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Contains extension methods for various classes. public static class Extensions Inheritance object Extensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToStringBasedOnIPFormat(IPEndPoint) Takes the IPEndPoint's IP address and port number and converts it to a string, accounting for whether the address is an IPv4 or IPv6 address."
  },
  "api/Riptide.Utils.LogType.html": {
    "href": "api/Riptide.Utils.LogType.html",
    "title": "LogType Enum | Riptide API Docs",
    "keywords": "LogType Enum Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Defines log message types. public enum LogType Fields Debug Logs that are used for investigation during development. Info Logs that provide general information about application flow. Warning Logs that highlight abnormal or unexpected events in the application flow. Error Logs that highlight problematic events in the application flow which will cause unexpected behavior if not planned for."
  },
  "api/Riptide.Utils.PriorityQueue-2.-ctor.html": {
    "href": "api/Riptide.Utils.PriorityQueue-2.-ctor.html",
    "title": "PriorityQueue Constructor | Riptide API Docs",
    "keywords": "PriorityQueue Constructor Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Overloads PriorityQueue(int) Initializes a new instance of the PriorityQueue<TElement, TPriority> class. PriorityQueue(IComparer<TPriority>, int) Initializes a new instance of the PriorityQueue<TElement, TPriority> class with the specified custom priority comparer. PriorityQueue(int) Initializes a new instance of the PriorityQueue<TElement, TPriority> class. public PriorityQueue(int capacity = 8) Parameters int capacity Initial capacity to allocate for the underlying heap array. PriorityQueue(IComparer<TPriority>, int) Initializes a new instance of the PriorityQueue<TElement, TPriority> class with the specified custom priority comparer. public PriorityQueue(IComparer<TPriority> comparer, int capacity = 8) Parameters IComparer<TPriority> comparer Custom comparer dictating the ordering of elements. int capacity Initial capacity to allocate for the underlying heap array."
  },
  "api/Riptide.Utils.PriorityQueue-2.Clear.html": {
    "href": "api/Riptide.Utils.PriorityQueue-2.Clear.html",
    "title": "PriorityQueue<TElement, TPriority>.Clear Method | Riptide API Docs",
    "keywords": "PriorityQueue<TElement, TPriority>.Clear Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Clear() Removes all elements from the PriorityQueue<TElement, TPriority>. public void Clear()"
  },
  "api/Riptide.Utils.PriorityQueue-2.Count.html": {
    "href": "api/Riptide.Utils.PriorityQueue-2.Count.html",
    "title": "PriorityQueue<TElement, TPriority>.Count Property | Riptide API Docs",
    "keywords": "PriorityQueue<TElement, TPriority>.Count Property Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Count Gets the number of elements contained in the PriorityQueue<TElement, TPriority>. public int Count { get; } Property Value int"
  },
  "api/Riptide.Utils.PriorityQueue-2.Dequeue.html": {
    "href": "api/Riptide.Utils.PriorityQueue-2.Dequeue.html",
    "title": "PriorityQueue<TElement, TPriority>.Dequeue Method | Riptide API Docs",
    "keywords": "PriorityQueue<TElement, TPriority>.Dequeue Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Dequeue() Removes and returns the lowest priority element. public TElement Dequeue() Returns TElement"
  },
  "api/Riptide.Utils.PriorityQueue-2.Enqueue.html": {
    "href": "api/Riptide.Utils.PriorityQueue-2.Enqueue.html",
    "title": "PriorityQueue<TElement, TPriority>.Enqueue Method | Riptide API Docs",
    "keywords": "PriorityQueue<TElement, TPriority>.Enqueue Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Enqueue(TElement, TPriority) Adds the specified element and associated priority to the PriorityQueue<TElement, TPriority>. public void Enqueue(TElement element, TPriority priority) Parameters TElement element The element to add. TPriority priority The priority with which to associate the new element."
  },
  "api/Riptide.Utils.PriorityQueue-2.Peek.html": {
    "href": "api/Riptide.Utils.PriorityQueue-2.Peek.html",
    "title": "PriorityQueue<TElement, TPriority>.Peek Method | Riptide API Docs",
    "keywords": "PriorityQueue<TElement, TPriority>.Peek Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Peek() Returns the lowest priority element. public TElement Peek() Returns TElement"
  },
  "api/Riptide.Utils.PriorityQueue-2.PeekPriority.html": {
    "href": "api/Riptide.Utils.PriorityQueue-2.PeekPriority.html",
    "title": "PriorityQueue<TElement, TPriority>.PeekPriority Method | Riptide API Docs",
    "keywords": "PriorityQueue<TElement, TPriority>.PeekPriority Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll PeekPriority() Returns the priority of the lowest priority element. public TPriority PeekPriority() Returns TPriority"
  },
  "api/Riptide.Utils.PriorityQueue-2.TryDequeue.html": {
    "href": "api/Riptide.Utils.PriorityQueue-2.TryDequeue.html",
    "title": "PriorityQueue<TElement, TPriority>.TryDequeue Method | Riptide API Docs",
    "keywords": "PriorityQueue<TElement, TPriority>.TryDequeue Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll TryDequeue(out TElement, out TPriority) Removes the lowest priority element from the PriorityQueue<TElement, TPriority> and copies it and its associated priority to the element and priority arguments. public bool TryDequeue(out TElement element, out TPriority priority) Parameters TElement element When this method returns, contains the removed element. TPriority priority When this method returns, contains the priority associated with the removed element. Returns bool true if the element is successfully removed; false if the PriorityQueue<TElement, TPriority> is empty."
  },
  "api/Riptide.Utils.PriorityQueue-2.html": {
    "href": "api/Riptide.Utils.PriorityQueue-2.html",
    "title": "PriorityQueue<TElement, TPriority> Class | Riptide API Docs",
    "keywords": "PriorityQueue<TElement, TPriority> Class Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Represents a collection of items that have a value and a priority. On dequeue, the item with the lowest priority value is removed. public class PriorityQueue<TElement, TPriority> Inheritance object PriorityQueue<TElement, TPriority> Type Parameters TElement Specifies the type of elements in the queue. TPriority Specifies the type of priority associated with enqueued elements. Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PriorityQueue(IComparer<TPriority>, int) Initializes a new instance of the PriorityQueue<TElement, TPriority> class with the specified custom priority comparer. PriorityQueue(int) Initializes a new instance of the PriorityQueue<TElement, TPriority> class. Properties Count Gets the number of elements contained in the PriorityQueue<TElement, TPriority>. Methods Clear() Removes all elements from the PriorityQueue<TElement, TPriority>. Dequeue() Removes and returns the lowest priority element. Enqueue(TElement, TPriority) Adds the specified element and associated priority to the PriorityQueue<TElement, TPriority>. Peek() Returns the lowest priority element. PeekPriority() Returns the priority of the lowest priority element. TryDequeue(out TElement, out TPriority) Removes the lowest priority element from the PriorityQueue<TElement, TPriority> and copies it and its associated priority to the element and priority arguments."
  },
  "api/Riptide.Utils.RiptideLogger.DisableLoggingFor.html": {
    "href": "api/Riptide.Utils.RiptideLogger.DisableLoggingFor.html",
    "title": "RiptideLogger.DisableLoggingFor Method | Riptide API Docs",
    "keywords": "RiptideLogger.DisableLoggingFor Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll DisableLoggingFor(LogType) Disables logging for messages of the given LogType. public static void DisableLoggingFor(LogType logType) Parameters LogType logType The type of message to enable logging for."
  },
  "api/Riptide.Utils.RiptideLogger.EnableLoggingFor.html": {
    "href": "api/Riptide.Utils.RiptideLogger.EnableLoggingFor.html",
    "title": "RiptideLogger.EnableLoggingFor Method | Riptide API Docs",
    "keywords": "RiptideLogger.EnableLoggingFor Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll EnableLoggingFor(LogType, LogMethod) Enables logging for messages of the given LogType. public static void EnableLoggingFor(LogType logType, RiptideLogger.LogMethod logMethod) Parameters LogType logType The type of message to enable logging for. RiptideLogger.LogMethod logMethod The method to use when logging this type of message."
  },
  "api/Riptide.Utils.RiptideLogger.Initialize.html": {
    "href": "api/Riptide.Utils.RiptideLogger.Initialize.html",
    "title": "RiptideLogger.Initialize Method | Riptide API Docs",
    "keywords": "RiptideLogger.Initialize Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Overloads Initialize(LogMethod, bool, string) Initializes RiptideLogger with all log types enabled. Initialize(LogMethod, LogMethod, LogMethod, LogMethod, bool, string) Initializes RiptideLogger with the supplied log methods. Initialize(LogMethod, bool, string) Initializes RiptideLogger with all log types enabled. public static void Initialize(RiptideLogger.LogMethod logMethod, bool includeTimestamps, string timestampFormat = \"HH:mm:ss\") Parameters RiptideLogger.LogMethod logMethod The method to use when logging all types of messages. bool includeTimestamps Whether or not to include timestamps when logging messages. string timestampFormat The format to use for timestamps. Initialize(LogMethod, LogMethod, LogMethod, LogMethod, bool, string) Initializes RiptideLogger with the supplied log methods. public static void Initialize(RiptideLogger.LogMethod debugMethod, RiptideLogger.LogMethod infoMethod, RiptideLogger.LogMethod warningMethod, RiptideLogger.LogMethod errorMethod, bool includeTimestamps, string timestampFormat = \"HH:mm:ss\") Parameters RiptideLogger.LogMethod debugMethod The method to use when logging debug messages. Set to null to disable debug logs. RiptideLogger.LogMethod infoMethod The method to use when logging info messages. Set to null to disable info logs. RiptideLogger.LogMethod warningMethod The method to use when logging warning messages. Set to null to disable warning logs. RiptideLogger.LogMethod errorMethod The method to use when logging error messages. Set to null to disable error logs. bool includeTimestamps Whether or not to include timestamps when logging messages. string timestampFormat The format to use for timestamps."
  },
  "api/Riptide.Utils.RiptideLogger.IsDebugLoggingEnabled.html": {
    "href": "api/Riptide.Utils.RiptideLogger.IsDebugLoggingEnabled.html",
    "title": "RiptideLogger.IsDebugLoggingEnabled Property | Riptide API Docs",
    "keywords": "RiptideLogger.IsDebugLoggingEnabled Property Namespace: Riptide.Utils Assembly: RiptideNetworking.dll IsDebugLoggingEnabled Whether or not Debug messages will be logged. public static bool IsDebugLoggingEnabled { get; } Property Value bool"
  },
  "api/Riptide.Utils.RiptideLogger.IsErrorLoggingEnabled.html": {
    "href": "api/Riptide.Utils.RiptideLogger.IsErrorLoggingEnabled.html",
    "title": "RiptideLogger.IsErrorLoggingEnabled Property | Riptide API Docs",
    "keywords": "RiptideLogger.IsErrorLoggingEnabled Property Namespace: Riptide.Utils Assembly: RiptideNetworking.dll IsErrorLoggingEnabled Whether or not Error messages will be logged. public static bool IsErrorLoggingEnabled { get; } Property Value bool"
  },
  "api/Riptide.Utils.RiptideLogger.IsInfoLoggingEnabled.html": {
    "href": "api/Riptide.Utils.RiptideLogger.IsInfoLoggingEnabled.html",
    "title": "RiptideLogger.IsInfoLoggingEnabled Property | Riptide API Docs",
    "keywords": "RiptideLogger.IsInfoLoggingEnabled Property Namespace: Riptide.Utils Assembly: RiptideNetworking.dll IsInfoLoggingEnabled Whether or not Info messages will be logged. public static bool IsInfoLoggingEnabled { get; } Property Value bool"
  },
  "api/Riptide.Utils.RiptideLogger.IsWarningLoggingEnabled.html": {
    "href": "api/Riptide.Utils.RiptideLogger.IsWarningLoggingEnabled.html",
    "title": "RiptideLogger.IsWarningLoggingEnabled Property | Riptide API Docs",
    "keywords": "RiptideLogger.IsWarningLoggingEnabled Property Namespace: Riptide.Utils Assembly: RiptideNetworking.dll IsWarningLoggingEnabled Whether or not Warning messages will be logged. public static bool IsWarningLoggingEnabled { get; } Property Value bool"
  },
  "api/Riptide.Utils.RiptideLogger.Log.html": {
    "href": "api/Riptide.Utils.RiptideLogger.Log.html",
    "title": "RiptideLogger.Log Method | Riptide API Docs",
    "keywords": "RiptideLogger.Log Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Overloads Log(LogType, string) Logs a message. Log(LogType, string, string) Logs a message. Log(LogType, string) Logs a message. public static void Log(LogType logType, string message) Parameters LogType logType The type of log message that is being logged. string message The message to log. Log(LogType, string, string) Logs a message. public static void Log(LogType logType, string logName, string message) Parameters LogType logType The type of log message that is being logged. string logName Who is logging this message. string message The message to log."
  },
  "api/Riptide.Utils.RiptideLogger.LogMethod.html": {
    "href": "api/Riptide.Utils.RiptideLogger.LogMethod.html",
    "title": "RiptideLogger.LogMethod Delegate | Riptide API Docs",
    "keywords": "RiptideLogger.LogMethod Delegate Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Encapsulates a method used to log messages. public delegate void RiptideLogger.LogMethod(string log) Parameters string log The message to log."
  },
  "api/Riptide.Utils.RiptideLogger.html": {
    "href": "api/Riptide.Utils.RiptideLogger.html",
    "title": "RiptideLogger Class | Riptide API Docs",
    "keywords": "RiptideLogger Class Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Provides functionality for logging messages. public class RiptideLogger Inheritance object RiptideLogger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsDebugLoggingEnabled Whether or not Debug messages will be logged. IsErrorLoggingEnabled Whether or not Error messages will be logged. IsInfoLoggingEnabled Whether or not Info messages will be logged. IsWarningLoggingEnabled Whether or not Warning messages will be logged. Methods DisableLoggingFor(LogType) Disables logging for messages of the given LogType. EnableLoggingFor(LogType, LogMethod) Enables logging for messages of the given LogType. Initialize(LogMethod, LogMethod, LogMethod, LogMethod, bool, string) Initializes RiptideLogger with the supplied log methods. Initialize(LogMethod, bool, string) Initializes RiptideLogger with all log types enabled. Log(LogType, string) Logs a message. Log(LogType, string, string) Logs a message."
  },
  "api/Riptide.Utils.RollingStat.-ctor.html": {
    "href": "api/Riptide.Utils.RollingStat.-ctor.html",
    "title": "RollingStat Constructor | Riptide API Docs",
    "keywords": "RollingStat Constructor Namespace: Riptide.Utils Assembly: RiptideNetworking.dll RollingStat(int) Initializes the stat. public RollingStat(int sampleSize) Parameters int sampleSize The number of values to store."
  },
  "api/Riptide.Utils.RollingStat.Add.html": {
    "href": "api/Riptide.Utils.RollingStat.Add.html",
    "title": "RollingStat.Add Method | Riptide API Docs",
    "keywords": "RollingStat.Add Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Add(double) Adds a new value to the stat. public void Add(double value) Parameters double value The value to add."
  },
  "api/Riptide.Utils.RollingStat.Mean.html": {
    "href": "api/Riptide.Utils.RollingStat.Mean.html",
    "title": "RollingStat.Mean Property | Riptide API Docs",
    "keywords": "RollingStat.Mean Property Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Mean The mean of the stat's values. public double Mean { get; } Property Value double"
  },
  "api/Riptide.Utils.RollingStat.StandardDev.html": {
    "href": "api/Riptide.Utils.RollingStat.StandardDev.html",
    "title": "RollingStat.StandardDev Property | Riptide API Docs",
    "keywords": "RollingStat.StandardDev Property Namespace: Riptide.Utils Assembly: RiptideNetworking.dll StandardDev The standard deviation of the stat's values. public double StandardDev { get; } Property Value double"
  },
  "api/Riptide.Utils.RollingStat.ToString.html": {
    "href": "api/Riptide.Utils.RollingStat.ToString.html",
    "title": "RollingStat.ToString Method | Riptide API Docs",
    "keywords": "RollingStat.ToString Method Namespace: Riptide.Utils Assembly: RiptideNetworking.dll ToString() public override string ToString() Returns string Overrides object.ToString()"
  },
  "api/Riptide.Utils.RollingStat.Variance.html": {
    "href": "api/Riptide.Utils.RollingStat.Variance.html",
    "title": "RollingStat.Variance Property | Riptide API Docs",
    "keywords": "RollingStat.Variance Property Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Variance The variance of the stat's values. public double Variance { get; } Property Value double"
  },
  "api/Riptide.Utils.RollingStat.html": {
    "href": "api/Riptide.Utils.RollingStat.html",
    "title": "RollingStat Class | Riptide API Docs",
    "keywords": "RollingStat Class Namespace: Riptide.Utils Assembly: RiptideNetworking.dll Represents a rolling series of numbers. public class RollingStat Inheritance object RollingStat Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors RollingStat(int) Initializes the stat. Properties Mean The mean of the stat's values. StandardDev The standard deviation of the stat's values. Variance The variance of the stat's values. Methods Add(double) Adds a new value to the stat. ToString()"
  },
  "api/Riptide.Utils.html": {
    "href": "api/Riptide.Utils.html",
    "title": "Riptide.Utils Namespace | Riptide API Docs",
    "keywords": "Riptide.Utils Namespace Provides additional commonly useful functionality for working on networked applications with Riptide. Classes ConnectionMetrics Tracks and manages various metrics of a Connection. Converter Provides functionality for converting bits and bytes to various value types and vice versa. Extensions Contains extension methods for various classes. PriorityQueue<TElement, TPriority> Represents a collection of items that have a value and a priority. On dequeue, the item with the lowest priority value is removed. RiptideLogger Provides functionality for logging messages. RollingStat Represents a rolling series of numbers. Enums LogType Defines log message types. Delegates RiptideLogger.LogMethod Encapsulates a method used to log messages."
  },
  "api/Riptide.html": {
    "href": "api/Riptide.html",
    "title": "Riptide Namespace | Riptide API Docs",
    "keywords": "Riptide Namespace Provides all core functionality essential for setting up a server-client connection with Riptide. Classes Client A client that can connect to a Server. ClientConnectedEventArgs Contains event data for when a non-local client connects to the server. ClientDisconnectedEventArgs Contains event data for when a non-local client disconnects from the server. Connection Represents a connection to a Server or Client. ConnectionFailedEventArgs Contains event data for when a connection attempt to a server fails. DisconnectedEventArgs Contains event data for when the client disconnects from a server. DuplicateHandlerException The exception that is thrown when multiple methods with MessageHandlerAttributes are set to handle messages with the same ID and have the same method signature. InsufficientCapacityException The exception that is thrown when a Message does not contain enough unwritten bits to perform an operation. InvalidHandlerSignatureException The exception that is thrown when a method with a MessageHandlerAttribute does not have an acceptable message handler method signature (either Server.MessageHandler or Client.MessageHandler). Message Provides functionality for converting data to bytes and vice versa. MessageHandlerAttribute Specifies a method as the message handler for messages with the given ID. MessageReceivedEventArgs Contains event data for when a message is received. MessageRelayFilter Provides functionality for enabling/disabling automatic message relaying by message type. NonStaticHandlerException The exception that is thrown when a method with a MessageHandlerAttribute is not marked as static. Peer Provides base functionality for Server and Client. Server A server that can accept connections from Clients. ServerConnectedEventArgs Contains event data for when a client connects to the server. ServerConnectionFailedEventArgs Contains event data for when a connection fails to be fully established. ServerDisconnectedEventArgs Contains event data for when a client disconnects from the server. Interfaces IMessageSerializable Represents a type that can be added to and retrieved from messages using the AddSerializable<T>(T) and GetSerializable<T>() methods. Enums DisconnectReason The reason for a disconnection. MessageSendMode The send mode of a Message. RejectReason The reason the connection attempt was rejected. Delegates Client.MessageHandler Encapsulates a method that handles a message from a server. Server.ConnectionAttemptHandler Encapsulates a method that determines whether or not to accept a client's connection attempt. Server.MessageHandler Encapsulates a method that handles a message from a client."
  },
  "index.html": {
    "href": "index.html",
    "title": "",
    "keywords": ""
  },
  "manual/guides/build-docs.html": {
    "href": "manual/guides/build-docs.html",
    "title": "Build Docs Locally | Riptide Manual",
    "keywords": "How to Build Documentation Locally Building the documentation site locally on your computer can be useful in a variety of situations, such as when you wish to preview changes you've made. Riptide uses DocFX to build its documentation. To install DocFX, open a terminal and run the following command: dotnet tool install -g docfx --version 2.70.1 Once DocFX is installed: Navigate to the Docs folder in your cloned Riptide repository. Run docfx docfx.json --serve. Visit http://localhost:8080/ in your web browser."
  },
  "manual/guides/send-modes-explained.html": {
    "href": "manual/guides/send-modes-explained.html",
    "title": "Message Send Modes Explained | Riptide Manual",
    "keywords": "Message Send Modes Explained Riptide has three different message send modes (defined in the MessageSendMode enum) that you can use to send data. This article explains the differences between them and how & when to use them. The table below provides a quick functionality comparison: Send Mode Guaranteed Delivery Ordered Delivery Feedback Duplicate Filtering Unreliable ✗ ✗ ✗ ✗ Reliable ✓ ✗ ✓ ✓ Notify ✗ ✓ ✓ ✓ Unreliable Send Mode The most basic of the three send modes is the Unreliable send mode. It guarantees neither delivery nor order. When you send a message unreliably it is sent once and effectively forgotten about—nothing further is done to ensure order or delivery. Due to how the internet works, a message you send may sometimes get duplicated in transmission. Since unreliably sent messages aren't given a sequence ID, Riptide can't use said sequence ID to determine if a messages was already received once before. However, even if the unreliable send mode had a duplicate filtering system, it would not be able to catch duplicates which are sent maliciously with a unique sequence ID, so your server should be capable of receiving the same data more than once anyways. Usage The unreliable send mode is primarily useful for sending data which changes frequently and is being updated continually, such as a player's position. It doesn't really matter if a position update goes missing here and there due to packet loss as the next update is probably already in transmission, and resending the update that was lost to ensure its delivery wouldn't make much sense since it's already outdated information. Unreliable messages have message IDs built in, so you should use the Create(MessageSendMode, ushort) or Create(MessageSendMode, Enum) overloads when creating your message (replace <messageId> with your message ID): Message.Create(MessageSendMode.Unreliable, <messageId>); You can handle unreliable messages using static methods with [MessageHandler] attributes attached, or via the Server.MessageReceived & Client.MessageReceived events. Reliable Send Mode The Reliable send mode guarantees delivery but not order. When you send a message reliably, it is resent repeatedly under the hood until the other end responds and acknowledges that it received the message in question. Reliable mode assigns each message a sequence ID and uses that to (among other things) filter out duplicate messages on the receiving end. However, this duplicate filtering system will not catch duplicates which are sent maliciously with a unique sequence ID, so your server should be capable of receiving the same data more than once without breaking. Usage The reliable send mode is primarily useful for sending \"one-off\" data and data which changes less often, but whose delivery is important. Player chat messages are a good example of this. While reliable mode doesn't inherently guarantee order, you can manually ensure data arrives in the correct order by using the Connection.ReliableDelivered event to wait for the previous message to be delivered before sending the next one. This obviously comes at the cost of some added latency since you're sending messages and awaiting their delivery one at a time, but for something like player chat messages that likely wouldn't be an issue. You can identify messages by tracking the sequence ID returned by the Send method and comparing it to the one provided by the ReliableDelivered event. Reliable messages have message IDs built in, so you should use the Create(MessageSendMode, ushort) or Create(MessageSendMode, Enum) overloads when creating your message (replace <messageId> with your message ID): Message.Create(MessageSendMode.Reliable, <messageId>); You can handle reliable messages using static methods with [MessageHandler] attributes attached, or via the Server.MessageReceived & Client.MessageReceived events. Notify Send Mode Added in v2.1.0, the Notify send mode is the newest—but arguably the most powerful and versatile—of the three modes. It guarantees order but not delivery, and provides actionable feedback to the sender about what happened to each message. Notify mode guarantees order by simply having the receiver discard any out of order messages it receives. No packet buffering or reordering takes place on the receiving end. The sender invokes the Connection.NotifyLost or Connection.NotifyDelivered event depending on whether the message was lost or delivered, allowing you to determine what to do with that information. Messages discarded due to being received out of order are considered lost. Important The notify send mode includes its \"acks\" in the headers of other notify messages. This is more bandwidth-efficient than the reliable send mode (which sends separate unreliable ack packets for each message), but it means that both ends of the connection must send notify messages at a similar rate in order for it to work properly! Notify mode assigns each message a sequence ID and uses that to (among other things) filter out duplicate messages on the receiving end. However, this duplicate filtering system will not catch duplicates which are sent maliciously with a unique sequence ID, so your server should be capable of receiving the same data more than once without breaking. Usage The notify send mode gives you complete control by allowing you to decide what actions to take based on what happened to which data. For example, if a player's health changes twice in quick succession and the message containing the first health update is lost, you can avoid resending that data because you know you already sent a more recent health update. You can identify messages by tracking the sequence ID returned by the Send method and comparing it to the one provided by the NotifyLost and NotifyDelivered events. This level of control unlocks the ability to balance speed, reliability, and bandwidth-efficiency as necessary and makes it capable of replacing the other two send modes in the vast majority of situations. Notify messages do not have message IDs built in, so you should use the Create(MessageSendMode) overload when creating your message: Message.Create(MessageSendMode.Notify); You can handle notify messages via the Connection.NotifyReceived event."
  },
  "manual/overview/about-riptide.html": {
    "href": "manual/overview/about-riptide.html",
    "title": "About Riptide | Riptide Manual",
    "keywords": "About Riptide Riptide Networking is a lightweight C# networking library primarily designed for use in multiplayer games. It can be used in Unity as well as in other .NET environments such as console applications. It provides functionality for establishing connections and sending data back and forth, leaving it up to you to decide what data you want to send and when. This is ideal if you like to be in control of your code and know what's going on under the hood. Riptide is 100% free to use under the MIT license and its development is only funded by donations."
  },
  "manual/overview/faq.html": {
    "href": "manual/overview/faq.html",
    "title": "FAQ | Riptide Manual",
    "keywords": "Frequently Asked Questions Below are some frequently asked questions as well as common issues which you may face when getting started with Riptide. If you can't find your question or the provided answer/solution is insufficient, feel free to join the Discord server and ask there! What's the difference between Riptide and other networking solutions? Riptide is a relatively low level networking solution—it gives you the tools to manage connections and send data, while leaving the rest up to you. This means you have full control over what happens, how it happens, and when it happens, but it also means you have to do more yourself. That might sound scary if you're just getting started with multiplayer game development, but it can actually be hugely beneficial for your learning process. This is in stark contrast to higher-level, more abstracted solutions, which provide more features and do more for you. However, this typically means you have less control over what your code is doing, and it may make learning how multiplayer games actually work more difficult because you're not exposed to what's going on under the hood. Whether you should use an abstracted, high-level solution or something lower-level like Riptide depends on what your needs and goals are. Do you want to see and be in charge of what's going on under the hood? Riptide is likely better for you. Do you just want to quickly build a multiplayer game without having to decide what happens and when? Then you may want to consider using something higher-level. Does Riptide cost money to use? No. Riptide is completely free to use, and it imposes no arbitrary concurrent user limits. You can connect as many players as you like, as long as the hardware your server is running on can handle it and you have sufficient available bandwidth. However, if you'd like to financially support Riptide's development and get early access to new features, you can do so through GitHub Sponsors. Can I use Riptide outside of Unity? Yes! Riptide is not dependent on Unity in any way, meaning you can use it pretty much anywhere you can run C# code. This includes .NET applications such as console apps as well as other engines like Flax Engine and Godot. What platforms can I use Riptide on? This varies depending on which low level transport you're using. Riptide's default transport uses UDP sockets and works on PC, Mac, Linux, iOS and Android. VR and consoles have not been officially tested to determine whether Riptide works on them, and at this point in time there is no web transport, meaning Riptide does not work in browser-based games. If you end up using Riptide's Steam transport, that obviously only works on platforms supported by Steam. How many players does Riptide support? This heavily depends on how much data your game needs to send per second per player and how that compares to the hardware and bandwidth available to your server. A turn-based card game would likely be able to support hundreds of times as many players as a fast-paced shooter while using the same resources. A big part of developing multiplayer games is choosing what data to send and when to send it. Riptide leaves that part up to you, so you're the one making those much more performance-relevant decisions of what and when. As a result, Riptide itself is highly unlikely to be your performance bottleneck. Does Riptide support player-hosted and lobby-based games? Yes! Riptide gives you the tools to manage connections and send data, but doesn't really impose any restrictions on how you do that. You can set up a dedicated server with full authority, a relay server which just passes on data it receives, a client that also acts as the host (server), or pretty much anything inbetween. The only architecture that would require some tweaks to Riptide's source is true peer-to-peer, where all clients in a lobby are connected to all other clients in the same lobby. Why am I not receiving any messages? Make sure that you're calling the server's and/or client's Update method regularly. Why am I getting a warning about no server-side/client-side method handler being found? If you're getting this warning, make sure you actually have a handler method set up for the message ID mentioned in the warning. If that doesn't help, chances are your handler method has the wrong parameters for what you intended it to be used for. Remember, server-side handler methods (which handle messages coming from clients) should have two parameters—a ushort and a Message instance. Client-side handler methods (which handle messages coming from a server) should have only one parameter—a Message instance. Alternatively, you may be getting this warning if you have chosen to handle messages via the MessageReceived event instead of using the [MessageHandler] attribute-based system. If this is the case, you can disable the attribute-based system by setting useMessageHandlers to false when calling Server.Start and Client.Connect. Do I have to use Debug.Log with Riptide's log system? No. You can use whatever log method you like, including Console.WriteLine, other engine-specific log methods, and your own custom log methods. All you have to do is pass your chosen log method to the RiptideLogger.Initialize method."
  },
  "manual/overview/get-started.html": {
    "href": "manual/overview/get-started.html",
    "title": "Getting Started | Riptide Manual",
    "keywords": "Getting Started For a more complete tutorial on how to set up Riptide in your project, see this video. A lot of things were renamed in v2.0.0, which makes following along with the tutorial more difficult, so it's recommended to use v1.1.0 when watching the video and to use the upgrade guides to update your project afterwards. Tip The video tutorial uses two separate projects (one for the server and one for the client). This makes the separation between server and client very clear, which can be helpful when first getting into multiplayer game development. However, it's not ideal—especially for larger projects—due to the fact that it results in duplicated code and assets. This can be mitigated somewhat by setting up a local package for shared code, but combining server and client in the same project is just as doable and arguably easier to maintain. Initial Setup First of all, we need to tell Riptide how we want information to be logged so that we can see what our code is doing. We can do this using the RiptideLogger.Initialize method, which should be called before we do anything else with Riptide. If you're using separate projects for the server and the client, make sure to call it in both. RiptideLogger.Initialize(Debug.Log, Debug.Log, Debug.LogWarning, Debug.LogError, false); Obviously this is using Unity's logging methods, so if you're not using Unity for your project you'll need to replace the four log methods with Console.WriteLine or your engine's equivalent. Important This article explains the basics and includes various code snippets, but if you'd like to see these snippets in the context of a working demo, take a look at the NetworkManager classes in the dedicated server demo's server and client projects. Starting a Server To start a server, we need to create a new Server instance and then call its Start method, which takes in the port we want it to run on and the maximum number of clients we want to allow to be connected at any given time. You'll likely want to run this code as soon as your server application starts up. Server server = new Server(); server.Start(7777, 10); In order for the server to be able to accept connections and process messages, we need to call its Update method on a regular basis. In Unity, this can be done using the provided FixedUpdate method. private void FixedUpdate() { server.Update(); } Connecting a Client The process of connecting a client is quite similar. First we create a new Client instance and then we call its Connect method, which expects a host address as the parameter. Riptide's default transport requires host addresses to consist of an IP address and a port number, separated by a :. Since we're running the server and the client on the same computer right now, we'll use 127.0.0.1 (also known as localhost) as the IP. Client client = new Client(); client.Connect(\"127.0.0.1:7777\"); Tip Connecting to 127.0.0.1 will only work if your server and client applications are running on the same computer. To connect from a computer on a different network you need to connect to your host computer's public IP address instead, and you'll need to portforward to allow traffic from your clients to reach your server. Finally, we need to call the client's Update method on a regular basis, just like we did with the server. private void FixedUpdate() { client.Update(); } At this point, if you run the server and the client you should see log messages informing you that the server started and the client connected! Important Make sure you have the Run in Background option enabled (found under Edit > Project Settings > Player > Resolution and Presentation), otherwise your server and client will only be able to communicate with each other when their window is active/in-focus! This used to be enabled by default, but that appears to have changed in newer versions of Unity. Hooking Into Events Riptide's Server and Client classes both have several events to allow you to run your own code when various things happen. For example, you'll likely want your server to spawn a player object when a client connects and destroy it again when they disconnect. You can do this by subscribing your spawn and despawn methods to the ClientConnected and ClientDisconnected events. The Client class's most useful events are probably the ConnectionFailed and Disconnected events, which come in handy for things like returning the player to the main menu when their connection attempt fails or they're disconnected. For a complete list of available events, check out the server events and client events. Sending Data In order to send data over the network, it has to be converted to bytes first—you can't just send a string or an int directly. Riptide provides the Message class to make this process really easy. Creating a Message The first step of sending a message is to get an instance of the class. This is done using the Create method, which requires the message's send mode and an ID as parameters. Message message = Message.Create(MessageSendMode.Unreliable, 1); The MessageSendMode can be set to Reliable, Unreliable, or Notify. Due to how the internet works, not every packet a computer sends will arrive at its destination. Using the unreliable send mode means Riptide will send the message without doing anything extra to ensure delivery, which may result in some of these messages being lost. Using the reliable send mode will make Riptide track whether or not the message has been successfully delivered, and it will continue to resend it until that is the case. You can find more information about all three send modes in the Message Send Modes Explained article. Tip Your first instinct may be to send everything reliably, but at least in fast-paced games, the opposite is normally true—most information is sent unreliably. Consider the fact that even in an extremely basic setup where you simply send a player's position every tick, a newer, more up-to-date position message will have already been sent by the time a previous one could be detected as lost and be resent, and there's no point in resending outdated information. Message IDs are used to identify what type of message you're sending, which allows the receiving end to determine how to properly handle it. In the example above, we set the message ID to 1 (in practice you'd probably want to use an enum for message IDs instead of hard-coding the number). Adding Data to the Message To add data to our message, we can simply call the Add method for the type we want to add. For example: message.AddInt(365); The Message class has built-in methods for bits, all primitive data types (byte, bool, int/uint, float, etc.), strings, and structs which implement IMessageSerializable, as well as arrays of all these types. Any other types you may want to send should consist of combinations of these supported types. For example, a Vector3 consists of three floats (one for each component), so to add one to your message, you would simply call AddFloat three times, passing in the vector's three different components. Alternatively, you could write a custom extension method to make this easier, just like the ones included in the Unity package. Sending the Message Once you've added the data you want to include in your message, it's time to send it. Clients have only one Send method, while servers have Send and SendToAll (which has an overload as well). client.Send(message); // Sends the message to the server server.Send(message, <toClientId>); // Sends the message to a specific client server.SendToAll(message); // Sends the message to all connected clients server.SendToAll(message, <toClientId>); // Sends the message to all connected clients except the specified one Make sure to replace <toClientId> with the ID of the client you want to send the message to, or who you don't want to sent the message to if you're using the SendToAll method. Handling the Message There are two ways to handle messages. The first is with \"message handler\" methods. These are just regular static methods with a [MessageHandler] attribute attached. [MessageHandler(1)] private static void HandleSomeMessageFromServer(Message message) { int someInt = message.GetInt(); // Do stuff with the retrieved data here } Notice that we've passed 1 to the [MessageHandler] attribute. This tells Riptide that this method is meant to handle messages with an ID of 1, which is what we set our message's ID to in the creating a message part of this article. Important Whether a message handler method handles messages received from a server or a client is determined by its parameters. In order for a handler method to handle messages from clients, it must have two parameters (a ushort and a Message instance). In order for a handler method to handle messages from a server, it must have only one parameter (a Message instance). The code snippet above shows a client-side message handler, which will only handle messages received from the server. Alternatively, you can handle messages using the MessageReceived event. This option gives you extra flexibility with how messages are handled, and doesn't require you to use any static methods or attributes. If you choose this approach, make sure to disable the attribute-based handler system by setting useMessageHandlers to false when calling Server.Start and Client.Connect. Caution Data MUST be retrieved in the exact order in which it was added to the message! If you added an int, followed by a float and then another int, you must retrieve an int and a float before you can retrieve the second int. Mixing up the order will result in your retrieved values being completely different from what you added to the message."
  },
  "manual/overview/getting-started.html": {
    "href": "manual/overview/getting-started.html",
    "title": "",
    "keywords": ""
  },
  "manual/overview/installation.html": {
    "href": "manual/overview/installation.html",
    "title": "Installation | Riptide Manual",
    "keywords": "Installation There are a number of ways to install Riptide, depending on what you're working on and which tools you're using. Unity Option 1: Unity Package Manager Note Installing Riptide via Unity's Package Manager requires you to have git installed on your computer! In your Unity project, open the Package Manager (Window > Package Manager). Click the + (plus) button in the top left corner of the window. Select the Add package from git URL... option. Enter the following URL: https://github.com/RiptideNetworking/Riptide.git?path=/Packages/Core#2.2.0. To install a version other than v2.2.0, replace the 2.2.0 after the # with your chosen version number. Click 'Add' and wait for Riptide to be installed. If you have errors in your project after installation or intellisense isn't working for Riptide's classes, go to Edit > Preferences > External Tools, make sure the box next to Git packages is checked, and then click Regenerate project files. Tip If you'd like to use the latest in-development version of Riptide instead of an official release, enter https://github.com/RiptideNetworking/Riptide.git?path=/Packages/Core#unity-package in the git URL field. Keep in mind that doing this will get you the latest state of the repository, which may include bugs and incomplete features! Option 2: DLL File If you prefer not to use Unity's Package Manager or that option doesn't work for you, you can also install Riptide by manually adding the compiled dll file to your project. Either download the RiptideNetworking.dll file from the latest release (or choose a previous version), or clone/download the repository and build the solution yourself. Drop the RiptideNetworking.dll file anywhere into your Unity project's Assets folder. Optional: add the MessageExtensions class and add it to your project. It's included in the Unity package but isn't part of the dll file. Tip It's highly recommended that you also download the RiptideNetworking.xml file and drop that into your project alongside the dll file. This will allow your IDE's intellisense to display Riptide's API documentation. .NET Projects The following installation steps are for Visual Studio users and may differ if you use a different IDE. Option 1: NuGet Package Right click your solution in the Solution Explorer. Select Manage NuGet Packages for Solution... Click the Browse tab. Search for the RiptideNetworking.Riptide package and select it. Check the box next to the project(s) you want to add the package to. Choose the version you want to install from the dropdown. Click Install and then click OK when prompted. Click I Accept to accept the license terms. Option 2: DLL File Either download the RiptideNetworking.dll file from the latest release (or choose a previous version), or clone/download the repository and build the solution yourself. Right click your project in the Solution Explorer. Select Add and then select the Project Reference... option. Click Browse in the left sidebar of the window. Click the Browse button in the bottom right corner of the window. Navigate to the folder where you saved the RiptideNetworking.dll file and add it. Click OK. Option 3: Direct Project Reference Either download the RiptideNetworking.dll file from the latest release (or choose a previous version), or clone/download the repository and build the solution yourself. Right click your solution in the Solution Explorer. Select Add and then select the Existing Project... option. Navigate to the cloned/downloaded Riptide repository and open the RiptideNetworking.csproj file. Right click your project in the Solution Explorer. Select Add and then select the Project Reference... option. In the Projects tab (should be selected by default in the left sidebar), check the box next to RiptideNetworking. Click OK."
  },
  "manual/updates/guides/update-to-v2.html": {
    "href": "manual/updates/guides/update-to-v2.html",
    "title": "Updating to v2 | Riptide Manual",
    "keywords": "Updating to v2 As a major version update, Riptide v2.0.0 includes a number of breaking changes. This means that updating will likely cause errors in your project and may result in your application behaving differently. To help make the update process go smoothly and seem less daunting, this article covers the behavior changes and what has been removed or renamed, as well as what you should use instead! You can also take a look at all the changes which were required to update the Sample FPS repo to Riptide v2.0.0. The git URL for installing Riptide via the Unity Package Manager has changed. See the installation instructions for more information. Logic and Behavior Changes The Client.Disconnected event is now invoked any time the client disconnects—including when Client.Disconnect is called—instead of only when the disconnection is caused by something outside the client (such as server shutdown, connection failure, etc). The default maximum message payload size has been reduced to 1225 bytes (from 1247 bytes) to ensure messages are smaller than the MTU. If you were sending messages which were close to the old size limit, those messages may exceed the new maximum and cause errors. Renames and Replacements Quite a lot was renamed in v2.0.0 with the goal of making names clearer and more intuitive. Things that were replaced but which have a direct equivalent that can be used are also listed below. Previous What to Use Instead Client.Tick Client.Update ClientMessageReceivedEventArgs MessageReceivedEventArgs ClientDisconnectedEventArgs ServerDisconnectedEventArgs ClientDisconnectedEventArgs.Id ServerDisconnectedEventArgs.Client.Id Common Peer HeaderType MessageHeader ICommon IPeer IConnectionInfo Connection Message.MaxMessageSize Message.MaxSize MessageSendMode.reliable MessageSendMode.Reliable MessageSendMode.unreliable MessageSendMode.Unreliable RiptideNetworking Riptide RiptideNetworking.Utils Riptide.Utils RiptideNetworking.Transports Riptide.Transports RiptideNetworking.Transports.RudpTransport Riptide.Transports.Udp Server.Tick Server.Update ServerClientConnectedEventArgs ServerConnectedEventArgs ServerMessageReceivedEventArgs MessageReceivedEventArgs ServerMessageReceivedEventArgs.FromClientId MessageReceivedEventArgs.FromConnection.Id Removals A few things were removed in v2.0.0 for a variety of reasons, some of which have alternatives or replacements but require a bit more explanation than those listed in the table above. Server.AllowAutoMessageRelay Property and shouldAutoRelay Parameter Reason: Having clients decide which messages are automatically relayed by the server was counter-intuitive, and it meant that as long as the server had AllowAutoMessageRelay set to true, any message could be made to be automatically relayed, even if it wasn't intended by the developer. Alternative: Servers that have a MessageRelayFilter instance assigned to their RelayFilter will automatically relay any messages whose IDs are enabled in the filter. isBigArray Parameter Reason: Manually setting the isBigArray parameter to true was extremely clunky and error-prone. Alternative: None, as this is done automatically now. Message.Bytes Property Reason: The Message class's backing byte array was only ever publicly accessible for use by transports, in case they needed to modify a message's data directly. The transport system's overhaul has eliminated this potential need, and having the byte array remain publicly accessible creates a risk for accidental misuse without providing any real benefit. Alternative: There is no direct alternative, but chances are you can do what you need using the AddBytes and GetBytes methods. LanDiscovery Class Reason: It was a mess and in dire need of an overhaul which would have involved breaking changes. By removing it, the removal is the breaking change (the necessary changes weren't going to make it into v2.0.0) and this way it can be re-added whenever, instead of having to wait for v3.0.0 to be revamped. Alternative: Currently none—it will be overhauled and re-added in a future update. If you need it for your project in the meantime, you can download the file from the old versions on GitHub and manually add it to your project. ActionQueue and DoubleKeyDictionary Classes Reason: They were unused. Alternative: None. RUDP Transport Classes Reason: As part of the transport system overhaul, transports are no longer responsible for reliable message delivery. This has been completely decoupled and reliability (among many other features) are now implemented on top of the transport, leading to a more consistent development experience between different transports and requiring less transport-specific implementations of features. Alternative: The UdpPeer, UdpServer, UdpClient, and UdpConnection classes which are found in the Riptide.Transports.Udp namespace."
  },
  "manual/updates/guides/updating-to-v2.html": {
    "href": "manual/updates/guides/updating-to-v2.html",
    "title": "",
    "keywords": ""
  },
  "manual/updates/release-notes/v2.0.0.html": {
    "href": "manual/updates/release-notes/v2.0.0.html",
    "title": "v2.0.0 Release Notes | Riptide Manual",
    "keywords": "v2.0.0 Release Notes Install this version with Unity's Package Manager using the following URL (step-by-step instructions): https://github.com/RiptideNetworking/Riptide.git?path=/Packages/Core#2.0.0 It can also be installed a number of other ways for use outside of Unity, including as a NuGet package. For a full list of source code changes, check out the version comparison on GitHub. Additions Added a documentation site. Made a NuGet package (#12). Made it possible to accept or reject connections by setting Server.HandleConnection. Made it possible to send custom data when kicking a client (#20). Made it possible to retrieve connected clients by their ID using Server.TryGetClient. Added disconnect reasons. Added support for adding sbytes to messages. Added support for adding custom types to the messages class, as long as they implement IMessageSerializable. Added an option to disable the timeout system for individual connections using Connection.CanTimeout. Made it possible to change the maximum message payload size using Message.MaxPayloadSize. Added an option to disable dual-mode sockets for the UDP transport. Made the default transport's socket buffer size configurable. Added a TCP transport (primarily for use as a fallback in situations where UDP doesn't work). Changes Renamed a lot of things (including the base RiptideNetworking namespace—now it's just Riptide). For a full list of what was renamed, see the updating to v2 guide. Made calling Client.Disconnect invoke the Client.Disconnected event. Previously, this event was only invoked when the disconnection was not initiated by the client. Removed the isBigArray parameter from the Message class's Add/Get methods. This is now determined automatically. Reduced the default maximum message payload size to 1225 bytes (from 1247 bytes) to ensure messages are smaller than the MTU. Made Client.Connect return a bool to indicate whether a connection attempt will be made or an issue occurred (#39). Completely overhauled the transport system (which resulted in the removal of the RudpListener, RudpServer, RudpClient, and RudpConnection classes). For more information on the transport rework and all of the changes involved, see pull request #56. Made the default transport single-threaded, as the multithreading didn't provide much benefit but caused difficult-to-debug issues. Improved error handling. Made error messages more descriptive. Gave servers authority over which messages are automatically relayed. This is customizable via Server.RelayFilter. Removed customizable maximum send attempts for messages. In a future update, this system will be replaced by a system which disconnects clients if their connection health deteriorates too much. Removed LanDiscovery class. It will be overhauled and re-added in a future update. Removed unused DoubleKeyDictionary class. Removed unused ActionQueue class. Removed unnecessary custom type size constants. Made event args' properties readonly fields. Fixes Fixed some message handler methods not being found (#44). Sponsor Shoutout Thank you so much to all of my GitHub Sponsors for making this update possible, and an extra special thank you to the following individuals for their extreme generosity: oalpar those who wish to remain anonymous (you know who you are!) If you too would like to financially support Riptide's development and get access to various perks, you can do so through GitHub Sponsors. Thank you!"
  },
  "manual/updates/release-notes/v2.1.0.html": {
    "href": "manual/updates/release-notes/v2.1.0.html",
    "title": "v2.1.0 Release Notes | Riptide Manual",
    "keywords": "v2.1.0 Release Notes Install this version with Unity's Package Manager using the following URL (step-by-step instructions): https://github.com/RiptideNetworking/Riptide.git?path=/Packages/Core#2.1.0 It can also be installed a number of other ways for use outside of Unity, including as a NuGet package. For a full list of source code changes, check out the version comparison on GitHub. Additions Added the \"notify\" message send mode and overhauled message sequencing (PR #109). Added support for reserving (when writing) and skipping (when reading) bits in a message via ReserveBits and SkipBits, respectively (#103). Added support for setting and retrieving specific ranges of bits in a message, regardless of its internal write and read positions via SetBits and PeekBits, respectively. Use these with care, as accidentally setting or peeking bits in an incorrect range or at an incorrect position will scramble your data. Added support for adding bits to a message via AddBits. Added support for adding data to a message directly from another existing message via AddMessage. Added support for adding values to a message using a variable amount of bits (based on how large the value is) via AddVarLong/AddVarULong. Added an option to disable the [MessageHandler] attribute-based message handler system via the useMessageHandlers parameter in the Server.Start & Client.Connect methods. This is useful if you prefer to handle messages via the Server.MessageReceived & Client.MessageReceived events. Added an option to set timeout time per Connection. Added an option to specify the IP address that UdpServer and TcpServer should listen on (#26 and #79). Added the Connection.ReliableDelivered event for when a reliably sent message is successfully delivered (#42). Added bandwidth-related Connection.Metrics (#77). Added Reason to ConnectionFailedEventArgs. Added the Server.ConnectionFailed event for when a pending connection fails (#104). Added error logs for when the incorrect Create overload is used (#113). Changes Made the Message class operate on the bit-level instead of the byte-level. This allowed for a slightly reduced message header size and gives you more control over how much data you're sending (PR #121). Made poor connection quality trigger disconnections. This can be finely controlled via the Connection class's MaxAvgSendAttempts, AvgSendAttemptsResilience, MaxSendAttempts, MaxNotifyLoss, and NotifyLossResilience fields, or disabled entirely by setting CanQualityDisconnect to false. Deprecated the Message class's ReadLength, UnreadLength, and WrittenLength properties. Use ReadBits, UnreadBits, and WrittenBits instead. Changed Message.MaxPayloadSize setter's error logs to exceptions. Disabled Nagle's algorithm in the TCP transport. Removed the unnecessary 65 second limit on Connection.TimeoutTime and Peer.HeartbeatInterval. Made PriorityQueue<TElement, TPriority> publicly accessible and removed its internal use of List<T>. Removed the unnecessary AckExtra MessageHeader type. Stopped using DateTime for calculating timeouts. Updated DocFX to v2.70.1. Fixes Fixed improper duplicate filtering which allowed duplicates to be handled under certain circumstances (PR #109). Fixed unintended processing of subsequent connection attempts from connections that had already been rejected. Fixed incorrect processing of new acks for reliable messages. Fixed incorrect transport data buffer sizes. Fixed incorrect values that were used in some of the Message class's error messages. Fixed the size of PendingMessages not being changed along with Message.MaxPayloadSize. Fixed incorrect \"unknown reason\" rejection log when an already-connected connection was rejected (#84). Fixed errors that occurred when various Server properties were accessed before the first player connected (#86). Fixed the TCP transport's improper handling of large packets (#92). Fixed unhandled SocketExceptions when sending data, such as the one that occurred when a Client with no internet connection attempted to connect (#102). Fixed unintended timeout when a Client would disconnect and reconnect again in quick succession (#105). Fixed an infinite loop when a Server was started with a maxClientCount of 65,535 (#111). Fixed an issue with the TCP transport that caused connections to be rejected shortly after they were accepted and fully connected (similar to SteamTransport#1). Sponsor Shoutout Thank you so much to all of my GitHub Sponsors for helping to make this update possible by financially supporting the project!"
  },
  "manual/updates/release-notes/v2.1.1.html": {
    "href": "manual/updates/release-notes/v2.1.1.html",
    "title": "v2.1.1 Release Notes | Riptide Manual",
    "keywords": "v2.1.1 Release Notes Install this version with Unity's Package Manager using the following URL (step-by-step instructions): https://github.com/RiptideNetworking/Riptide.git?path=/Packages/Core#2.1.1 It can also be installed a number of other ways for use outside of Unity, including as a NuGet package. For a full list of source code changes, check out the version comparison on GitHub. Fixes Fixed SetBits(ulong, int, ulong[], int) not overwriting bits properly in some cases, which could cause all sorts of problems, including incorrect disconnections due to \"poor connection\" quality (#123)."
  },
  "manual/updates/release-notes/v2.1.2.html": {
    "href": "manual/updates/release-notes/v2.1.2.html",
    "title": "v2.1.2 Release Notes | Riptide Manual",
    "keywords": "v2.1.2 Release Notes Install this version with Unity's Package Manager using the following URL (step-by-step instructions): https://github.com/RiptideNetworking/Riptide.git?path=/Packages/Core#2.1.2 It can also be installed a number of other ways for use outside of Unity, including as a NuGet package. For a full list of source code changes, check out the version comparison on GitHub. Fixes Fixed AddBytes not resetting data segments, which could cause the data from previous messages to bleed over (#124)."
  },
  "manual/updates/release-notes/v2.2.0.html": {
    "href": "manual/updates/release-notes/v2.2.0.html",
    "title": "v2.2.0 Release Notes | Riptide Manual",
    "keywords": "v2.2.0 Release Notes Install this version with Unity's Package Manager using the following URL (step-by-step instructions): https://github.com/RiptideNetworking/Riptide.git?path=/Packages/Core#2.2.0 It can also be installed a number of other ways for use outside of Unity, including as a NuGet package. For a full list of source code changes, check out the version comparison on GitHub. Additions Added overloads to all Get methods that auto read array lengths (#127). Added overload to AddBytes with optinal startIndex & amount parameters (#128). Fixes Fixed AddShorts & AddUShorts not writing bits correctly (#124). Fixed redundant sequence IDs being included in reliable acks (PR #130). Fixed message retaining residual data when further data was added to a message after being received."
  }
}